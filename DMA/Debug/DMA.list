
DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004510  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004698  08004698  00014698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046e0  080046e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080046e0  080046e0  000146e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046e8  080046e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046e8  080046e8  000146e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046ec  080046ec  000146ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080046f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  080046fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  080046fc  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c885  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c91  00000000  00000000  0002c8c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002e558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002ef08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b8e  00000000  00000000  0002f810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be52  00000000  00000000  0005539e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8780  00000000  00000000  000611f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00149970  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026a0  00000000  00000000  001499c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004680 	.word	0x08004680

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004680 	.word	0x08004680

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_UARTEx_RxEventCallback>:
uint8_t data;



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	460b      	mov	r3, r1
 80004d6:	807b      	strh	r3, [r7, #2]

  if(huart->Instance == USART1)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a19      	ldr	r2, [pc, #100]	; (8000544 <HAL_UARTEx_RxEventCallback+0x78>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d119      	bne.n	8000516 <HAL_UARTEx_RxEventCallback+0x4a>
//	  {
//		  memcpy ((uint8_t *)MainBuf+oldPos, RxBuf, Size);
//		  newPos = Size+oldPos;
//	  }
//	  memcpy (MainBuf, RxBuf, Size);
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, &data, 1);
 80004e2:	2201      	movs	r2, #1
 80004e4:	4918      	ldr	r1, [pc, #96]	; (8000548 <HAL_UARTEx_RxEventCallback+0x7c>)
 80004e6:	4819      	ldr	r0, [pc, #100]	; (800054c <HAL_UARTEx_RxEventCallback+0x80>)
 80004e8:	f004 f843 	bl	8004572 <HAL_UARTEx_ReceiveToIdle_DMA>
	  RxBuf[i] = data;
 80004ec:	4b18      	ldr	r3, [pc, #96]	; (8000550 <HAL_UARTEx_RxEventCallback+0x84>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	461a      	mov	r2, r3
 80004f2:	4b15      	ldr	r3, [pc, #84]	; (8000548 <HAL_UARTEx_RxEventCallback+0x7c>)
 80004f4:	7819      	ldrb	r1, [r3, #0]
 80004f6:	4b17      	ldr	r3, [pc, #92]	; (8000554 <HAL_UARTEx_RxEventCallback+0x88>)
 80004f8:	5499      	strb	r1, [r3, r2]
	  i++;
 80004fa:	4b15      	ldr	r3, [pc, #84]	; (8000550 <HAL_UARTEx_RxEventCallback+0x84>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	3301      	adds	r3, #1
 8000500:	b2da      	uxtb	r2, r3
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <HAL_UARTEx_RxEventCallback+0x84>)
 8000504:	701a      	strb	r2, [r3, #0]


	  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000506:	4b14      	ldr	r3, [pc, #80]	; (8000558 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <HAL_UARTEx_RxEventCallback+0x8c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f022 0204 	bic.w	r2, r2, #4
 8000514:	601a      	str	r2, [r3, #0]
//  {
//	  isOk = 1;
//  }
//}

	if(data=='\r')
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <HAL_UARTEx_RxEventCallback+0x7c>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b0d      	cmp	r3, #13
 800051c:	d10e      	bne.n	800053c <HAL_UARTEx_RxEventCallback+0x70>
	{
	HAL_UART_Transmit(&huart1, RxBuf, sizeof(RxBuf), 500);
 800051e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000522:	2214      	movs	r2, #20
 8000524:	490b      	ldr	r1, [pc, #44]	; (8000554 <HAL_UARTEx_RxEventCallback+0x88>)
 8000526:	4809      	ldr	r0, [pc, #36]	; (800054c <HAL_UARTEx_RxEventCallback+0x80>)
 8000528:	f002 fdb8 	bl	800309c <HAL_UART_Transmit>
	i=0;
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <HAL_UARTEx_RxEventCallback+0x84>)
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
	memset(RxBuf,0 , sizeof(RxBuf) );
 8000532:	2214      	movs	r2, #20
 8000534:	2100      	movs	r1, #0
 8000536:	4807      	ldr	r0, [pc, #28]	; (8000554 <HAL_UARTEx_RxEventCallback+0x88>)
 8000538:	f004 f89a 	bl	8004670 <memset>
	}
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40013800 	.word	0x40013800
 8000548:	2000010c 	.word	0x2000010c
 800054c:	20000028 	.word	0x20000028
 8000550:	200000f4 	.word	0x200000f4
 8000554:	200000f8 	.word	0x200000f8
 8000558:	200000ac 	.word	0x200000ac

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000560:	f000 fc4b 	bl	8000dfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000564:	f000 f820 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000568:	f000 f8be 	bl	80006e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800056c:	f000 f89e 	bl	80006ac <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000570:	f000 f86c 	bl	800064c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuf, RxBuf_SIZE);
 8000574:	2214      	movs	r2, #20
 8000576:	4909      	ldr	r1, [pc, #36]	; (800059c <main+0x40>)
 8000578:	4809      	ldr	r0, [pc, #36]	; (80005a0 <main+0x44>)
 800057a:	f003 fffa 	bl	8004572 <HAL_UARTEx_ReceiveToIdle_DMA>
__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <main+0x48>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <main+0x48>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f022 0204 	bic.w	r2, r2, #4
 800058c:	601a      	str	r2, [r3, #0]
HAL_UARTEx_RxEventCallback(&huart1,RxBuf);
 800058e:	4b03      	ldr	r3, [pc, #12]	; (800059c <main+0x40>)
 8000590:	b29b      	uxth	r3, r3
 8000592:	4619      	mov	r1, r3
 8000594:	4802      	ldr	r0, [pc, #8]	; (80005a0 <main+0x44>)
 8000596:	f7ff ff99 	bl	80004cc <HAL_UARTEx_RxEventCallback>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059a:	e7fe      	b.n	800059a <main+0x3e>
 800059c:	200000f8 	.word	0x200000f8
 80005a0:	20000028 	.word	0x20000028
 80005a4:	200000ac 	.word	0x200000ac

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b096      	sub	sp, #88	; 0x58
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	2244      	movs	r2, #68	; 0x44
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f004 f85a 	bl	8004670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	463b      	mov	r3, r7
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ce:	f001 fa05 	bl	80019dc <HAL_PWREx_ControlVoltageScaling>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005d8:	f000 fab0 	bl	8000b3c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005dc:	2310      	movs	r3, #16
 80005de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005e0:	2301      	movs	r3, #1
 80005e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005e8:	2360      	movs	r3, #96	; 0x60
 80005ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ec:	2302      	movs	r3, #2
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005f0:	2301      	movs	r3, #1
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005f4:	2301      	movs	r3, #1
 80005f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80005f8:	2310      	movs	r3, #16
 80005fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005fc:	2307      	movs	r3, #7
 80005fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	4618      	mov	r0, r3
 800060e:	f001 fa3b 	bl	8001a88 <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000618:	f000 fa90 	bl	8000b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	230f      	movs	r3, #15
 800061e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000620:	2303      	movs	r3, #3
 8000622:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f001 fe03 	bl	8002240 <HAL_RCC_ClockConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000640:	f000 fa7c 	bl	8000b3c <Error_Handler>
  }
}
 8000644:	bf00      	nop
 8000646:	3758      	adds	r7, #88	; 0x58
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 8000652:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <MX_USART1_UART_Init+0x5c>)
 8000654:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 8000658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800065c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 8000690:	f002 fcb6 	bl	8003000 <HAL_UART_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800069a:	f000 fa4f 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000028 	.word	0x20000028
 80006a8:	40013800 	.word	0x40013800

080006ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_DMA_Init+0x38>)
 80006b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006b6:	4a0b      	ldr	r2, [pc, #44]	; (80006e4 <MX_DMA_Init+0x38>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6493      	str	r3, [r2, #72]	; 0x48
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_DMA_Init+0x38>)
 80006c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	200f      	movs	r0, #15
 80006d0:	f000 fce3 	bl	800109a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80006d4:	200f      	movs	r0, #15
 80006d6:	f000 fcfc 	bl	80010d2 <HAL_NVIC_EnableIRQ>

}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fe:	4bbc      	ldr	r3, [pc, #752]	; (80009f0 <MX_GPIO_Init+0x308>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	4abb      	ldr	r2, [pc, #748]	; (80009f0 <MX_GPIO_Init+0x308>)
 8000704:	f043 0310 	orr.w	r3, r3, #16
 8000708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070a:	4bb9      	ldr	r3, [pc, #740]	; (80009f0 <MX_GPIO_Init+0x308>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	f003 0310 	and.w	r3, r3, #16
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	4bb6      	ldr	r3, [pc, #728]	; (80009f0 <MX_GPIO_Init+0x308>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	4ab5      	ldr	r2, [pc, #724]	; (80009f0 <MX_GPIO_Init+0x308>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000722:	4bb3      	ldr	r3, [pc, #716]	; (80009f0 <MX_GPIO_Init+0x308>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	4bb0      	ldr	r3, [pc, #704]	; (80009f0 <MX_GPIO_Init+0x308>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	4aaf      	ldr	r2, [pc, #700]	; (80009f0 <MX_GPIO_Init+0x308>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073a:	4bad      	ldr	r3, [pc, #692]	; (80009f0 <MX_GPIO_Init+0x308>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	4baa      	ldr	r3, [pc, #680]	; (80009f0 <MX_GPIO_Init+0x308>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4aa9      	ldr	r2, [pc, #676]	; (80009f0 <MX_GPIO_Init+0x308>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4ba7      	ldr	r3, [pc, #668]	; (80009f0 <MX_GPIO_Init+0x308>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075e:	4ba4      	ldr	r3, [pc, #656]	; (80009f0 <MX_GPIO_Init+0x308>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4aa3      	ldr	r2, [pc, #652]	; (80009f0 <MX_GPIO_Init+0x308>)
 8000764:	f043 0308 	orr.w	r3, r3, #8
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4ba1      	ldr	r3, [pc, #644]	; (80009f0 <MX_GPIO_Init+0x308>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0308 	and.w	r3, r3, #8
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 718a 	mov.w	r1, #276	; 0x114
 800077c:	489d      	ldr	r0, [pc, #628]	; (80009f4 <MX_GPIO_Init+0x30c>)
 800077e:	f001 f8e3 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f248 1104 	movw	r1, #33028	; 0x8104
 8000788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078c:	f001 f8dc 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000790:	2200      	movs	r2, #0
 8000792:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000796:	4898      	ldr	r0, [pc, #608]	; (80009f8 <MX_GPIO_Init+0x310>)
 8000798:	f001 f8d6 	bl	8001948 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f241 0181 	movw	r1, #4225	; 0x1081
 80007a2:	4896      	ldr	r0, [pc, #600]	; (80009fc <MX_GPIO_Init+0x314>)
 80007a4:	f001 f8d0 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ae:	4893      	ldr	r0, [pc, #588]	; (80009fc <MX_GPIO_Init+0x314>)
 80007b0:	f001 f8ca 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80007ba:	4891      	ldr	r0, [pc, #580]	; (8000a00 <MX_GPIO_Init+0x318>)
 80007bc:	f001 f8c4 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	2120      	movs	r1, #32
 80007c4:	488c      	ldr	r0, [pc, #560]	; (80009f8 <MX_GPIO_Init+0x310>)
 80007c6:	f001 f8bf 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80007ca:	2201      	movs	r2, #1
 80007cc:	2101      	movs	r1, #1
 80007ce:	4889      	ldr	r0, [pc, #548]	; (80009f4 <MX_GPIO_Init+0x30c>)
 80007d0:	f001 f8ba 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80007d4:	f240 1315 	movw	r3, #277	; 0x115
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4619      	mov	r1, r3
 80007ec:	4881      	ldr	r0, [pc, #516]	; (80009f4 <MX_GPIO_Init+0x30c>)
 80007ee:	f000 ff01 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80007f2:	236a      	movs	r3, #106	; 0x6a
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	487b      	ldr	r0, [pc, #492]	; (80009f4 <MX_GPIO_Init+0x30c>)
 8000808:	f000 fef4 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800080c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000812:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	4877      	ldr	r0, [pc, #476]	; (8000a00 <MX_GPIO_Init+0x318>)
 8000824:	f000 fee6 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000828:	233f      	movs	r3, #63	; 0x3f
 800082a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800082c:	230b      	movs	r3, #11
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	4871      	ldr	r0, [pc, #452]	; (8000a00 <MX_GPIO_Init+0x318>)
 800083c:	f000 feda 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000840:	2303      	movs	r3, #3
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000850:	2308      	movs	r3, #8
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085e:	f000 fec9 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000862:	f248 1304 	movw	r3, #33028	; 0x8104
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087e:	f000 feb9 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000882:	2308      	movs	r3, #8
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000892:	2301      	movs	r3, #1
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a0:	f000 fea8 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80008a4:	2310      	movs	r3, #16
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008a8:	230b      	movs	r3, #11
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ba:	f000 fe9b 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80008be:	23e0      	movs	r3, #224	; 0xe0
 80008c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ce:	2305      	movs	r3, #5
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008dc:	f000 fe8a 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80008e0:	2301      	movs	r3, #1
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	4840      	ldr	r0, [pc, #256]	; (80009f8 <MX_GPIO_Init+0x310>)
 80008f6:	f000 fe7d 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80008fa:	2302      	movs	r3, #2
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008fe:	230b      	movs	r3, #11
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	483a      	ldr	r0, [pc, #232]	; (80009f8 <MX_GPIO_Init+0x310>)
 800090e:	f000 fe71 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000912:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000916:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	4833      	ldr	r0, [pc, #204]	; (80009f8 <MX_GPIO_Init+0x310>)
 800092c:	f000 fe62 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000930:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000942:	2306      	movs	r3, #6
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	4829      	ldr	r0, [pc, #164]	; (80009f4 <MX_GPIO_Init+0x30c>)
 800094e:	f000 fe51 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000952:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000956:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000964:	230a      	movs	r3, #10
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	4821      	ldr	r0, [pc, #132]	; (80009f4 <MX_GPIO_Init+0x30c>)
 8000970:	f000 fe40 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000974:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800097a:	2312      	movs	r3, #18
 800097c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000986:	2304      	movs	r3, #4
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4819      	ldr	r0, [pc, #100]	; (80009f8 <MX_GPIO_Init+0x310>)
 8000992:	f000 fe2f 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000996:	f44f 7340 	mov.w	r3, #768	; 0x300
 800099a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a4:	2303      	movs	r3, #3
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009a8:	2307      	movs	r3, #7
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4619      	mov	r1, r3
 80009b2:	4812      	ldr	r0, [pc, #72]	; (80009fc <MX_GPIO_Init+0x314>)
 80009b4:	f000 fe1e 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80009b8:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80009bc:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	480b      	ldr	r0, [pc, #44]	; (80009fc <MX_GPIO_Init+0x314>)
 80009d0:	f000 fe10 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80009d4:	f243 0381 	movw	r3, #12417	; 0x3081
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	e00a      	b.n	8000a04 <MX_GPIO_Init+0x31c>
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000
 80009f4:	48001000 	.word	0x48001000
 80009f8:	48000400 	.word	0x48000400
 80009fc:	48000c00 	.word	0x48000c00
 8000a00:	48000800 	.word	0x48000800
 8000a04:	484a      	ldr	r0, [pc, #296]	; (8000b30 <MX_GPIO_Init+0x448>)
 8000a06:	f000 fdf5 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000a0a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	4844      	ldr	r0, [pc, #272]	; (8000b34 <MX_GPIO_Init+0x44c>)
 8000a24:	f000 fde6 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000a28:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	483d      	ldr	r0, [pc, #244]	; (8000b34 <MX_GPIO_Init+0x44c>)
 8000a40:	f000 fdd8 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5c:	f000 fdca 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000a60:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a72:	230a      	movs	r3, #10
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a80:	f000 fdb8 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000a84:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a96:	2306      	movs	r3, #6
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4824      	ldr	r0, [pc, #144]	; (8000b34 <MX_GPIO_Init+0x44c>)
 8000aa2:	f000 fda7 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ab6:	2305      	movs	r3, #5
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	481b      	ldr	r0, [pc, #108]	; (8000b30 <MX_GPIO_Init+0x448>)
 8000ac2:	f000 fd97 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000ac6:	2378      	movs	r3, #120	; 0x78
 8000ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ad6:	2307      	movs	r3, #7
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4813      	ldr	r0, [pc, #76]	; (8000b30 <MX_GPIO_Init+0x448>)
 8000ae2:	f000 fd87 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000ae6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aec:	2312      	movs	r3, #18
 8000aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000af8:	2304      	movs	r3, #4
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	480d      	ldr	r0, [pc, #52]	; (8000b38 <MX_GPIO_Init+0x450>)
 8000b04:	f000 fd76 	bl	80015f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2017      	movs	r0, #23
 8000b0e:	f000 fac4 	bl	800109a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b12:	2017      	movs	r0, #23
 8000b14:	f000 fadd 	bl	80010d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2028      	movs	r0, #40	; 0x28
 8000b1e:	f000 fabc 	bl	800109a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b22:	2028      	movs	r0, #40	; 0x28
 8000b24:	f000 fad5 	bl	80010d2 <HAL_NVIC_EnableIRQ>

}
 8000b28:	bf00      	nop
 8000b2a:	3728      	adds	r7, #40	; 0x28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	48000c00 	.word	0x48000c00
 8000b34:	48000800 	.word	0x48000800
 8000b38:	48000400 	.word	0x48000400

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <Error_Handler+0x8>
	...

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_MspInit+0x44>)
 8000b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b52:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <HAL_MspInit+0x44>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_MspInit+0x44>)
 8000b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_MspInit+0x44>)
 8000b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_MspInit+0x44>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	6593      	str	r3, [r2, #88]	; 0x58
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_MspInit+0x44>)
 8000b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000

08000b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b0ac      	sub	sp, #176	; 0xb0
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2288      	movs	r2, #136	; 0x88
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f003 fd5d 	bl	8004670 <memset>
  if(huart->Instance==USART1)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a39      	ldr	r2, [pc, #228]	; (8000ca0 <HAL_UART_MspInit+0x110>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d16b      	bne.n	8000c98 <HAL_UART_MspInit+0x108>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f001 fd5b 	bl	8002688 <HAL_RCCEx_PeriphCLKConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bd8:	f7ff ffb0 	bl	8000b3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bdc:	4b31      	ldr	r3, [pc, #196]	; (8000ca4 <HAL_UART_MspInit+0x114>)
 8000bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be0:	4a30      	ldr	r2, [pc, #192]	; (8000ca4 <HAL_UART_MspInit+0x114>)
 8000be2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be6:	6613      	str	r3, [r2, #96]	; 0x60
 8000be8:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <HAL_UART_MspInit+0x114>)
 8000bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf4:	4b2b      	ldr	r3, [pc, #172]	; (8000ca4 <HAL_UART_MspInit+0x114>)
 8000bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf8:	4a2a      	ldr	r2, [pc, #168]	; (8000ca4 <HAL_UART_MspInit+0x114>)
 8000bfa:	f043 0302 	orr.w	r3, r3, #2
 8000bfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c00:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <HAL_UART_MspInit+0x114>)
 8000c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000c0c:	23c0      	movs	r3, #192	; 0xc0
 8000c0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c24:	2307      	movs	r3, #7
 8000c26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c2e:	4619      	mov	r1, r3
 8000c30:	481d      	ldr	r0, [pc, #116]	; (8000ca8 <HAL_UART_MspInit+0x118>)
 8000c32:	f000 fcdf 	bl	80015f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000c36:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <HAL_UART_MspInit+0x11c>)
 8000c38:	4a1d      	ldr	r2, [pc, #116]	; (8000cb0 <HAL_UART_MspInit+0x120>)
 8000c3a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <HAL_UART_MspInit+0x11c>)
 8000c3e:	2202      	movs	r2, #2
 8000c40:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <HAL_UART_MspInit+0x11c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c48:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_UART_MspInit+0x11c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <HAL_UART_MspInit+0x11c>)
 8000c50:	2280      	movs	r2, #128	; 0x80
 8000c52:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_UART_MspInit+0x11c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <HAL_UART_MspInit+0x11c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_UART_MspInit+0x11c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_UART_MspInit+0x11c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c6c:	480f      	ldr	r0, [pc, #60]	; (8000cac <HAL_UART_MspInit+0x11c>)
 8000c6e:	f000 fa4b 	bl	8001108 <HAL_DMA_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8000c78:	f7ff ff60 	bl	8000b3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <HAL_UART_MspInit+0x11c>)
 8000c80:	671a      	str	r2, [r3, #112]	; 0x70
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <HAL_UART_MspInit+0x11c>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2025      	movs	r0, #37	; 0x25
 8000c8e:	f000 fa04 	bl	800109a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c92:	2025      	movs	r0, #37	; 0x25
 8000c94:	f000 fa1d 	bl	80010d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c98:	bf00      	nop
 8000c9a:	37b0      	adds	r7, #176	; 0xb0
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40013800 	.word	0x40013800
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	48000400 	.word	0x48000400
 8000cac:	200000ac 	.word	0x200000ac
 8000cb0:	40020058 	.word	0x40020058

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <NMI_Handler+0x4>

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d00:	f000 f8d0 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <DMA1_Channel5_IRQHandler+0x10>)
 8000d0e:	f000 fb92 	bl	8001436 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200000ac 	.word	0x200000ac

08000d1c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8000d20:	2020      	movs	r0, #32
 8000d22:	f000 fe29 	bl	8001978 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8000d26:	2040      	movs	r0, #64	; 0x40
 8000d28:	f000 fe26 	bl	8001978 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8000d2c:	2080      	movs	r0, #128	; 0x80
 8000d2e:	f000 fe23 	bl	8001978 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8000d32:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000d36:	f000 fe1f 	bl	8001978 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <USART1_IRQHandler+0x10>)
 8000d46:	f002 fa3d 	bl	80031c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000028 	.word	0x20000028

08000d54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8000d58:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d5c:	f000 fe0c 	bl	8001978 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8000d60:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d64:	f000 fe08 	bl	8001978 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8000d68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d6c:	f000 fe04 	bl	8001978 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8000d70:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d74:	f000 fe00 	bl	8001978 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8000d78:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000d7c:	f000 fdfc 	bl	8001978 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <SystemInit+0x20>)
 8000d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <SystemInit+0x20>)
 8000d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dac:	f7ff ffea 	bl	8000d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000db2:	490d      	ldr	r1, [pc, #52]	; (8000de8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <LoopForever+0xe>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc8:	4c0a      	ldr	r4, [pc, #40]	; (8000df4 <LoopForever+0x16>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f003 fc27 	bl	8004628 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dda:	f7ff fbbf 	bl	800055c <main>

08000dde <LoopForever>:

LoopForever:
    b LoopForever
 8000dde:	e7fe      	b.n	8000dde <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000de0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dec:	080046f0 	.word	0x080046f0
  ldr r2, =_sbss
 8000df0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000df4:	20000114 	.word	0x20000114

08000df8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC1_2_IRQHandler>

08000dfa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e00:	2300      	movs	r3, #0
 8000e02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f93d 	bl	8001084 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f000 f80e 	bl	8000e2c <HAL_InitTick>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d002      	beq.n	8000e1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	71fb      	strb	r3, [r7, #7]
 8000e1a:	e001      	b.n	8000e20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e1c:	f7ff fe94 	bl	8000b48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e20:	79fb      	ldrb	r3, [r7, #7]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e34:	2300      	movs	r3, #0
 8000e36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <HAL_InitTick+0x6c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d023      	beq.n	8000e88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e40:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <HAL_InitTick+0x70>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <HAL_InitTick+0x6c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f949 	bl	80010ee <HAL_SYSTICK_Config>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10f      	bne.n	8000e82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b0f      	cmp	r3, #15
 8000e66:	d809      	bhi.n	8000e7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f000 f913 	bl	800109a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e74:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <HAL_InitTick+0x74>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	e007      	b.n	8000e8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	73fb      	strb	r3, [r7, #15]
 8000e80:	e004      	b.n	8000e8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	73fb      	strb	r3, [r7, #15]
 8000e86:	e001      	b.n	8000e8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000110 	.word	0x20000110

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000110 	.word	0x20000110

08000ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f00:	4013      	ands	r3, r2
 8000f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	60d3      	str	r3, [r2, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <__NVIC_GetPriorityGrouping+0x18>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	f003 0307 	and.w	r3, r3, #7
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	db0b      	blt.n	8000f72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	f003 021f 	and.w	r2, r3, #31
 8000f60:	4907      	ldr	r1, [pc, #28]	; (8000f80 <__NVIC_EnableIRQ+0x38>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	095b      	lsrs	r3, r3, #5
 8000f68:	2001      	movs	r0, #1
 8000f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000e100 	.word	0xe000e100

08000f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	db0a      	blt.n	8000fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	490c      	ldr	r1, [pc, #48]	; (8000fd0 <__NVIC_SetPriority+0x4c>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	0112      	lsls	r2, r2, #4
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fac:	e00a      	b.n	8000fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4908      	ldr	r1, [pc, #32]	; (8000fd4 <__NVIC_SetPriority+0x50>)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	3b04      	subs	r3, #4
 8000fbc:	0112      	lsls	r2, r2, #4
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	761a      	strb	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000e100 	.word	0xe000e100
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	bf28      	it	cs
 8000ff6:	2304      	movcs	r3, #4
 8000ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	2b06      	cmp	r3, #6
 8001000:	d902      	bls.n	8001008 <NVIC_EncodePriority+0x30>
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3b03      	subs	r3, #3
 8001006:	e000      	b.n	800100a <NVIC_EncodePriority+0x32>
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43da      	mvns	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	401a      	ands	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001020:	f04f 31ff 	mov.w	r1, #4294967295
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43d9      	mvns	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	4313      	orrs	r3, r2
         );
}
 8001032:	4618      	mov	r0, r3
 8001034:	3724      	adds	r7, #36	; 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001050:	d301      	bcc.n	8001056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001052:	2301      	movs	r3, #1
 8001054:	e00f      	b.n	8001076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <SysTick_Config+0x40>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105e:	210f      	movs	r1, #15
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f7ff ff8e 	bl	8000f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <SysTick_Config+0x40>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106e:	4b04      	ldr	r3, [pc, #16]	; (8001080 <SysTick_Config+0x40>)
 8001070:	2207      	movs	r2, #7
 8001072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	e000e010 	.word	0xe000e010

08001084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff29 	bl	8000ee4 <__NVIC_SetPriorityGrouping>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b086      	sub	sp, #24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010ac:	f7ff ff3e 	bl	8000f2c <__NVIC_GetPriorityGrouping>
 80010b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	6978      	ldr	r0, [r7, #20]
 80010b8:	f7ff ff8e 	bl	8000fd8 <NVIC_EncodePriority>
 80010bc:	4602      	mov	r2, r0
 80010be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff5d 	bl	8000f84 <__NVIC_SetPriority>
}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff31 	bl	8000f48 <__NVIC_EnableIRQ>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ffa2 	bl	8001040 <SysTick_Config>
 80010fc:	4603      	mov	r3, r0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e098      	b.n	800124c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	4b4d      	ldr	r3, [pc, #308]	; (8001258 <HAL_DMA_Init+0x150>)
 8001122:	429a      	cmp	r2, r3
 8001124:	d80f      	bhi.n	8001146 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	4b4b      	ldr	r3, [pc, #300]	; (800125c <HAL_DMA_Init+0x154>)
 800112e:	4413      	add	r3, r2
 8001130:	4a4b      	ldr	r2, [pc, #300]	; (8001260 <HAL_DMA_Init+0x158>)
 8001132:	fba2 2303 	umull	r2, r3, r2, r3
 8001136:	091b      	lsrs	r3, r3, #4
 8001138:	009a      	lsls	r2, r3, #2
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a48      	ldr	r2, [pc, #288]	; (8001264 <HAL_DMA_Init+0x15c>)
 8001142:	641a      	str	r2, [r3, #64]	; 0x40
 8001144:	e00e      	b.n	8001164 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	4b46      	ldr	r3, [pc, #280]	; (8001268 <HAL_DMA_Init+0x160>)
 800114e:	4413      	add	r3, r2
 8001150:	4a43      	ldr	r2, [pc, #268]	; (8001260 <HAL_DMA_Init+0x158>)
 8001152:	fba2 2303 	umull	r2, r3, r2, r3
 8001156:	091b      	lsrs	r3, r3, #4
 8001158:	009a      	lsls	r2, r3, #2
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a42      	ldr	r2, [pc, #264]	; (800126c <HAL_DMA_Init+0x164>)
 8001162:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2202      	movs	r2, #2
 8001168:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800117a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800117e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001188:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001194:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80011be:	d039      	beq.n	8001234 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	4a27      	ldr	r2, [pc, #156]	; (8001264 <HAL_DMA_Init+0x15c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d11a      	bne.n	8001200 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80011ca:	4b29      	ldr	r3, [pc, #164]	; (8001270 <HAL_DMA_Init+0x168>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f003 031c 	and.w	r3, r3, #28
 80011d6:	210f      	movs	r1, #15
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	4924      	ldr	r1, [pc, #144]	; (8001270 <HAL_DMA_Init+0x168>)
 80011e0:	4013      	ands	r3, r2
 80011e2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80011e4:	4b22      	ldr	r3, [pc, #136]	; (8001270 <HAL_DMA_Init+0x168>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6859      	ldr	r1, [r3, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f0:	f003 031c 	and.w	r3, r3, #28
 80011f4:	fa01 f303 	lsl.w	r3, r1, r3
 80011f8:	491d      	ldr	r1, [pc, #116]	; (8001270 <HAL_DMA_Init+0x168>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]
 80011fe:	e019      	b.n	8001234 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001200:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <HAL_DMA_Init+0x16c>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001208:	f003 031c 	and.w	r3, r3, #28
 800120c:	210f      	movs	r1, #15
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	4917      	ldr	r1, [pc, #92]	; (8001274 <HAL_DMA_Init+0x16c>)
 8001216:	4013      	ands	r3, r2
 8001218:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <HAL_DMA_Init+0x16c>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6859      	ldr	r1, [r3, #4]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	f003 031c 	and.w	r3, r3, #28
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	4911      	ldr	r1, [pc, #68]	; (8001274 <HAL_DMA_Init+0x16c>)
 8001230:	4313      	orrs	r3, r2
 8001232:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2201      	movs	r2, #1
 800123e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	40020407 	.word	0x40020407
 800125c:	bffdfff8 	.word	0xbffdfff8
 8001260:	cccccccd 	.word	0xcccccccd
 8001264:	40020000 	.word	0x40020000
 8001268:	bffdfbf8 	.word	0xbffdfbf8
 800126c:	40020400 	.word	0x40020400
 8001270:	400200a8 	.word	0x400200a8
 8001274:	400204a8 	.word	0x400204a8

08001278 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001290:	2b01      	cmp	r3, #1
 8001292:	d101      	bne.n	8001298 <HAL_DMA_Start_IT+0x20>
 8001294:	2302      	movs	r3, #2
 8001296:	e04b      	b.n	8001330 <HAL_DMA_Start_IT+0xb8>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d13a      	bne.n	8001322 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2202      	movs	r2, #2
 80012b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2200      	movs	r2, #0
 80012b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0201 	bic.w	r2, r2, #1
 80012c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	68b9      	ldr	r1, [r7, #8]
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f000 f95f 	bl	8001594 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d008      	beq.n	80012f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f042 020e 	orr.w	r2, r2, #14
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	e00f      	b.n	8001310 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0204 	bic.w	r2, r2, #4
 80012fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 020a 	orr.w	r2, r2, #10
 800130e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0201 	orr.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	e005      	b.n	800132e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800132a:	2302      	movs	r3, #2
 800132c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800132e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001340:	2300      	movs	r3, #0
 8001342:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d008      	beq.n	8001362 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2204      	movs	r2, #4
 8001354:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e022      	b.n	80013a8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 020e 	bic.w	r2, r2, #14
 8001370:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0201 	bic.w	r2, r2, #1
 8001380:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f003 021c 	and.w	r2, r3, #28
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	2101      	movs	r1, #1
 8001390:	fa01 f202 	lsl.w	r2, r1, r2
 8001394:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d005      	beq.n	80013d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2204      	movs	r2, #4
 80013d0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	e029      	b.n	800142c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 020e 	bic.w	r2, r2, #14
 80013e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0201 	bic.w	r2, r2, #1
 80013f6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fc:	f003 021c 	and.w	r2, r3, #28
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	2101      	movs	r1, #1
 8001406:	fa01 f202 	lsl.w	r2, r1, r2
 800140a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	4798      	blx	r3
    }
  }
  return status;
 800142c:	7bfb      	ldrb	r3, [r7, #15]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b084      	sub	sp, #16
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f003 031c 	and.w	r3, r3, #28
 8001456:	2204      	movs	r2, #4
 8001458:	409a      	lsls	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4013      	ands	r3, r2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d026      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x7a>
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	d021      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0320 	and.w	r3, r3, #32
 8001476:	2b00      	cmp	r3, #0
 8001478:	d107      	bne.n	800148a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0204 	bic.w	r2, r2, #4
 8001488:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f003 021c 	and.w	r2, r3, #28
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	2104      	movs	r1, #4
 8001498:	fa01 f202 	lsl.w	r2, r1, r2
 800149c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d071      	beq.n	800158a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80014ae:	e06c      	b.n	800158a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b4:	f003 031c 	and.w	r3, r3, #28
 80014b8:	2202      	movs	r2, #2
 80014ba:	409a      	lsls	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4013      	ands	r3, r2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d02e      	beq.n	8001522 <HAL_DMA_IRQHandler+0xec>
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d029      	beq.n	8001522 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0320 	and.w	r3, r3, #32
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10b      	bne.n	80014f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 020a 	bic.w	r2, r2, #10
 80014ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f8:	f003 021c 	and.w	r2, r3, #28
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	2102      	movs	r1, #2
 8001502:	fa01 f202 	lsl.w	r2, r1, r2
 8001506:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001514:	2b00      	cmp	r3, #0
 8001516:	d038      	beq.n	800158a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001520:	e033      	b.n	800158a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f003 031c 	and.w	r3, r3, #28
 800152a:	2208      	movs	r2, #8
 800152c:	409a      	lsls	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4013      	ands	r3, r2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d02a      	beq.n	800158c <HAL_DMA_IRQHandler+0x156>
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b00      	cmp	r3, #0
 800153e:	d025      	beq.n	800158c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 020e 	bic.w	r2, r2, #14
 800154e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001554:	f003 021c 	and.w	r2, r3, #28
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	2101      	movs	r1, #1
 800155e:	fa01 f202 	lsl.w	r2, r1, r2
 8001562:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800157e:	2b00      	cmp	r3, #0
 8001580:	d004      	beq.n	800158c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800158a:	bf00      	nop
 800158c:	bf00      	nop
}
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f003 021c 	and.w	r2, r3, #28
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	2101      	movs	r1, #1
 80015b0:	fa01 f202 	lsl.w	r2, r1, r2
 80015b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b10      	cmp	r3, #16
 80015c4:	d108      	bne.n	80015d8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015d6:	e007      	b.n	80015e8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68ba      	ldr	r2, [r7, #8]
 80015de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	60da      	str	r2, [r3, #12]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001602:	e17f      	b.n	8001904 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	2101      	movs	r1, #1
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	fa01 f303 	lsl.w	r3, r1, r3
 8001610:	4013      	ands	r3, r2
 8001612:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 8171 	beq.w	80018fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	2b01      	cmp	r3, #1
 8001626:	d005      	beq.n	8001634 <HAL_GPIO_Init+0x40>
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d130      	bne.n	8001696 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	2203      	movs	r2, #3
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	68da      	ldr	r2, [r3, #12]
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800166a:	2201      	movs	r2, #1
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	091b      	lsrs	r3, r3, #4
 8001680:	f003 0201 	and.w	r2, r3, #1
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	2b03      	cmp	r3, #3
 80016a0:	d118      	bne.n	80016d4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016a8:	2201      	movs	r2, #1
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	08db      	lsrs	r3, r3, #3
 80016be:	f003 0201 	and.w	r2, r3, #1
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d017      	beq.n	8001710 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	2203      	movs	r2, #3
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d123      	bne.n	8001764 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	08da      	lsrs	r2, r3, #3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3208      	adds	r2, #8
 8001724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001728:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	220f      	movs	r2, #15
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	691a      	ldr	r2, [r3, #16]
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	08da      	lsrs	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3208      	adds	r2, #8
 800175e:	6939      	ldr	r1, [r7, #16]
 8001760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	2203      	movs	r2, #3
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0203 	and.w	r2, r3, #3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f000 80ac 	beq.w	80018fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	4b5f      	ldr	r3, [pc, #380]	; (8001924 <HAL_GPIO_Init+0x330>)
 80017a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017aa:	4a5e      	ldr	r2, [pc, #376]	; (8001924 <HAL_GPIO_Init+0x330>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6613      	str	r3, [r2, #96]	; 0x60
 80017b2:	4b5c      	ldr	r3, [pc, #368]	; (8001924 <HAL_GPIO_Init+0x330>)
 80017b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017be:	4a5a      	ldr	r2, [pc, #360]	; (8001928 <HAL_GPIO_Init+0x334>)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	3302      	adds	r3, #2
 80017c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	220f      	movs	r2, #15
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4013      	ands	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017e8:	d025      	beq.n	8001836 <HAL_GPIO_Init+0x242>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a4f      	ldr	r2, [pc, #316]	; (800192c <HAL_GPIO_Init+0x338>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d01f      	beq.n	8001832 <HAL_GPIO_Init+0x23e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a4e      	ldr	r2, [pc, #312]	; (8001930 <HAL_GPIO_Init+0x33c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d019      	beq.n	800182e <HAL_GPIO_Init+0x23a>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a4d      	ldr	r2, [pc, #308]	; (8001934 <HAL_GPIO_Init+0x340>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d013      	beq.n	800182a <HAL_GPIO_Init+0x236>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a4c      	ldr	r2, [pc, #304]	; (8001938 <HAL_GPIO_Init+0x344>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d00d      	beq.n	8001826 <HAL_GPIO_Init+0x232>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a4b      	ldr	r2, [pc, #300]	; (800193c <HAL_GPIO_Init+0x348>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d007      	beq.n	8001822 <HAL_GPIO_Init+0x22e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a4a      	ldr	r2, [pc, #296]	; (8001940 <HAL_GPIO_Init+0x34c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d101      	bne.n	800181e <HAL_GPIO_Init+0x22a>
 800181a:	2306      	movs	r3, #6
 800181c:	e00c      	b.n	8001838 <HAL_GPIO_Init+0x244>
 800181e:	2307      	movs	r3, #7
 8001820:	e00a      	b.n	8001838 <HAL_GPIO_Init+0x244>
 8001822:	2305      	movs	r3, #5
 8001824:	e008      	b.n	8001838 <HAL_GPIO_Init+0x244>
 8001826:	2304      	movs	r3, #4
 8001828:	e006      	b.n	8001838 <HAL_GPIO_Init+0x244>
 800182a:	2303      	movs	r3, #3
 800182c:	e004      	b.n	8001838 <HAL_GPIO_Init+0x244>
 800182e:	2302      	movs	r3, #2
 8001830:	e002      	b.n	8001838 <HAL_GPIO_Init+0x244>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_GPIO_Init+0x244>
 8001836:	2300      	movs	r3, #0
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	f002 0203 	and.w	r2, r2, #3
 800183e:	0092      	lsls	r2, r2, #2
 8001840:	4093      	lsls	r3, r2
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001848:	4937      	ldr	r1, [pc, #220]	; (8001928 <HAL_GPIO_Init+0x334>)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	089b      	lsrs	r3, r3, #2
 800184e:	3302      	adds	r3, #2
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001856:	4b3b      	ldr	r3, [pc, #236]	; (8001944 <HAL_GPIO_Init+0x350>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	43db      	mvns	r3, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4313      	orrs	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800187a:	4a32      	ldr	r2, [pc, #200]	; (8001944 <HAL_GPIO_Init+0x350>)
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001880:	4b30      	ldr	r3, [pc, #192]	; (8001944 <HAL_GPIO_Init+0x350>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018a4:	4a27      	ldr	r2, [pc, #156]	; (8001944 <HAL_GPIO_Init+0x350>)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018aa:	4b26      	ldr	r3, [pc, #152]	; (8001944 <HAL_GPIO_Init+0x350>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018ce:	4a1d      	ldr	r2, [pc, #116]	; (8001944 <HAL_GPIO_Init+0x350>)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018d4:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <HAL_GPIO_Init+0x350>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	43db      	mvns	r3, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018f8:	4a12      	ldr	r2, [pc, #72]	; (8001944 <HAL_GPIO_Init+0x350>)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	3301      	adds	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa22 f303 	lsr.w	r3, r2, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	f47f ae78 	bne.w	8001604 <HAL_GPIO_Init+0x10>
  }
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	371c      	adds	r7, #28
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000
 8001928:	40010000 	.word	0x40010000
 800192c:	48000400 	.word	0x48000400
 8001930:	48000800 	.word	0x48000800
 8001934:	48000c00 	.word	0x48000c00
 8001938:	48001000 	.word	0x48001000
 800193c:	48001400 	.word	0x48001400
 8001940:	48001800 	.word	0x48001800
 8001944:	40010400 	.word	0x40010400

08001948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
 8001954:	4613      	mov	r3, r2
 8001956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001958:	787b      	ldrb	r3, [r7, #1]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800195e:	887a      	ldrh	r2, [r7, #2]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001964:	e002      	b.n	800196c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	4013      	ands	r3, r2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d006      	beq.n	800199c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800198e:	4a05      	ldr	r2, [pc, #20]	; (80019a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	4618      	mov	r0, r3
 8001998:	f000 f806 	bl	80019a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40010400 	.word	0x40010400

080019a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40007000 	.word	0x40007000

080019dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019ea:	d130      	bne.n	8001a4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019ec:	4b23      	ldr	r3, [pc, #140]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019f8:	d038      	beq.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019fa:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a02:	4a1e      	ldr	r2, [pc, #120]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2232      	movs	r2, #50	; 0x32
 8001a10:	fb02 f303 	mul.w	r3, r2, r3
 8001a14:	4a1b      	ldr	r2, [pc, #108]	; (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	0c9b      	lsrs	r3, r3, #18
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a20:	e002      	b.n	8001a28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a34:	d102      	bne.n	8001a3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1f2      	bne.n	8001a22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a48:	d110      	bne.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e00f      	b.n	8001a6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5a:	d007      	beq.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a5c:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a64:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40007000 	.word	0x40007000
 8001a80:	20000000 	.word	0x20000000
 8001a84:	431bde83 	.word	0x431bde83

08001a88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e3ca      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a9a:	4b97      	ldr	r3, [pc, #604]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aa4:	4b94      	ldr	r3, [pc, #592]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0310 	and.w	r3, r3, #16
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 80e4 	beq.w	8001c84 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d007      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x4a>
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	2b0c      	cmp	r3, #12
 8001ac6:	f040 808b 	bne.w	8001be0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	f040 8087 	bne.w	8001be0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ad2:	4b89      	ldr	r3, [pc, #548]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d005      	beq.n	8001aea <HAL_RCC_OscConfig+0x62>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e3a2      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1a      	ldr	r2, [r3, #32]
 8001aee:	4b82      	ldr	r3, [pc, #520]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d004      	beq.n	8001b04 <HAL_RCC_OscConfig+0x7c>
 8001afa:	4b7f      	ldr	r3, [pc, #508]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b02:	e005      	b.n	8001b10 <HAL_RCC_OscConfig+0x88>
 8001b04:	4b7c      	ldr	r3, [pc, #496]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b0a:	091b      	lsrs	r3, r3, #4
 8001b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d223      	bcs.n	8001b5c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 fd55 	bl	80025c8 <RCC_SetFlashLatencyFromMSIRange>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e383      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b28:	4b73      	ldr	r3, [pc, #460]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a72      	ldr	r2, [pc, #456]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b2e:	f043 0308 	orr.w	r3, r3, #8
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	4b70      	ldr	r3, [pc, #448]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	496d      	ldr	r1, [pc, #436]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b46:	4b6c      	ldr	r3, [pc, #432]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	4968      	ldr	r1, [pc, #416]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	604b      	str	r3, [r1, #4]
 8001b5a:	e025      	b.n	8001ba8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b5c:	4b66      	ldr	r3, [pc, #408]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a65      	ldr	r2, [pc, #404]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b62:	f043 0308 	orr.w	r3, r3, #8
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	4b63      	ldr	r3, [pc, #396]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	4960      	ldr	r1, [pc, #384]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b7a:	4b5f      	ldr	r3, [pc, #380]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	021b      	lsls	r3, r3, #8
 8001b88:	495b      	ldr	r1, [pc, #364]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d109      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 fd15 	bl	80025c8 <RCC_SetFlashLatencyFromMSIRange>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e343      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ba8:	f000 fc4a 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 8001bac:	4602      	mov	r2, r0
 8001bae:	4b52      	ldr	r3, [pc, #328]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	f003 030f 	and.w	r3, r3, #15
 8001bb8:	4950      	ldr	r1, [pc, #320]	; (8001cfc <HAL_RCC_OscConfig+0x274>)
 8001bba:	5ccb      	ldrb	r3, [r1, r3]
 8001bbc:	f003 031f 	and.w	r3, r3, #31
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc4:	4a4e      	ldr	r2, [pc, #312]	; (8001d00 <HAL_RCC_OscConfig+0x278>)
 8001bc6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bc8:	4b4e      	ldr	r3, [pc, #312]	; (8001d04 <HAL_RCC_OscConfig+0x27c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff f92d 	bl	8000e2c <HAL_InitTick>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d052      	beq.n	8001c82 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	e327      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d032      	beq.n	8001c4e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001be8:	4b43      	ldr	r3, [pc, #268]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a42      	ldr	r2, [pc, #264]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff f96a 	bl	8000ecc <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bfc:	f7ff f966 	bl	8000ecc <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e310      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c0e:	4b3a      	ldr	r3, [pc, #232]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c1a:	4b37      	ldr	r3, [pc, #220]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a36      	ldr	r2, [pc, #216]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c20:	f043 0308 	orr.w	r3, r3, #8
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b34      	ldr	r3, [pc, #208]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	4931      	ldr	r1, [pc, #196]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c38:	4b2f      	ldr	r3, [pc, #188]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	021b      	lsls	r3, r3, #8
 8001c46:	492c      	ldr	r1, [pc, #176]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]
 8001c4c:	e01a      	b.n	8001c84 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c4e:	4b2a      	ldr	r3, [pc, #168]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a29      	ldr	r2, [pc, #164]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff f937 	bl	8000ecc <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c62:	f7ff f933 	bl	8000ecc <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e2dd      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c74:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f0      	bne.n	8001c62 <HAL_RCC_OscConfig+0x1da>
 8001c80:	e000      	b.n	8001c84 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d074      	beq.n	8001d7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d005      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x21a>
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	2b0c      	cmp	r3, #12
 8001c9a:	d10e      	bne.n	8001cba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d10b      	bne.n	8001cba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d064      	beq.n	8001d78 <HAL_RCC_OscConfig+0x2f0>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d160      	bne.n	8001d78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e2ba      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc2:	d106      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x24a>
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0b      	ldr	r2, [pc, #44]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	e026      	b.n	8001d20 <HAL_RCC_OscConfig+0x298>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cda:	d115      	bne.n	8001d08 <HAL_RCC_OscConfig+0x280>
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a05      	ldr	r2, [pc, #20]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001ce2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a02      	ldr	r2, [pc, #8]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	e014      	b.n	8001d20 <HAL_RCC_OscConfig+0x298>
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	08004698 	.word	0x08004698
 8001d00:	20000000 	.word	0x20000000
 8001d04:	20000004 	.word	0x20000004
 8001d08:	4ba0      	ldr	r3, [pc, #640]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a9f      	ldr	r2, [pc, #636]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b9d      	ldr	r3, [pc, #628]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a9c      	ldr	r2, [pc, #624]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d013      	beq.n	8001d50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff f8d0 	bl	8000ecc <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff f8cc 	bl	8000ecc <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	; 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e276      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d42:	4b92      	ldr	r3, [pc, #584]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0x2a8>
 8001d4e:	e014      	b.n	8001d7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7ff f8bc 	bl	8000ecc <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d58:	f7ff f8b8 	bl	8000ecc <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e262      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d6a:	4b88      	ldr	r3, [pc, #544]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x2d0>
 8001d76:	e000      	b.n	8001d7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d060      	beq.n	8001e48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_OscConfig+0x310>
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2b0c      	cmp	r3, #12
 8001d90:	d119      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d116      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d98:	4b7c      	ldr	r3, [pc, #496]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_OscConfig+0x328>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e23f      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db0:	4b76      	ldr	r3, [pc, #472]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	061b      	lsls	r3, r3, #24
 8001dbe:	4973      	ldr	r1, [pc, #460]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc4:	e040      	b.n	8001e48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d023      	beq.n	8001e16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dce:	4b6f      	ldr	r3, [pc, #444]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a6e      	ldr	r2, [pc, #440]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dda:	f7ff f877 	bl	8000ecc <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de2:	f7ff f873 	bl	8000ecc <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e21d      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001df4:	4b65      	ldr	r3, [pc, #404]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e00:	4b62      	ldr	r3, [pc, #392]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	061b      	lsls	r3, r3, #24
 8001e0e:	495f      	ldr	r1, [pc, #380]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
 8001e14:	e018      	b.n	8001e48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e16:	4b5d      	ldr	r3, [pc, #372]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a5c      	ldr	r2, [pc, #368]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e22:	f7ff f853 	bl	8000ecc <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2a:	f7ff f84f 	bl	8000ecc <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e1f9      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e3c:	4b53      	ldr	r3, [pc, #332]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f0      	bne.n	8001e2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d03c      	beq.n	8001ece <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d01c      	beq.n	8001e96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5c:	4b4b      	ldr	r3, [pc, #300]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e62:	4a4a      	ldr	r2, [pc, #296]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6c:	f7ff f82e 	bl	8000ecc <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e74:	f7ff f82a 	bl	8000ecc <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e1d4      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e86:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0ef      	beq.n	8001e74 <HAL_RCC_OscConfig+0x3ec>
 8001e94:	e01b      	b.n	8001ece <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e96:	4b3d      	ldr	r3, [pc, #244]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e9c:	4a3b      	ldr	r2, [pc, #236]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e9e:	f023 0301 	bic.w	r3, r3, #1
 8001ea2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea6:	f7ff f811 	bl	8000ecc <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eae:	f7ff f80d 	bl	8000ecc <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e1b7      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ec0:	4b32      	ldr	r3, [pc, #200]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1ef      	bne.n	8001eae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 80a6 	beq.w	8002028 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001edc:	2300      	movs	r3, #0
 8001ede:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ee0:	4b2a      	ldr	r3, [pc, #168]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10d      	bne.n	8001f08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eec:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef0:	4a26      	ldr	r2, [pc, #152]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef8:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f04:	2301      	movs	r3, #1
 8001f06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f08:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <HAL_RCC_OscConfig+0x508>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d118      	bne.n	8001f46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f14:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <HAL_RCC_OscConfig+0x508>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a1d      	ldr	r2, [pc, #116]	; (8001f90 <HAL_RCC_OscConfig+0x508>)
 8001f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f20:	f7fe ffd4 	bl	8000ecc <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f28:	f7fe ffd0 	bl	8000ecc <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e17a      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <HAL_RCC_OscConfig+0x508>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d108      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4d8>
 8001f4e:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f54:	4a0d      	ldr	r2, [pc, #52]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f5e:	e029      	b.n	8001fb4 <HAL_RCC_OscConfig+0x52c>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	d115      	bne.n	8001f94 <HAL_RCC_OscConfig+0x50c>
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6e:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001f70:	f043 0304 	orr.w	r3, r3, #4
 8001f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7e:	4a03      	ldr	r2, [pc, #12]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f88:	e014      	b.n	8001fb4 <HAL_RCC_OscConfig+0x52c>
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40007000 	.word	0x40007000
 8001f94:	4b9c      	ldr	r3, [pc, #624]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9a:	4a9b      	ldr	r2, [pc, #620]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fa4:	4b98      	ldr	r3, [pc, #608]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001faa:	4a97      	ldr	r2, [pc, #604]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 8001fac:	f023 0304 	bic.w	r3, r3, #4
 8001fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d016      	beq.n	8001fea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbc:	f7fe ff86 	bl	8000ecc <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc2:	e00a      	b.n	8001fda <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc4:	f7fe ff82 	bl	8000ecc <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e12a      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fda:	4b8b      	ldr	r3, [pc, #556]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 8001fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0ed      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x53c>
 8001fe8:	e015      	b.n	8002016 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fea:	f7fe ff6f 	bl	8000ecc <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ff0:	e00a      	b.n	8002008 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f7fe ff6b 	bl	8000ecc <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002000:	4293      	cmp	r3, r2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e113      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002008:	4b7f      	ldr	r3, [pc, #508]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1ed      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002016:	7ffb      	ldrb	r3, [r7, #31]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d105      	bne.n	8002028 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800201c:	4b7a      	ldr	r3, [pc, #488]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 800201e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002020:	4a79      	ldr	r2, [pc, #484]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 8002022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002026:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 80fe 	beq.w	800222e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	2b02      	cmp	r3, #2
 8002038:	f040 80d0 	bne.w	80021dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800203c:	4b72      	ldr	r3, [pc, #456]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f003 0203 	and.w	r2, r3, #3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204c:	429a      	cmp	r2, r3
 800204e:	d130      	bne.n	80020b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	3b01      	subs	r3, #1
 800205c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800205e:	429a      	cmp	r2, r3
 8002060:	d127      	bne.n	80020b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800206c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800206e:	429a      	cmp	r2, r3
 8002070:	d11f      	bne.n	80020b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800207c:	2a07      	cmp	r2, #7
 800207e:	bf14      	ite	ne
 8002080:	2201      	movne	r2, #1
 8002082:	2200      	moveq	r2, #0
 8002084:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002086:	4293      	cmp	r3, r2
 8002088:	d113      	bne.n	80020b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002094:	085b      	lsrs	r3, r3, #1
 8002096:	3b01      	subs	r3, #1
 8002098:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d109      	bne.n	80020b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	085b      	lsrs	r3, r3, #1
 80020aa:	3b01      	subs	r3, #1
 80020ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d06e      	beq.n	8002190 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	2b0c      	cmp	r3, #12
 80020b6:	d069      	beq.n	800218c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020b8:	4b53      	ldr	r3, [pc, #332]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d105      	bne.n	80020d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020c4:	4b50      	ldr	r3, [pc, #320]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0ad      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020d4:	4b4c      	ldr	r3, [pc, #304]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a4b      	ldr	r2, [pc, #300]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 80020da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020e0:	f7fe fef4 	bl	8000ecc <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e8:	f7fe fef0 	bl	8000ecc <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e09a      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020fa:	4b43      	ldr	r3, [pc, #268]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002106:	4b40      	ldr	r3, [pc, #256]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	4b40      	ldr	r3, [pc, #256]	; (800220c <HAL_RCC_OscConfig+0x784>)
 800210c:	4013      	ands	r3, r2
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002116:	3a01      	subs	r2, #1
 8002118:	0112      	lsls	r2, r2, #4
 800211a:	4311      	orrs	r1, r2
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002120:	0212      	lsls	r2, r2, #8
 8002122:	4311      	orrs	r1, r2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002128:	0852      	lsrs	r2, r2, #1
 800212a:	3a01      	subs	r2, #1
 800212c:	0552      	lsls	r2, r2, #21
 800212e:	4311      	orrs	r1, r2
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002134:	0852      	lsrs	r2, r2, #1
 8002136:	3a01      	subs	r2, #1
 8002138:	0652      	lsls	r2, r2, #25
 800213a:	4311      	orrs	r1, r2
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002140:	0912      	lsrs	r2, r2, #4
 8002142:	0452      	lsls	r2, r2, #17
 8002144:	430a      	orrs	r2, r1
 8002146:	4930      	ldr	r1, [pc, #192]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 8002148:	4313      	orrs	r3, r2
 800214a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800214c:	4b2e      	ldr	r3, [pc, #184]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a2d      	ldr	r2, [pc, #180]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 8002152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002156:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002158:	4b2b      	ldr	r3, [pc, #172]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4a2a      	ldr	r2, [pc, #168]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 800215e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002162:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002164:	f7fe feb2 	bl	8000ecc <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216c:	f7fe feae 	bl	8000ecc <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e058      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800217e:	4b22      	ldr	r3, [pc, #136]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800218a:	e050      	b.n	800222e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e04f      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002190:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d148      	bne.n	800222e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800219c:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a19      	ldr	r2, [pc, #100]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 80021a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021a8:	4b17      	ldr	r3, [pc, #92]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4a16      	ldr	r2, [pc, #88]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 80021ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021b4:	f7fe fe8a 	bl	8000ecc <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021bc:	f7fe fe86 	bl	8000ecc <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e030      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ce:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x734>
 80021da:	e028      	b.n	800222e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	2b0c      	cmp	r3, #12
 80021e0:	d023      	beq.n	800222a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a08      	ldr	r2, [pc, #32]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 80021e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ee:	f7fe fe6d 	bl	8000ecc <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f4:	e00c      	b.n	8002210 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f6:	f7fe fe69 	bl	8000ecc <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d905      	bls.n	8002210 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e013      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
 8002208:	40021000 	.word	0x40021000
 800220c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002210:	4b09      	ldr	r3, [pc, #36]	; (8002238 <HAL_RCC_OscConfig+0x7b0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1ec      	bne.n	80021f6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_RCC_OscConfig+0x7b0>)
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	4905      	ldr	r1, [pc, #20]	; (8002238 <HAL_RCC_OscConfig+0x7b0>)
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_RCC_OscConfig+0x7b4>)
 8002224:	4013      	ands	r3, r2
 8002226:	60cb      	str	r3, [r1, #12]
 8002228:	e001      	b.n	800222e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3720      	adds	r7, #32
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000
 800223c:	feeefffc 	.word	0xfeeefffc

08002240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0e7      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002254:	4b75      	ldr	r3, [pc, #468]	; (800242c <HAL_RCC_ClockConfig+0x1ec>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d910      	bls.n	8002284 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002262:	4b72      	ldr	r3, [pc, #456]	; (800242c <HAL_RCC_ClockConfig+0x1ec>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 0207 	bic.w	r2, r3, #7
 800226a:	4970      	ldr	r1, [pc, #448]	; (800242c <HAL_RCC_ClockConfig+0x1ec>)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	4b6e      	ldr	r3, [pc, #440]	; (800242c <HAL_RCC_ClockConfig+0x1ec>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0cf      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d010      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	4b66      	ldr	r3, [pc, #408]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800229c:	429a      	cmp	r2, r3
 800229e:	d908      	bls.n	80022b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a0:	4b63      	ldr	r3, [pc, #396]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4960      	ldr	r1, [pc, #384]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d04c      	beq.n	8002358 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d107      	bne.n	80022d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c6:	4b5a      	ldr	r3, [pc, #360]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d121      	bne.n	8002316 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0a6      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d107      	bne.n	80022ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022de:	4b54      	ldr	r3, [pc, #336]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d115      	bne.n	8002316 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e09a      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d107      	bne.n	8002306 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022f6:	4b4e      	ldr	r3, [pc, #312]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d109      	bne.n	8002316 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e08e      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002306:	4b4a      	ldr	r3, [pc, #296]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e086      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002316:	4b46      	ldr	r3, [pc, #280]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f023 0203 	bic.w	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4943      	ldr	r1, [pc, #268]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002324:	4313      	orrs	r3, r2
 8002326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002328:	f7fe fdd0 	bl	8000ecc <HAL_GetTick>
 800232c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232e:	e00a      	b.n	8002346 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002330:	f7fe fdcc 	bl	8000ecc <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	f241 3288 	movw	r2, #5000	; 0x1388
 800233e:	4293      	cmp	r3, r2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e06e      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002346:	4b3a      	ldr	r3, [pc, #232]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 020c 	and.w	r2, r3, #12
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	429a      	cmp	r2, r3
 8002356:	d1eb      	bne.n	8002330 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d010      	beq.n	8002386 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	4b31      	ldr	r3, [pc, #196]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002370:	429a      	cmp	r2, r3
 8002372:	d208      	bcs.n	8002386 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002374:	4b2e      	ldr	r3, [pc, #184]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	492b      	ldr	r1, [pc, #172]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002382:	4313      	orrs	r3, r2
 8002384:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002386:	4b29      	ldr	r3, [pc, #164]	; (800242c <HAL_RCC_ClockConfig+0x1ec>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d210      	bcs.n	80023b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002394:	4b25      	ldr	r3, [pc, #148]	; (800242c <HAL_RCC_ClockConfig+0x1ec>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f023 0207 	bic.w	r2, r3, #7
 800239c:	4923      	ldr	r1, [pc, #140]	; (800242c <HAL_RCC_ClockConfig+0x1ec>)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a4:	4b21      	ldr	r3, [pc, #132]	; (800242c <HAL_RCC_ClockConfig+0x1ec>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d001      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e036      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d008      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c2:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	4918      	ldr	r1, [pc, #96]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d009      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e0:	4b13      	ldr	r3, [pc, #76]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4910      	ldr	r1, [pc, #64]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023f4:	f000 f824 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 80023f8:	4602      	mov	r2, r0
 80023fa:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	091b      	lsrs	r3, r3, #4
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	490b      	ldr	r1, [pc, #44]	; (8002434 <HAL_RCC_ClockConfig+0x1f4>)
 8002406:	5ccb      	ldrb	r3, [r1, r3]
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
 8002410:	4a09      	ldr	r2, [pc, #36]	; (8002438 <HAL_RCC_ClockConfig+0x1f8>)
 8002412:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_RCC_ClockConfig+0x1fc>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe fd07 	bl	8000e2c <HAL_InitTick>
 800241e:	4603      	mov	r3, r0
 8002420:	72fb      	strb	r3, [r7, #11]

  return status;
 8002422:	7afb      	ldrb	r3, [r7, #11]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40022000 	.word	0x40022000
 8002430:	40021000 	.word	0x40021000
 8002434:	08004698 	.word	0x08004698
 8002438:	20000000 	.word	0x20000000
 800243c:	20000004 	.word	0x20000004

08002440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	; 0x24
 8002444:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800244e:	4b3e      	ldr	r3, [pc, #248]	; (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002458:	4b3b      	ldr	r3, [pc, #236]	; (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_RCC_GetSysClockFreq+0x34>
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	2b0c      	cmp	r3, #12
 800246c:	d121      	bne.n	80024b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d11e      	bne.n	80024b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002474:	4b34      	ldr	r3, [pc, #208]	; (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d107      	bne.n	8002490 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002480:	4b31      	ldr	r3, [pc, #196]	; (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 8002482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	61fb      	str	r3, [r7, #28]
 800248e:	e005      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002490:	4b2d      	ldr	r3, [pc, #180]	; (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800249c:	4a2b      	ldr	r2, [pc, #172]	; (800254c <HAL_RCC_GetSysClockFreq+0x10c>)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10d      	bne.n	80024c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024b0:	e00a      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d102      	bne.n	80024be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024b8:	4b25      	ldr	r3, [pc, #148]	; (8002550 <HAL_RCC_GetSysClockFreq+0x110>)
 80024ba:	61bb      	str	r3, [r7, #24]
 80024bc:	e004      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024c4:	4b23      	ldr	r3, [pc, #140]	; (8002554 <HAL_RCC_GetSysClockFreq+0x114>)
 80024c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	2b0c      	cmp	r3, #12
 80024cc:	d134      	bne.n	8002538 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024ce:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d003      	beq.n	80024e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d003      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0xac>
 80024e4:	e005      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024e6:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <HAL_RCC_GetSysClockFreq+0x110>)
 80024e8:	617b      	str	r3, [r7, #20]
      break;
 80024ea:	e005      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <HAL_RCC_GetSysClockFreq+0x114>)
 80024ee:	617b      	str	r3, [r7, #20]
      break;
 80024f0:	e002      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	617b      	str	r3, [r7, #20]
      break;
 80024f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024f8:	4b13      	ldr	r3, [pc, #76]	; (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	3301      	adds	r3, #1
 8002504:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002506:	4b10      	ldr	r3, [pc, #64]	; (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	fb03 f202 	mul.w	r2, r3, r2
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	fbb2 f3f3 	udiv	r3, r2, r3
 800251c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800251e:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	0e5b      	lsrs	r3, r3, #25
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	3301      	adds	r3, #1
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	fbb2 f3f3 	udiv	r3, r2, r3
 8002536:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002538:	69bb      	ldr	r3, [r7, #24]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3724      	adds	r7, #36	; 0x24
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	080046b0 	.word	0x080046b0
 8002550:	00f42400 	.word	0x00f42400
 8002554:	007a1200 	.word	0x007a1200

08002558 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800255c:	4b03      	ldr	r3, [pc, #12]	; (800256c <HAL_RCC_GetHCLKFreq+0x14>)
 800255e:	681b      	ldr	r3, [r3, #0]
}
 8002560:	4618      	mov	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	20000000 	.word	0x20000000

08002570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002574:	f7ff fff0 	bl	8002558 <HAL_RCC_GetHCLKFreq>
 8002578:	4602      	mov	r2, r0
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_RCC_GetPCLK1Freq+0x24>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	0a1b      	lsrs	r3, r3, #8
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	4904      	ldr	r1, [pc, #16]	; (8002598 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002586:	5ccb      	ldrb	r3, [r1, r3]
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002590:	4618      	mov	r0, r3
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000
 8002598:	080046a8 	.word	0x080046a8

0800259c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025a0:	f7ff ffda 	bl	8002558 <HAL_RCC_GetHCLKFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	0adb      	lsrs	r3, r3, #11
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	4904      	ldr	r1, [pc, #16]	; (80025c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025bc:	4618      	mov	r0, r3
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40021000 	.word	0x40021000
 80025c4:	080046a8 	.word	0x080046a8

080025c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025d0:	2300      	movs	r3, #0
 80025d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025d4:	4b2a      	ldr	r3, [pc, #168]	; (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025e0:	f7ff f9ee 	bl	80019c0 <HAL_PWREx_GetVoltageRange>
 80025e4:	6178      	str	r0, [r7, #20]
 80025e6:	e014      	b.n	8002612 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025e8:	4b25      	ldr	r3, [pc, #148]	; (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ec:	4a24      	ldr	r2, [pc, #144]	; (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f2:	6593      	str	r3, [r2, #88]	; 0x58
 80025f4:	4b22      	ldr	r3, [pc, #136]	; (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002600:	f7ff f9de 	bl	80019c0 <HAL_PWREx_GetVoltageRange>
 8002604:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002606:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260a:	4a1d      	ldr	r2, [pc, #116]	; (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800260c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002610:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002618:	d10b      	bne.n	8002632 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b80      	cmp	r3, #128	; 0x80
 800261e:	d919      	bls.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2ba0      	cmp	r3, #160	; 0xa0
 8002624:	d902      	bls.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002626:	2302      	movs	r3, #2
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	e013      	b.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800262c:	2301      	movs	r3, #1
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	e010      	b.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b80      	cmp	r3, #128	; 0x80
 8002636:	d902      	bls.n	800263e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002638:	2303      	movs	r3, #3
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	e00a      	b.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b80      	cmp	r3, #128	; 0x80
 8002642:	d102      	bne.n	800264a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002644:	2302      	movs	r3, #2
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	e004      	b.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b70      	cmp	r3, #112	; 0x70
 800264e:	d101      	bne.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002650:	2301      	movs	r3, #1
 8002652:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f023 0207 	bic.w	r2, r3, #7
 800265c:	4909      	ldr	r1, [pc, #36]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002664:	4b07      	ldr	r3, [pc, #28]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	429a      	cmp	r2, r3
 8002670:	d001      	beq.n	8002676 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40021000 	.word	0x40021000
 8002684:	40022000 	.word	0x40022000

08002688 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002690:	2300      	movs	r3, #0
 8002692:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002694:	2300      	movs	r3, #0
 8002696:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d041      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026ac:	d02a      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026b2:	d824      	bhi.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026b8:	d008      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026be:	d81e      	bhi.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00a      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026c8:	d010      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026ca:	e018      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026cc:	4b86      	ldr	r3, [pc, #536]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4a85      	ldr	r2, [pc, #532]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026d8:	e015      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3304      	adds	r3, #4
 80026de:	2100      	movs	r1, #0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 fabb 	bl	8002c5c <RCCEx_PLLSAI1_Config>
 80026e6:	4603      	mov	r3, r0
 80026e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026ea:	e00c      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3320      	adds	r3, #32
 80026f0:	2100      	movs	r1, #0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 fba6 	bl	8002e44 <RCCEx_PLLSAI2_Config>
 80026f8:	4603      	mov	r3, r0
 80026fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026fc:	e003      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	74fb      	strb	r3, [r7, #19]
      break;
 8002702:	e000      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002704:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002706:	7cfb      	ldrb	r3, [r7, #19]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10b      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800270c:	4b76      	ldr	r3, [pc, #472]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800271a:	4973      	ldr	r1, [pc, #460]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002722:	e001      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002724:	7cfb      	ldrb	r3, [r7, #19]
 8002726:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d041      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002738:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800273c:	d02a      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800273e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002742:	d824      	bhi.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002744:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002748:	d008      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800274a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800274e:	d81e      	bhi.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00a      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002758:	d010      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800275a:	e018      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800275c:	4b62      	ldr	r3, [pc, #392]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4a61      	ldr	r2, [pc, #388]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002766:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002768:	e015      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3304      	adds	r3, #4
 800276e:	2100      	movs	r1, #0
 8002770:	4618      	mov	r0, r3
 8002772:	f000 fa73 	bl	8002c5c <RCCEx_PLLSAI1_Config>
 8002776:	4603      	mov	r3, r0
 8002778:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800277a:	e00c      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3320      	adds	r3, #32
 8002780:	2100      	movs	r1, #0
 8002782:	4618      	mov	r0, r3
 8002784:	f000 fb5e 	bl	8002e44 <RCCEx_PLLSAI2_Config>
 8002788:	4603      	mov	r3, r0
 800278a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800278c:	e003      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	74fb      	strb	r3, [r7, #19]
      break;
 8002792:	e000      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002794:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002796:	7cfb      	ldrb	r3, [r7, #19]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10b      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800279c:	4b52      	ldr	r3, [pc, #328]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027aa:	494f      	ldr	r1, [pc, #316]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027b2:	e001      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b4:	7cfb      	ldrb	r3, [r7, #19]
 80027b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 80a0 	beq.w	8002906 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c6:	2300      	movs	r3, #0
 80027c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027ca:	4b47      	ldr	r3, [pc, #284]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80027da:	2300      	movs	r3, #0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00d      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e0:	4b41      	ldr	r3, [pc, #260]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e4:	4a40      	ldr	r2, [pc, #256]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ea:	6593      	str	r3, [r2, #88]	; 0x58
 80027ec:	4b3e      	ldr	r3, [pc, #248]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f8:	2301      	movs	r3, #1
 80027fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027fc:	4b3b      	ldr	r3, [pc, #236]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a3a      	ldr	r2, [pc, #232]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002806:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002808:	f7fe fb60 	bl	8000ecc <HAL_GetTick>
 800280c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800280e:	e009      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002810:	f7fe fb5c 	bl	8000ecc <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d902      	bls.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	74fb      	strb	r3, [r7, #19]
        break;
 8002822:	e005      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002824:	4b31      	ldr	r3, [pc, #196]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0ef      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002830:	7cfb      	ldrb	r3, [r7, #19]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d15c      	bne.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002836:	4b2c      	ldr	r3, [pc, #176]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002840:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d01f      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	429a      	cmp	r2, r3
 8002852:	d019      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002854:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800285e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002860:	4b21      	ldr	r3, [pc, #132]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002866:	4a20      	ldr	r2, [pc, #128]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002870:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002876:	4a1c      	ldr	r2, [pc, #112]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002880:	4a19      	ldr	r2, [pc, #100]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d016      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002892:	f7fe fb1b 	bl	8000ecc <HAL_GetTick>
 8002896:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002898:	e00b      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289a:	f7fe fb17 	bl	8000ecc <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d902      	bls.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	74fb      	strb	r3, [r7, #19]
            break;
 80028b0:	e006      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028b2:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0ec      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80028c0:	7cfb      	ldrb	r3, [r7, #19]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028c6:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028d6:	4904      	ldr	r1, [pc, #16]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028de:	e009      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028e0:	7cfb      	ldrb	r3, [r7, #19]
 80028e2:	74bb      	strb	r3, [r7, #18]
 80028e4:	e006      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f0:	7cfb      	ldrb	r3, [r7, #19]
 80028f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028f4:	7c7b      	ldrb	r3, [r7, #17]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d105      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fa:	4b9e      	ldr	r3, [pc, #632]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fe:	4a9d      	ldr	r2, [pc, #628]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002904:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002912:	4b98      	ldr	r3, [pc, #608]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002918:	f023 0203 	bic.w	r2, r3, #3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002920:	4994      	ldr	r1, [pc, #592]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002934:	4b8f      	ldr	r3, [pc, #572]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	f023 020c 	bic.w	r2, r3, #12
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002942:	498c      	ldr	r1, [pc, #560]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002956:	4b87      	ldr	r3, [pc, #540]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	4983      	ldr	r1, [pc, #524]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002978:	4b7e      	ldr	r3, [pc, #504]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	497b      	ldr	r1, [pc, #492]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0310 	and.w	r3, r3, #16
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800299a:	4b76      	ldr	r3, [pc, #472]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a8:	4972      	ldr	r1, [pc, #456]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0320 	and.w	r3, r3, #32
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029bc:	4b6d      	ldr	r3, [pc, #436]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ca:	496a      	ldr	r1, [pc, #424]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029de:	4b65      	ldr	r3, [pc, #404]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ec:	4961      	ldr	r1, [pc, #388]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00a      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a00:	4b5c      	ldr	r3, [pc, #368]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0e:	4959      	ldr	r1, [pc, #356]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00a      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a22:	4b54      	ldr	r3, [pc, #336]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a30:	4950      	ldr	r1, [pc, #320]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a44:	4b4b      	ldr	r3, [pc, #300]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a52:	4948      	ldr	r1, [pc, #288]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a66:	4b43      	ldr	r3, [pc, #268]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a74:	493f      	ldr	r1, [pc, #252]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d028      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a88:	4b3a      	ldr	r3, [pc, #232]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a96:	4937      	ldr	r1, [pc, #220]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aa6:	d106      	bne.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa8:	4b32      	ldr	r3, [pc, #200]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4a31      	ldr	r2, [pc, #196]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ab2:	60d3      	str	r3, [r2, #12]
 8002ab4:	e011      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002abe:	d10c      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 f8c8 	bl	8002c5c <RCCEx_PLLSAI1_Config>
 8002acc:	4603      	mov	r3, r0
 8002ace:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002ad6:	7cfb      	ldrb	r3, [r7, #19]
 8002ad8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d028      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ae6:	4b23      	ldr	r3, [pc, #140]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af4:	491f      	ldr	r1, [pc, #124]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b04:	d106      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b06:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	4a1a      	ldr	r2, [pc, #104]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b10:	60d3      	str	r3, [r2, #12]
 8002b12:	e011      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b1c:	d10c      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3304      	adds	r3, #4
 8002b22:	2101      	movs	r1, #1
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 f899 	bl	8002c5c <RCCEx_PLLSAI1_Config>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b2e:	7cfb      	ldrb	r3, [r7, #19]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b34:	7cfb      	ldrb	r3, [r7, #19]
 8002b36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d02b      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b44:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b52:	4908      	ldr	r1, [pc, #32]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b62:	d109      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b64:	4b03      	ldr	r3, [pc, #12]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4a02      	ldr	r2, [pc, #8]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b6e:	60d3      	str	r3, [r2, #12]
 8002b70:	e014      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b72:	bf00      	nop
 8002b74:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b80:	d10c      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3304      	adds	r3, #4
 8002b86:	2101      	movs	r1, #1
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 f867 	bl	8002c5c <RCCEx_PLLSAI1_Config>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b92:	7cfb      	ldrb	r3, [r7, #19]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b98:	7cfb      	ldrb	r3, [r7, #19]
 8002b9a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d02f      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ba8:	4b2b      	ldr	r3, [pc, #172]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bb6:	4928      	ldr	r1, [pc, #160]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bc6:	d10d      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3304      	adds	r3, #4
 8002bcc:	2102      	movs	r1, #2
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 f844 	bl	8002c5c <RCCEx_PLLSAI1_Config>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bd8:	7cfb      	ldrb	r3, [r7, #19]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d014      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bde:	7cfb      	ldrb	r3, [r7, #19]
 8002be0:	74bb      	strb	r3, [r7, #18]
 8002be2:	e011      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bec:	d10c      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3320      	adds	r3, #32
 8002bf2:	2102      	movs	r1, #2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 f925 	bl	8002e44 <RCCEx_PLLSAI2_Config>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bfe:	7cfb      	ldrb	r3, [r7, #19]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c04:	7cfb      	ldrb	r3, [r7, #19]
 8002c06:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c14:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c22:	490d      	ldr	r1, [pc, #52]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00b      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c36:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c46:	4904      	ldr	r1, [pc, #16]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40021000 	.word	0x40021000

08002c5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c6a:	4b75      	ldr	r3, [pc, #468]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d018      	beq.n	8002ca8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c76:	4b72      	ldr	r3, [pc, #456]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f003 0203 	and.w	r2, r3, #3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d10d      	bne.n	8002ca2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
       ||
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c8e:	4b6c      	ldr	r3, [pc, #432]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	091b      	lsrs	r3, r3, #4
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
       ||
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d047      	beq.n	8002d32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
 8002ca6:	e044      	b.n	8002d32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d018      	beq.n	8002ce2 <RCCEx_PLLSAI1_Config+0x86>
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d825      	bhi.n	8002d00 <RCCEx_PLLSAI1_Config+0xa4>
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d002      	beq.n	8002cbe <RCCEx_PLLSAI1_Config+0x62>
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d009      	beq.n	8002cd0 <RCCEx_PLLSAI1_Config+0x74>
 8002cbc:	e020      	b.n	8002d00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cbe:	4b60      	ldr	r3, [pc, #384]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d11d      	bne.n	8002d06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cce:	e01a      	b.n	8002d06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cd0:	4b5b      	ldr	r3, [pc, #364]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d116      	bne.n	8002d0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce0:	e013      	b.n	8002d0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ce2:	4b57      	ldr	r3, [pc, #348]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10f      	bne.n	8002d0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cee:	4b54      	ldr	r3, [pc, #336]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cfe:	e006      	b.n	8002d0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	73fb      	strb	r3, [r7, #15]
      break;
 8002d04:	e004      	b.n	8002d10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d06:	bf00      	nop
 8002d08:	e002      	b.n	8002d10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d0a:	bf00      	nop
 8002d0c:	e000      	b.n	8002d10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10d      	bne.n	8002d32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d16:	4b4a      	ldr	r3, [pc, #296]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6819      	ldr	r1, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	430b      	orrs	r3, r1
 8002d2c:	4944      	ldr	r1, [pc, #272]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d17d      	bne.n	8002e34 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d38:	4b41      	ldr	r3, [pc, #260]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a40      	ldr	r2, [pc, #256]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d44:	f7fe f8c2 	bl	8000ecc <HAL_GetTick>
 8002d48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d4a:	e009      	b.n	8002d60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d4c:	f7fe f8be 	bl	8000ecc <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d902      	bls.n	8002d60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d5e:	e005      	b.n	8002d6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d60:	4b37      	ldr	r3, [pc, #220]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1ef      	bne.n	8002d4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d160      	bne.n	8002e34 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d111      	bne.n	8002d9c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d78:	4b31      	ldr	r3, [pc, #196]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6892      	ldr	r2, [r2, #8]
 8002d88:	0211      	lsls	r1, r2, #8
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	68d2      	ldr	r2, [r2, #12]
 8002d8e:	0912      	lsrs	r2, r2, #4
 8002d90:	0452      	lsls	r2, r2, #17
 8002d92:	430a      	orrs	r2, r1
 8002d94:	492a      	ldr	r1, [pc, #168]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	610b      	str	r3, [r1, #16]
 8002d9a:	e027      	b.n	8002dec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d112      	bne.n	8002dc8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002da2:	4b27      	ldr	r3, [pc, #156]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002daa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6892      	ldr	r2, [r2, #8]
 8002db2:	0211      	lsls	r1, r2, #8
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6912      	ldr	r2, [r2, #16]
 8002db8:	0852      	lsrs	r2, r2, #1
 8002dba:	3a01      	subs	r2, #1
 8002dbc:	0552      	lsls	r2, r2, #21
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	491f      	ldr	r1, [pc, #124]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	610b      	str	r3, [r1, #16]
 8002dc6:	e011      	b.n	8002dec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dc8:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002dd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6892      	ldr	r2, [r2, #8]
 8002dd8:	0211      	lsls	r1, r2, #8
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6952      	ldr	r2, [r2, #20]
 8002dde:	0852      	lsrs	r2, r2, #1
 8002de0:	3a01      	subs	r2, #1
 8002de2:	0652      	lsls	r2, r2, #25
 8002de4:	430a      	orrs	r2, r1
 8002de6:	4916      	ldr	r1, [pc, #88]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002dec:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a13      	ldr	r2, [pc, #76]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002df6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df8:	f7fe f868 	bl	8000ecc <HAL_GetTick>
 8002dfc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dfe:	e009      	b.n	8002e14 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e00:	f7fe f864 	bl	8000ecc <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d902      	bls.n	8002e14 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	73fb      	strb	r3, [r7, #15]
          break;
 8002e12:	e005      	b.n	8002e20 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e14:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0ef      	beq.n	8002e00 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d106      	bne.n	8002e34 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e28:	691a      	ldr	r2, [r3, #16]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	4904      	ldr	r1, [pc, #16]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000

08002e44 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e52:	4b6a      	ldr	r3, [pc, #424]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d018      	beq.n	8002e90 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e5e:	4b67      	ldr	r3, [pc, #412]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f003 0203 	and.w	r2, r3, #3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d10d      	bne.n	8002e8a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
       ||
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e76:	4b61      	ldr	r3, [pc, #388]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	091b      	lsrs	r3, r3, #4
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
       ||
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d047      	beq.n	8002f1a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
 8002e8e:	e044      	b.n	8002f1a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d018      	beq.n	8002eca <RCCEx_PLLSAI2_Config+0x86>
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d825      	bhi.n	8002ee8 <RCCEx_PLLSAI2_Config+0xa4>
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d002      	beq.n	8002ea6 <RCCEx_PLLSAI2_Config+0x62>
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d009      	beq.n	8002eb8 <RCCEx_PLLSAI2_Config+0x74>
 8002ea4:	e020      	b.n	8002ee8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ea6:	4b55      	ldr	r3, [pc, #340]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d11d      	bne.n	8002eee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb6:	e01a      	b.n	8002eee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002eb8:	4b50      	ldr	r3, [pc, #320]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d116      	bne.n	8002ef2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec8:	e013      	b.n	8002ef2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002eca:	4b4c      	ldr	r3, [pc, #304]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10f      	bne.n	8002ef6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ed6:	4b49      	ldr	r3, [pc, #292]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d109      	bne.n	8002ef6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ee6:	e006      	b.n	8002ef6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
      break;
 8002eec:	e004      	b.n	8002ef8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002eee:	bf00      	nop
 8002ef0:	e002      	b.n	8002ef8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ef2:	bf00      	nop
 8002ef4:	e000      	b.n	8002ef8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ef6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10d      	bne.n	8002f1a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002efe:	4b3f      	ldr	r3, [pc, #252]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6819      	ldr	r1, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	430b      	orrs	r3, r1
 8002f14:	4939      	ldr	r1, [pc, #228]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d167      	bne.n	8002ff0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f20:	4b36      	ldr	r3, [pc, #216]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a35      	ldr	r2, [pc, #212]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f2c:	f7fd ffce 	bl	8000ecc <HAL_GetTick>
 8002f30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f32:	e009      	b.n	8002f48 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f34:	f7fd ffca 	bl	8000ecc <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d902      	bls.n	8002f48 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	73fb      	strb	r3, [r7, #15]
        break;
 8002f46:	e005      	b.n	8002f54 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f48:	4b2c      	ldr	r3, [pc, #176]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1ef      	bne.n	8002f34 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d14a      	bne.n	8002ff0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d111      	bne.n	8002f84 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f60:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6892      	ldr	r2, [r2, #8]
 8002f70:	0211      	lsls	r1, r2, #8
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	68d2      	ldr	r2, [r2, #12]
 8002f76:	0912      	lsrs	r2, r2, #4
 8002f78:	0452      	lsls	r2, r2, #17
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	491f      	ldr	r1, [pc, #124]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	614b      	str	r3, [r1, #20]
 8002f82:	e011      	b.n	8002fa8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f84:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6892      	ldr	r2, [r2, #8]
 8002f94:	0211      	lsls	r1, r2, #8
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6912      	ldr	r2, [r2, #16]
 8002f9a:	0852      	lsrs	r2, r2, #1
 8002f9c:	3a01      	subs	r2, #1
 8002f9e:	0652      	lsls	r2, r2, #25
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	4916      	ldr	r1, [pc, #88]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002fa8:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a13      	ldr	r2, [pc, #76]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb4:	f7fd ff8a 	bl	8000ecc <HAL_GetTick>
 8002fb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fba:	e009      	b.n	8002fd0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fbc:	f7fd ff86 	bl	8000ecc <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d902      	bls.n	8002fd0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	73fb      	strb	r3, [r7, #15]
          break;
 8002fce:	e005      	b.n	8002fdc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0ef      	beq.n	8002fbc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002fe2:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe4:	695a      	ldr	r2, [r3, #20]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	4904      	ldr	r1, [pc, #16]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40021000 	.word	0x40021000

08003000 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e040      	b.n	8003094 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fd fdb4 	bl	8000b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2224      	movs	r2, #36	; 0x24
 800302c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0201 	bic.w	r2, r2, #1
 800303c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fbca 	bl	80037d8 <UART_SetConfig>
 8003044:	4603      	mov	r3, r0
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e022      	b.n	8003094 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fe76 	bl	8003d48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800306a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800307a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fefd 	bl	8003e8c <UART_CheckIdleState>
 8003092:	4603      	mov	r3, r0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08a      	sub	sp, #40	; 0x28
 80030a0:	af02      	add	r7, sp, #8
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	603b      	str	r3, [r7, #0]
 80030a8:	4613      	mov	r3, r2
 80030aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030b0:	2b20      	cmp	r3, #32
 80030b2:	f040 8082 	bne.w	80031ba <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <HAL_UART_Transmit+0x26>
 80030bc:	88fb      	ldrh	r3, [r7, #6]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e07a      	b.n	80031bc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_UART_Transmit+0x38>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e073      	b.n	80031bc <HAL_UART_Transmit+0x120>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2221      	movs	r2, #33	; 0x21
 80030e8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030ea:	f7fd feef 	bl	8000ecc <HAL_GetTick>
 80030ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	88fa      	ldrh	r2, [r7, #6]
 80030f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	88fa      	ldrh	r2, [r7, #6]
 80030fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003108:	d108      	bne.n	800311c <HAL_UART_Transmit+0x80>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d104      	bne.n	800311c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	61bb      	str	r3, [r7, #24]
 800311a:	e003      	b.n	8003124 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003120:	2300      	movs	r3, #0
 8003122:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800312c:	e02d      	b.n	800318a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2200      	movs	r2, #0
 8003136:	2180      	movs	r1, #128	; 0x80
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 fef0 	bl	8003f1e <UART_WaitOnFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e039      	b.n	80031bc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10b      	bne.n	8003166 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	881a      	ldrh	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800315a:	b292      	uxth	r2, r2
 800315c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	3302      	adds	r3, #2
 8003162:	61bb      	str	r3, [r7, #24]
 8003164:	e008      	b.n	8003178 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	781a      	ldrb	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	b292      	uxth	r2, r2
 8003170:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	3301      	adds	r3, #1
 8003176:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1cb      	bne.n	800312e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2200      	movs	r2, #0
 800319e:	2140      	movs	r1, #64	; 0x40
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 febc 	bl	8003f1e <UART_WaitOnFlagUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e005      	b.n	80031bc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	e000      	b.n	80031bc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80031ba:	2302      	movs	r3, #2
  }
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3720      	adds	r7, #32
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b0ba      	sub	sp, #232	; 0xe8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80031ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80031f2:	4013      	ands	r3, r2
 80031f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80031f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d115      	bne.n	800322c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003204:	f003 0320 	and.w	r3, r3, #32
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00f      	beq.n	800322c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800320c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	2b00      	cmp	r3, #0
 8003216:	d009      	beq.n	800322c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 82a6 	beq.w	800376e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	4798      	blx	r3
      }
      return;
 800322a:	e2a0      	b.n	800376e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800322c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 8117 	beq.w	8003464 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d106      	bne.n	8003250 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003242:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003246:	4b85      	ldr	r3, [pc, #532]	; (800345c <HAL_UART_IRQHandler+0x298>)
 8003248:	4013      	ands	r3, r2
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 810a 	beq.w	8003464 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d011      	beq.n	8003280 <HAL_UART_IRQHandler+0xbc>
 800325c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00b      	beq.n	8003280 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2201      	movs	r2, #1
 800326e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003276:	f043 0201 	orr.w	r2, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d011      	beq.n	80032b0 <HAL_UART_IRQHandler+0xec>
 800328c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00b      	beq.n	80032b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2202      	movs	r2, #2
 800329e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032a6:	f043 0204 	orr.w	r2, r3, #4
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d011      	beq.n	80032e0 <HAL_UART_IRQHandler+0x11c>
 80032bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00b      	beq.n	80032e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2204      	movs	r2, #4
 80032ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032d6:	f043 0202 	orr.w	r2, r3, #2
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d017      	beq.n	800331c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d105      	bne.n	8003304 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80032f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00b      	beq.n	800331c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2208      	movs	r2, #8
 800330a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003312:	f043 0208 	orr.w	r2, r3, #8
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800331c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003324:	2b00      	cmp	r3, #0
 8003326:	d012      	beq.n	800334e <HAL_UART_IRQHandler+0x18a>
 8003328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800332c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00c      	beq.n	800334e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800333c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003344:	f043 0220 	orr.w	r2, r3, #32
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 820c 	beq.w	8003772 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800335a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800335e:	f003 0320 	and.w	r3, r3, #32
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00d      	beq.n	8003382 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800336a:	f003 0320 	and.w	r3, r3, #32
 800336e:	2b00      	cmp	r3, #0
 8003370:	d007      	beq.n	8003382 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003388:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003396:	2b40      	cmp	r3, #64	; 0x40
 8003398:	d005      	beq.n	80033a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800339a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800339e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d04f      	beq.n	8003446 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 ff4a 	bl	8004240 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b6:	2b40      	cmp	r3, #64	; 0x40
 80033b8:	d141      	bne.n	800343e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3308      	adds	r3, #8
 80033c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033c8:	e853 3f00 	ldrex	r3, [r3]
 80033cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80033d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3308      	adds	r3, #8
 80033e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80033e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80033ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80033f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80033f6:	e841 2300 	strex	r3, r2, [r1]
 80033fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80033fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1d9      	bne.n	80033ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340a:	2b00      	cmp	r3, #0
 800340c:	d013      	beq.n	8003436 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003412:	4a13      	ldr	r2, [pc, #76]	; (8003460 <HAL_UART_IRQHandler+0x29c>)
 8003414:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341a:	4618      	mov	r0, r3
 800341c:	f7fd ffca 	bl	80013b4 <HAL_DMA_Abort_IT>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d017      	beq.n	8003456 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003430:	4610      	mov	r0, r2
 8003432:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003434:	e00f      	b.n	8003456 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f9c4 	bl	80037c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800343c:	e00b      	b.n	8003456 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f9c0 	bl	80037c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003444:	e007      	b.n	8003456 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f9bc 	bl	80037c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003454:	e18d      	b.n	8003772 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003456:	bf00      	nop
    return;
 8003458:	e18b      	b.n	8003772 <HAL_UART_IRQHandler+0x5ae>
 800345a:	bf00      	nop
 800345c:	04000120 	.word	0x04000120
 8003460:	080044df 	.word	0x080044df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003468:	2b01      	cmp	r3, #1
 800346a:	f040 8146 	bne.w	80036fa <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800346e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003472:	f003 0310 	and.w	r3, r3, #16
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 813f 	beq.w	80036fa <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800347c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 8138 	beq.w	80036fa <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2210      	movs	r2, #16
 8003490:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349c:	2b40      	cmp	r3, #64	; 0x40
 800349e:	f040 80b4 	bne.w	800360a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 815f 	beq.w	8003776 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80034be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034c2:	429a      	cmp	r2, r3
 80034c4:	f080 8157 	bcs.w	8003776 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f040 8085 	bne.w	80035ee <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034f0:	e853 3f00 	ldrex	r3, [r3]
 80034f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80034f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003500:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800350e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003512:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003516:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800351a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800351e:	e841 2300 	strex	r3, r2, [r1]
 8003522:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003526:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1da      	bne.n	80034e4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3308      	adds	r3, #8
 8003534:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003538:	e853 3f00 	ldrex	r3, [r3]
 800353c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800353e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003540:	f023 0301 	bic.w	r3, r3, #1
 8003544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	3308      	adds	r3, #8
 800354e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003552:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003556:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003558:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800355a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800355e:	e841 2300 	strex	r3, r2, [r1]
 8003562:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1e1      	bne.n	800352e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3308      	adds	r3, #8
 8003570:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003574:	e853 3f00 	ldrex	r3, [r3]
 8003578:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800357a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800357c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003580:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3308      	adds	r3, #8
 800358a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800358e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003590:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003592:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003594:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800359c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1e3      	bne.n	800356a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2220      	movs	r2, #32
 80035a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035b6:	e853 3f00 	ldrex	r3, [r3]
 80035ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80035bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035be:	f023 0310 	bic.w	r3, r3, #16
 80035c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80035d2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035d8:	e841 2300 	strex	r3, r2, [r1]
 80035dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80035de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1e4      	bne.n	80035ae <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fd fea5 	bl	8001338 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	b29b      	uxth	r3, r3
 8003600:	4619      	mov	r1, r3
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7fc ff62 	bl	80004cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003608:	e0b5      	b.n	8003776 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003616:	b29b      	uxth	r3, r3
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003624:	b29b      	uxth	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 80a7 	beq.w	800377a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800362c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80a2 	beq.w	800377a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363e:	e853 3f00 	ldrex	r3, [r3]
 8003642:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003646:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800364a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003658:	647b      	str	r3, [r7, #68]	; 0x44
 800365a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800365e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003660:	e841 2300 	strex	r3, r2, [r1]
 8003664:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1e4      	bne.n	8003636 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3308      	adds	r3, #8
 8003672:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	e853 3f00 	ldrex	r3, [r3]
 800367a:	623b      	str	r3, [r7, #32]
   return(result);
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	f023 0301 	bic.w	r3, r3, #1
 8003682:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	3308      	adds	r3, #8
 800368c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003690:	633a      	str	r2, [r7, #48]	; 0x30
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003694:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003698:	e841 2300 	strex	r3, r2, [r1]
 800369c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800369e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1e3      	bne.n	800366c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	e853 3f00 	ldrex	r3, [r3]
 80036c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f023 0310 	bic.w	r3, r3, #16
 80036ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036dc:	69b9      	ldr	r1, [r7, #24]
 80036de:	69fa      	ldr	r2, [r7, #28]
 80036e0:	e841 2300 	strex	r3, r2, [r1]
 80036e4:	617b      	str	r3, [r7, #20]
   return(result);
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1e4      	bne.n	80036b6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036f0:	4619      	mov	r1, r3
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fc feea 	bl	80004cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036f8:	e03f      	b.n	800377a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80036fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00e      	beq.n	8003724 <HAL_UART_IRQHandler+0x560>
 8003706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800370a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d008      	beq.n	8003724 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800371a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 ff1e 	bl	800455e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003722:	e02d      	b.n	8003780 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00e      	beq.n	800374e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003740:	2b00      	cmp	r3, #0
 8003742:	d01c      	beq.n	800377e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	4798      	blx	r3
    }
    return;
 800374c:	e017      	b.n	800377e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800374e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003756:	2b00      	cmp	r3, #0
 8003758:	d012      	beq.n	8003780 <HAL_UART_IRQHandler+0x5bc>
 800375a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800375e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00c      	beq.n	8003780 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fecf 	bl	800450a <UART_EndTransmit_IT>
    return;
 800376c:	e008      	b.n	8003780 <HAL_UART_IRQHandler+0x5bc>
      return;
 800376e:	bf00      	nop
 8003770:	e006      	b.n	8003780 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003772:	bf00      	nop
 8003774:	e004      	b.n	8003780 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003776:	bf00      	nop
 8003778:	e002      	b.n	8003780 <HAL_UART_IRQHandler+0x5bc>
      return;
 800377a:	bf00      	nop
 800377c:	e000      	b.n	8003780 <HAL_UART_IRQHandler+0x5bc>
    return;
 800377e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003780:	37e8      	adds	r7, #232	; 0xe8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop

08003788 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037dc:	b08a      	sub	sp, #40	; 0x28
 80037de:	af00      	add	r7, sp, #0
 80037e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	431a      	orrs	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	4ba4      	ldr	r3, [pc, #656]	; (8003a98 <UART_SetConfig+0x2c0>)
 8003808:	4013      	ands	r3, r2
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	6812      	ldr	r2, [r2, #0]
 800380e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003810:	430b      	orrs	r3, r1
 8003812:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a99      	ldr	r2, [pc, #612]	; (8003a9c <UART_SetConfig+0x2c4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d004      	beq.n	8003844 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003840:	4313      	orrs	r3, r2
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003854:	430a      	orrs	r2, r1
 8003856:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a90      	ldr	r2, [pc, #576]	; (8003aa0 <UART_SetConfig+0x2c8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d126      	bne.n	80038b0 <UART_SetConfig+0xd8>
 8003862:	4b90      	ldr	r3, [pc, #576]	; (8003aa4 <UART_SetConfig+0x2cc>)
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	2b03      	cmp	r3, #3
 800386e:	d81b      	bhi.n	80038a8 <UART_SetConfig+0xd0>
 8003870:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <UART_SetConfig+0xa0>)
 8003872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003876:	bf00      	nop
 8003878:	08003889 	.word	0x08003889
 800387c:	08003899 	.word	0x08003899
 8003880:	08003891 	.word	0x08003891
 8003884:	080038a1 	.word	0x080038a1
 8003888:	2301      	movs	r3, #1
 800388a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800388e:	e116      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003890:	2302      	movs	r3, #2
 8003892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003896:	e112      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003898:	2304      	movs	r3, #4
 800389a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800389e:	e10e      	b.n	8003abe <UART_SetConfig+0x2e6>
 80038a0:	2308      	movs	r3, #8
 80038a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038a6:	e10a      	b.n	8003abe <UART_SetConfig+0x2e6>
 80038a8:	2310      	movs	r3, #16
 80038aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ae:	e106      	b.n	8003abe <UART_SetConfig+0x2e6>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a7c      	ldr	r2, [pc, #496]	; (8003aa8 <UART_SetConfig+0x2d0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d138      	bne.n	800392c <UART_SetConfig+0x154>
 80038ba:	4b7a      	ldr	r3, [pc, #488]	; (8003aa4 <UART_SetConfig+0x2cc>)
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c0:	f003 030c 	and.w	r3, r3, #12
 80038c4:	2b0c      	cmp	r3, #12
 80038c6:	d82d      	bhi.n	8003924 <UART_SetConfig+0x14c>
 80038c8:	a201      	add	r2, pc, #4	; (adr r2, 80038d0 <UART_SetConfig+0xf8>)
 80038ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ce:	bf00      	nop
 80038d0:	08003905 	.word	0x08003905
 80038d4:	08003925 	.word	0x08003925
 80038d8:	08003925 	.word	0x08003925
 80038dc:	08003925 	.word	0x08003925
 80038e0:	08003915 	.word	0x08003915
 80038e4:	08003925 	.word	0x08003925
 80038e8:	08003925 	.word	0x08003925
 80038ec:	08003925 	.word	0x08003925
 80038f0:	0800390d 	.word	0x0800390d
 80038f4:	08003925 	.word	0x08003925
 80038f8:	08003925 	.word	0x08003925
 80038fc:	08003925 	.word	0x08003925
 8003900:	0800391d 	.word	0x0800391d
 8003904:	2300      	movs	r3, #0
 8003906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800390a:	e0d8      	b.n	8003abe <UART_SetConfig+0x2e6>
 800390c:	2302      	movs	r3, #2
 800390e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003912:	e0d4      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003914:	2304      	movs	r3, #4
 8003916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800391a:	e0d0      	b.n	8003abe <UART_SetConfig+0x2e6>
 800391c:	2308      	movs	r3, #8
 800391e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003922:	e0cc      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003924:	2310      	movs	r3, #16
 8003926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800392a:	e0c8      	b.n	8003abe <UART_SetConfig+0x2e6>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a5e      	ldr	r2, [pc, #376]	; (8003aac <UART_SetConfig+0x2d4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d125      	bne.n	8003982 <UART_SetConfig+0x1aa>
 8003936:	4b5b      	ldr	r3, [pc, #364]	; (8003aa4 <UART_SetConfig+0x2cc>)
 8003938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003940:	2b30      	cmp	r3, #48	; 0x30
 8003942:	d016      	beq.n	8003972 <UART_SetConfig+0x19a>
 8003944:	2b30      	cmp	r3, #48	; 0x30
 8003946:	d818      	bhi.n	800397a <UART_SetConfig+0x1a2>
 8003948:	2b20      	cmp	r3, #32
 800394a:	d00a      	beq.n	8003962 <UART_SetConfig+0x18a>
 800394c:	2b20      	cmp	r3, #32
 800394e:	d814      	bhi.n	800397a <UART_SetConfig+0x1a2>
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <UART_SetConfig+0x182>
 8003954:	2b10      	cmp	r3, #16
 8003956:	d008      	beq.n	800396a <UART_SetConfig+0x192>
 8003958:	e00f      	b.n	800397a <UART_SetConfig+0x1a2>
 800395a:	2300      	movs	r3, #0
 800395c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003960:	e0ad      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003962:	2302      	movs	r3, #2
 8003964:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003968:	e0a9      	b.n	8003abe <UART_SetConfig+0x2e6>
 800396a:	2304      	movs	r3, #4
 800396c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003970:	e0a5      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003972:	2308      	movs	r3, #8
 8003974:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003978:	e0a1      	b.n	8003abe <UART_SetConfig+0x2e6>
 800397a:	2310      	movs	r3, #16
 800397c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003980:	e09d      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a4a      	ldr	r2, [pc, #296]	; (8003ab0 <UART_SetConfig+0x2d8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d125      	bne.n	80039d8 <UART_SetConfig+0x200>
 800398c:	4b45      	ldr	r3, [pc, #276]	; (8003aa4 <UART_SetConfig+0x2cc>)
 800398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003992:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003996:	2bc0      	cmp	r3, #192	; 0xc0
 8003998:	d016      	beq.n	80039c8 <UART_SetConfig+0x1f0>
 800399a:	2bc0      	cmp	r3, #192	; 0xc0
 800399c:	d818      	bhi.n	80039d0 <UART_SetConfig+0x1f8>
 800399e:	2b80      	cmp	r3, #128	; 0x80
 80039a0:	d00a      	beq.n	80039b8 <UART_SetConfig+0x1e0>
 80039a2:	2b80      	cmp	r3, #128	; 0x80
 80039a4:	d814      	bhi.n	80039d0 <UART_SetConfig+0x1f8>
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <UART_SetConfig+0x1d8>
 80039aa:	2b40      	cmp	r3, #64	; 0x40
 80039ac:	d008      	beq.n	80039c0 <UART_SetConfig+0x1e8>
 80039ae:	e00f      	b.n	80039d0 <UART_SetConfig+0x1f8>
 80039b0:	2300      	movs	r3, #0
 80039b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039b6:	e082      	b.n	8003abe <UART_SetConfig+0x2e6>
 80039b8:	2302      	movs	r3, #2
 80039ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039be:	e07e      	b.n	8003abe <UART_SetConfig+0x2e6>
 80039c0:	2304      	movs	r3, #4
 80039c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039c6:	e07a      	b.n	8003abe <UART_SetConfig+0x2e6>
 80039c8:	2308      	movs	r3, #8
 80039ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ce:	e076      	b.n	8003abe <UART_SetConfig+0x2e6>
 80039d0:	2310      	movs	r3, #16
 80039d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d6:	e072      	b.n	8003abe <UART_SetConfig+0x2e6>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a35      	ldr	r2, [pc, #212]	; (8003ab4 <UART_SetConfig+0x2dc>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d12a      	bne.n	8003a38 <UART_SetConfig+0x260>
 80039e2:	4b30      	ldr	r3, [pc, #192]	; (8003aa4 <UART_SetConfig+0x2cc>)
 80039e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039f0:	d01a      	beq.n	8003a28 <UART_SetConfig+0x250>
 80039f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039f6:	d81b      	bhi.n	8003a30 <UART_SetConfig+0x258>
 80039f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039fc:	d00c      	beq.n	8003a18 <UART_SetConfig+0x240>
 80039fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a02:	d815      	bhi.n	8003a30 <UART_SetConfig+0x258>
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <UART_SetConfig+0x238>
 8003a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a0c:	d008      	beq.n	8003a20 <UART_SetConfig+0x248>
 8003a0e:	e00f      	b.n	8003a30 <UART_SetConfig+0x258>
 8003a10:	2300      	movs	r3, #0
 8003a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a16:	e052      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1e:	e04e      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003a20:	2304      	movs	r3, #4
 8003a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a26:	e04a      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003a28:	2308      	movs	r3, #8
 8003a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a2e:	e046      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003a30:	2310      	movs	r3, #16
 8003a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a36:	e042      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a17      	ldr	r2, [pc, #92]	; (8003a9c <UART_SetConfig+0x2c4>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d13a      	bne.n	8003ab8 <UART_SetConfig+0x2e0>
 8003a42:	4b18      	ldr	r3, [pc, #96]	; (8003aa4 <UART_SetConfig+0x2cc>)
 8003a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a50:	d01a      	beq.n	8003a88 <UART_SetConfig+0x2b0>
 8003a52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a56:	d81b      	bhi.n	8003a90 <UART_SetConfig+0x2b8>
 8003a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a5c:	d00c      	beq.n	8003a78 <UART_SetConfig+0x2a0>
 8003a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a62:	d815      	bhi.n	8003a90 <UART_SetConfig+0x2b8>
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <UART_SetConfig+0x298>
 8003a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6c:	d008      	beq.n	8003a80 <UART_SetConfig+0x2a8>
 8003a6e:	e00f      	b.n	8003a90 <UART_SetConfig+0x2b8>
 8003a70:	2300      	movs	r3, #0
 8003a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a76:	e022      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a7e:	e01e      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003a80:	2304      	movs	r3, #4
 8003a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a86:	e01a      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003a88:	2308      	movs	r3, #8
 8003a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a8e:	e016      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003a90:	2310      	movs	r3, #16
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a96:	e012      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003a98:	efff69f3 	.word	0xefff69f3
 8003a9c:	40008000 	.word	0x40008000
 8003aa0:	40013800 	.word	0x40013800
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40004400 	.word	0x40004400
 8003aac:	40004800 	.word	0x40004800
 8003ab0:	40004c00 	.word	0x40004c00
 8003ab4:	40005000 	.word	0x40005000
 8003ab8:	2310      	movs	r3, #16
 8003aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a9f      	ldr	r2, [pc, #636]	; (8003d40 <UART_SetConfig+0x568>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d17a      	bne.n	8003bbe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ac8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d824      	bhi.n	8003b1a <UART_SetConfig+0x342>
 8003ad0:	a201      	add	r2, pc, #4	; (adr r2, 8003ad8 <UART_SetConfig+0x300>)
 8003ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad6:	bf00      	nop
 8003ad8:	08003afd 	.word	0x08003afd
 8003adc:	08003b1b 	.word	0x08003b1b
 8003ae0:	08003b05 	.word	0x08003b05
 8003ae4:	08003b1b 	.word	0x08003b1b
 8003ae8:	08003b0b 	.word	0x08003b0b
 8003aec:	08003b1b 	.word	0x08003b1b
 8003af0:	08003b1b 	.word	0x08003b1b
 8003af4:	08003b1b 	.word	0x08003b1b
 8003af8:	08003b13 	.word	0x08003b13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003afc:	f7fe fd38 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 8003b00:	61f8      	str	r0, [r7, #28]
        break;
 8003b02:	e010      	b.n	8003b26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b04:	4b8f      	ldr	r3, [pc, #572]	; (8003d44 <UART_SetConfig+0x56c>)
 8003b06:	61fb      	str	r3, [r7, #28]
        break;
 8003b08:	e00d      	b.n	8003b26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b0a:	f7fe fc99 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 8003b0e:	61f8      	str	r0, [r7, #28]
        break;
 8003b10:	e009      	b.n	8003b26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b16:	61fb      	str	r3, [r7, #28]
        break;
 8003b18:	e005      	b.n	8003b26 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 80fb 	beq.w	8003d24 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	4413      	add	r3, r2
 8003b38:	69fa      	ldr	r2, [r7, #28]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d305      	bcc.n	8003b4a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b44:	69fa      	ldr	r2, [r7, #28]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d903      	bls.n	8003b52 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b50:	e0e8      	b.n	8003d24 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	2200      	movs	r2, #0
 8003b56:	461c      	mov	r4, r3
 8003b58:	4615      	mov	r5, r2
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	f04f 0300 	mov.w	r3, #0
 8003b62:	022b      	lsls	r3, r5, #8
 8003b64:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003b68:	0222      	lsls	r2, r4, #8
 8003b6a:	68f9      	ldr	r1, [r7, #12]
 8003b6c:	6849      	ldr	r1, [r1, #4]
 8003b6e:	0849      	lsrs	r1, r1, #1
 8003b70:	2000      	movs	r0, #0
 8003b72:	4688      	mov	r8, r1
 8003b74:	4681      	mov	r9, r0
 8003b76:	eb12 0a08 	adds.w	sl, r2, r8
 8003b7a:	eb43 0b09 	adc.w	fp, r3, r9
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	603b      	str	r3, [r7, #0]
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b8c:	4650      	mov	r0, sl
 8003b8e:	4659      	mov	r1, fp
 8003b90:	f7fc fb1a 	bl	80001c8 <__aeabi_uldivmod>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4613      	mov	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ba2:	d308      	bcc.n	8003bb6 <UART_SetConfig+0x3de>
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003baa:	d204      	bcs.n	8003bb6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	60da      	str	r2, [r3, #12]
 8003bb4:	e0b6      	b.n	8003d24 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003bbc:	e0b2      	b.n	8003d24 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc6:	d15e      	bne.n	8003c86 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003bc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d828      	bhi.n	8003c22 <UART_SetConfig+0x44a>
 8003bd0:	a201      	add	r2, pc, #4	; (adr r2, 8003bd8 <UART_SetConfig+0x400>)
 8003bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd6:	bf00      	nop
 8003bd8:	08003bfd 	.word	0x08003bfd
 8003bdc:	08003c05 	.word	0x08003c05
 8003be0:	08003c0d 	.word	0x08003c0d
 8003be4:	08003c23 	.word	0x08003c23
 8003be8:	08003c13 	.word	0x08003c13
 8003bec:	08003c23 	.word	0x08003c23
 8003bf0:	08003c23 	.word	0x08003c23
 8003bf4:	08003c23 	.word	0x08003c23
 8003bf8:	08003c1b 	.word	0x08003c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bfc:	f7fe fcb8 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 8003c00:	61f8      	str	r0, [r7, #28]
        break;
 8003c02:	e014      	b.n	8003c2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c04:	f7fe fcca 	bl	800259c <HAL_RCC_GetPCLK2Freq>
 8003c08:	61f8      	str	r0, [r7, #28]
        break;
 8003c0a:	e010      	b.n	8003c2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c0c:	4b4d      	ldr	r3, [pc, #308]	; (8003d44 <UART_SetConfig+0x56c>)
 8003c0e:	61fb      	str	r3, [r7, #28]
        break;
 8003c10:	e00d      	b.n	8003c2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c12:	f7fe fc15 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 8003c16:	61f8      	str	r0, [r7, #28]
        break;
 8003c18:	e009      	b.n	8003c2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c1e:	61fb      	str	r3, [r7, #28]
        break;
 8003c20:	e005      	b.n	8003c2e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d077      	beq.n	8003d24 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	005a      	lsls	r2, r3, #1
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	085b      	lsrs	r3, r3, #1
 8003c3e:	441a      	add	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c48:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	2b0f      	cmp	r3, #15
 8003c4e:	d916      	bls.n	8003c7e <UART_SetConfig+0x4a6>
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c56:	d212      	bcs.n	8003c7e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	f023 030f 	bic.w	r3, r3, #15
 8003c60:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	085b      	lsrs	r3, r3, #1
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	8afb      	ldrh	r3, [r7, #22]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	8afa      	ldrh	r2, [r7, #22]
 8003c7a:	60da      	str	r2, [r3, #12]
 8003c7c:	e052      	b.n	8003d24 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c84:	e04e      	b.n	8003d24 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d827      	bhi.n	8003cde <UART_SetConfig+0x506>
 8003c8e:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <UART_SetConfig+0x4bc>)
 8003c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c94:	08003cb9 	.word	0x08003cb9
 8003c98:	08003cc1 	.word	0x08003cc1
 8003c9c:	08003cc9 	.word	0x08003cc9
 8003ca0:	08003cdf 	.word	0x08003cdf
 8003ca4:	08003ccf 	.word	0x08003ccf
 8003ca8:	08003cdf 	.word	0x08003cdf
 8003cac:	08003cdf 	.word	0x08003cdf
 8003cb0:	08003cdf 	.word	0x08003cdf
 8003cb4:	08003cd7 	.word	0x08003cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cb8:	f7fe fc5a 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 8003cbc:	61f8      	str	r0, [r7, #28]
        break;
 8003cbe:	e014      	b.n	8003cea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cc0:	f7fe fc6c 	bl	800259c <HAL_RCC_GetPCLK2Freq>
 8003cc4:	61f8      	str	r0, [r7, #28]
        break;
 8003cc6:	e010      	b.n	8003cea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cc8:	4b1e      	ldr	r3, [pc, #120]	; (8003d44 <UART_SetConfig+0x56c>)
 8003cca:	61fb      	str	r3, [r7, #28]
        break;
 8003ccc:	e00d      	b.n	8003cea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cce:	f7fe fbb7 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 8003cd2:	61f8      	str	r0, [r7, #28]
        break;
 8003cd4:	e009      	b.n	8003cea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cda:	61fb      	str	r3, [r7, #28]
        break;
 8003cdc:	e005      	b.n	8003cea <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ce8:	bf00      	nop
    }

    if (pclk != 0U)
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d019      	beq.n	8003d24 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	085a      	lsrs	r2, r3, #1
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	441a      	add	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d02:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	2b0f      	cmp	r3, #15
 8003d08:	d909      	bls.n	8003d1e <UART_SetConfig+0x546>
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d10:	d205      	bcs.n	8003d1e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60da      	str	r2, [r3, #12]
 8003d1c:	e002      	b.n	8003d24 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3728      	adds	r7, #40	; 0x28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d3e:	bf00      	nop
 8003d40:	40008000 	.word	0x40008000
 8003d44:	00f42400 	.word	0x00f42400

08003d48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d01a      	beq.n	8003e5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e46:	d10a      	bne.n	8003e5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	605a      	str	r2, [r3, #4]
  }
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af02      	add	r7, sp, #8
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e9c:	f7fd f816 	bl	8000ecc <HAL_GetTick>
 8003ea0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d10e      	bne.n	8003ece <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f82d 	bl	8003f1e <UART_WaitOnFlagUntilTimeout>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e023      	b.n	8003f16 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d10e      	bne.n	8003efa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003edc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f817 	bl	8003f1e <UART_WaitOnFlagUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e00d      	b.n	8003f16 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2220      	movs	r2, #32
 8003efe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2220      	movs	r2, #32
 8003f04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b09c      	sub	sp, #112	; 0x70
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	603b      	str	r3, [r7, #0]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f2e:	e0a5      	b.n	800407c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f36:	f000 80a1 	beq.w	800407c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f3a:	f7fc ffc7 	bl	8000ecc <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d302      	bcc.n	8003f50 <UART_WaitOnFlagUntilTimeout+0x32>
 8003f4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d13e      	bne.n	8003fce <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f58:	e853 3f00 	ldrex	r3, [r3]
 8003f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f64:	667b      	str	r3, [r7, #100]	; 0x64
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f70:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f76:	e841 2300 	strex	r3, r2, [r1]
 8003f7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e6      	bne.n	8003f50 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3308      	adds	r3, #8
 8003f88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f8c:	e853 3f00 	ldrex	r3, [r3]
 8003f90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	663b      	str	r3, [r7, #96]	; 0x60
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	3308      	adds	r3, #8
 8003fa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fa2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003fa4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003fa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003faa:	e841 2300 	strex	r3, r2, [r1]
 8003fae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1e5      	bne.n	8003f82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e067      	b.n	800409e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d04f      	beq.n	800407c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fea:	d147      	bne.n	800407c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ff4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffe:	e853 3f00 	ldrex	r3, [r3]
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800400a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004014:	637b      	str	r3, [r7, #52]	; 0x34
 8004016:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004018:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800401a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800401c:	e841 2300 	strex	r3, r2, [r1]
 8004020:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1e6      	bne.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3308      	adds	r3, #8
 800402e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	e853 3f00 	ldrex	r3, [r3]
 8004036:	613b      	str	r3, [r7, #16]
   return(result);
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f023 0301 	bic.w	r3, r3, #1
 800403e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3308      	adds	r3, #8
 8004046:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004048:	623a      	str	r2, [r7, #32]
 800404a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404c:	69f9      	ldr	r1, [r7, #28]
 800404e:	6a3a      	ldr	r2, [r7, #32]
 8004050:	e841 2300 	strex	r3, r2, [r1]
 8004054:	61bb      	str	r3, [r7, #24]
   return(result);
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1e5      	bne.n	8004028 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2220      	movs	r2, #32
 8004066:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2220      	movs	r2, #32
 800406c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e010      	b.n	800409e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	69da      	ldr	r2, [r3, #28]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	4013      	ands	r3, r2
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	429a      	cmp	r2, r3
 800408a:	bf0c      	ite	eq
 800408c:	2301      	moveq	r3, #1
 800408e:	2300      	movne	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	461a      	mov	r2, r3
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	429a      	cmp	r2, r3
 8004098:	f43f af4a 	beq.w	8003f30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3770      	adds	r7, #112	; 0x70
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b096      	sub	sp, #88	; 0x58
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	4613      	mov	r3, r2
 80040b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2222      	movs	r2, #34	; 0x22
 80040d0:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d02b      	beq.n	8004132 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040de:	4a42      	ldr	r2, [pc, #264]	; (80041e8 <UART_Start_Receive_DMA+0x140>)
 80040e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e6:	4a41      	ldr	r2, [pc, #260]	; (80041ec <UART_Start_Receive_DMA+0x144>)
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ee:	4a40      	ldr	r2, [pc, #256]	; (80041f0 <UART_Start_Receive_DMA+0x148>)
 80040f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f6:	2200      	movs	r2, #0
 80040f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3324      	adds	r3, #36	; 0x24
 8004104:	4619      	mov	r1, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410a:	461a      	mov	r2, r3
 800410c:	88fb      	ldrh	r3, [r7, #6]
 800410e:	f7fd f8b3 	bl	8001278 <HAL_DMA_Start_IT>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00c      	beq.n	8004132 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2210      	movs	r2, #16
 800411c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2220      	movs	r2, #32
 800412c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e055      	b.n	80041de <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d018      	beq.n	8004174 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800414a:	e853 3f00 	ldrex	r3, [r3]
 800414e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004156:	657b      	str	r3, [r7, #84]	; 0x54
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	461a      	mov	r2, r3
 800415e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004160:	64bb      	str	r3, [r7, #72]	; 0x48
 8004162:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004164:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004166:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004168:	e841 2300 	strex	r3, r2, [r1]
 800416c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800416e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e6      	bne.n	8004142 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3308      	adds	r3, #8
 800417a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	f043 0301 	orr.w	r3, r3, #1
 800418a:	653b      	str	r3, [r7, #80]	; 0x50
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3308      	adds	r3, #8
 8004192:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004194:	637a      	str	r2, [r7, #52]	; 0x34
 8004196:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800419a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e5      	bne.n	8004174 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3308      	adds	r3, #8
 80041ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	e853 3f00 	ldrex	r3, [r3]
 80041b6:	613b      	str	r3, [r7, #16]
   return(result);
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3308      	adds	r3, #8
 80041c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041c8:	623a      	str	r2, [r7, #32]
 80041ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041cc:	69f9      	ldr	r1, [r7, #28]
 80041ce:	6a3a      	ldr	r2, [r7, #32]
 80041d0:	e841 2300 	strex	r3, r2, [r1]
 80041d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e5      	bne.n	80041a8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3758      	adds	r7, #88	; 0x58
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	08004307 	.word	0x08004307
 80041ec:	0800442b 	.word	0x0800442b
 80041f0:	08004463 	.word	0x08004463

080041f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b089      	sub	sp, #36	; 0x24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	e853 3f00 	ldrex	r3, [r3]
 8004208:	60bb      	str	r3, [r7, #8]
   return(result);
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004210:	61fb      	str	r3, [r7, #28]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	461a      	mov	r2, r3
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	61bb      	str	r3, [r7, #24]
 800421c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421e:	6979      	ldr	r1, [r7, #20]
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	e841 2300 	strex	r3, r2, [r1]
 8004226:	613b      	str	r3, [r7, #16]
   return(result);
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1e6      	bne.n	80041fc <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2220      	movs	r2, #32
 8004232:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004234:	bf00      	nop
 8004236:	3724      	adds	r7, #36	; 0x24
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004240:	b480      	push	{r7}
 8004242:	b095      	sub	sp, #84	; 0x54
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004250:	e853 3f00 	ldrex	r3, [r3]
 8004254:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004258:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800425c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004266:	643b      	str	r3, [r7, #64]	; 0x40
 8004268:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800426c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800426e:	e841 2300 	strex	r3, r2, [r1]
 8004272:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1e6      	bne.n	8004248 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3308      	adds	r3, #8
 8004280:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	e853 3f00 	ldrex	r3, [r3]
 8004288:	61fb      	str	r3, [r7, #28]
   return(result);
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	f023 0301 	bic.w	r3, r3, #1
 8004290:	64bb      	str	r3, [r7, #72]	; 0x48
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3308      	adds	r3, #8
 8004298:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800429a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1e5      	bne.n	800427a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d118      	bne.n	80042e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	e853 3f00 	ldrex	r3, [r3]
 80042c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f023 0310 	bic.w	r3, r3, #16
 80042ca:	647b      	str	r3, [r7, #68]	; 0x44
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042d4:	61bb      	str	r3, [r7, #24]
 80042d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d8:	6979      	ldr	r1, [r7, #20]
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	e841 2300 	strex	r3, r2, [r1]
 80042e0:	613b      	str	r3, [r7, #16]
   return(result);
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e6      	bne.n	80042b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2220      	movs	r2, #32
 80042ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80042fa:	bf00      	nop
 80042fc:	3754      	adds	r7, #84	; 0x54
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b09c      	sub	sp, #112	; 0x70
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004312:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b00      	cmp	r3, #0
 8004320:	d170      	bne.n	8004404 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8004322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004324:	2200      	movs	r2, #0
 8004326:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800432a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004332:	e853 3f00 	ldrex	r3, [r3]
 8004336:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800433a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800433e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	461a      	mov	r2, r3
 8004346:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004348:	65bb      	str	r3, [r7, #88]	; 0x58
 800434a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800434e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004350:	e841 2300 	strex	r3, r2, [r1]
 8004354:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1e6      	bne.n	800432a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3308      	adds	r3, #8
 8004362:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004366:	e853 3f00 	ldrex	r3, [r3]
 800436a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800436c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436e:	f023 0301 	bic.w	r3, r3, #1
 8004372:	667b      	str	r3, [r7, #100]	; 0x64
 8004374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	3308      	adds	r3, #8
 800437a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800437c:	647a      	str	r2, [r7, #68]	; 0x44
 800437e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004380:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004382:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004384:	e841 2300 	strex	r3, r2, [r1]
 8004388:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800438a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1e5      	bne.n	800435c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3308      	adds	r3, #8
 8004396:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	e853 3f00 	ldrex	r3, [r3]
 800439e:	623b      	str	r3, [r7, #32]
   return(result);
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a6:	663b      	str	r3, [r7, #96]	; 0x60
 80043a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3308      	adds	r3, #8
 80043ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043b0:	633a      	str	r2, [r7, #48]	; 0x30
 80043b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b8:	e841 2300 	strex	r3, r2, [r1]
 80043bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e5      	bne.n	8004390 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c6:	2220      	movs	r2, #32
 80043c8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d118      	bne.n	8004404 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	e853 3f00 	ldrex	r3, [r3]
 80043de:	60fb      	str	r3, [r7, #12]
   return(result);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 0310 	bic.w	r3, r3, #16
 80043e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043f0:	61fb      	str	r3, [r7, #28]
 80043f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f4:	69b9      	ldr	r1, [r7, #24]
 80043f6:	69fa      	ldr	r2, [r7, #28]
 80043f8:	e841 2300 	strex	r3, r2, [r1]
 80043fc:	617b      	str	r3, [r7, #20]
   return(result);
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1e6      	bne.n	80043d2 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004408:	2b01      	cmp	r3, #1
 800440a:	d107      	bne.n	800441c <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800440c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800440e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004412:	4619      	mov	r1, r3
 8004414:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004416:	f7fc f859 	bl	80004cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800441a:	e002      	b.n	8004422 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800441c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800441e:	f7ff f9bd 	bl	800379c <HAL_UART_RxCpltCallback>
}
 8004422:	bf00      	nop
 8004424:	3770      	adds	r7, #112	; 0x70
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b084      	sub	sp, #16
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004436:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800443c:	2b01      	cmp	r3, #1
 800443e:	d109      	bne.n	8004454 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004446:	085b      	lsrs	r3, r3, #1
 8004448:	b29b      	uxth	r3, r3
 800444a:	4619      	mov	r1, r3
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f7fc f83d 	bl	80004cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004452:	e002      	b.n	800445a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f7ff f9ab 	bl	80037b0 <HAL_UART_RxHalfCpltCallback>
}
 800445a:	bf00      	nop
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b086      	sub	sp, #24
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004474:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800447a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004486:	2b80      	cmp	r3, #128	; 0x80
 8004488:	d109      	bne.n	800449e <UART_DMAError+0x3c>
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b21      	cmp	r3, #33	; 0x21
 800448e:	d106      	bne.n	800449e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	2200      	movs	r2, #0
 8004494:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004498:	6978      	ldr	r0, [r7, #20]
 800449a:	f7ff feab 	bl	80041f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a8:	2b40      	cmp	r3, #64	; 0x40
 80044aa:	d109      	bne.n	80044c0 <UART_DMAError+0x5e>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b22      	cmp	r3, #34	; 0x22
 80044b0:	d106      	bne.n	80044c0 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80044ba:	6978      	ldr	r0, [r7, #20]
 80044bc:	f7ff fec0 	bl	8004240 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044c6:	f043 0210 	orr.w	r2, r3, #16
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044d0:	6978      	ldr	r0, [r7, #20]
 80044d2:	f7ff f977 	bl	80037c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044d6:	bf00      	nop
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f7ff f961 	bl	80037c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004502:	bf00      	nop
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b088      	sub	sp, #32
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	e853 3f00 	ldrex	r3, [r3]
 800451e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004526:	61fb      	str	r3, [r7, #28]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	461a      	mov	r2, r3
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	61bb      	str	r3, [r7, #24]
 8004532:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004534:	6979      	ldr	r1, [r7, #20]
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	e841 2300 	strex	r3, r2, [r1]
 800453c:	613b      	str	r3, [r7, #16]
   return(result);
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1e6      	bne.n	8004512 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2220      	movs	r2, #32
 8004548:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff f919 	bl	8003788 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004556:	bf00      	nop
 8004558:	3720      	adds	r7, #32
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b08c      	sub	sp, #48	; 0x30
 8004576:	af00      	add	r7, sp, #0
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	4613      	mov	r3, r2
 800457e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004584:	2b20      	cmp	r3, #32
 8004586:	d14a      	bne.n	800461e <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e043      	b.n	8004620 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 80045a2:	2302      	movs	r3, #2
 80045a4:	e03c      	b.n	8004620 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80045b4:	88fb      	ldrh	r3, [r7, #6]
 80045b6:	461a      	mov	r2, r3
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f7ff fd74 	bl	80040a8 <UART_Start_Receive_DMA>
 80045c0:	4603      	mov	r3, r0
 80045c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80045c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d124      	bne.n	8004618 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d11d      	bne.n	8004612 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2210      	movs	r2, #16
 80045dc:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	e853 3f00 	ldrex	r3, [r3]
 80045ea:	617b      	str	r3, [r7, #20]
   return(result);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f043 0310 	orr.w	r3, r3, #16
 80045f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
 80045fe:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004600:	6a39      	ldr	r1, [r7, #32]
 8004602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004604:	e841 2300 	strex	r3, r2, [r1]
 8004608:	61fb      	str	r3, [r7, #28]
   return(result);
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1e6      	bne.n	80045de <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 8004610:	e002      	b.n	8004618 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004618:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800461c:	e000      	b.n	8004620 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 800461e:	2302      	movs	r3, #2
  }
}
 8004620:	4618      	mov	r0, r3
 8004622:	3730      	adds	r7, #48	; 0x30
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <__libc_init_array>:
 8004628:	b570      	push	{r4, r5, r6, lr}
 800462a:	4d0d      	ldr	r5, [pc, #52]	; (8004660 <__libc_init_array+0x38>)
 800462c:	4c0d      	ldr	r4, [pc, #52]	; (8004664 <__libc_init_array+0x3c>)
 800462e:	1b64      	subs	r4, r4, r5
 8004630:	10a4      	asrs	r4, r4, #2
 8004632:	2600      	movs	r6, #0
 8004634:	42a6      	cmp	r6, r4
 8004636:	d109      	bne.n	800464c <__libc_init_array+0x24>
 8004638:	4d0b      	ldr	r5, [pc, #44]	; (8004668 <__libc_init_array+0x40>)
 800463a:	4c0c      	ldr	r4, [pc, #48]	; (800466c <__libc_init_array+0x44>)
 800463c:	f000 f820 	bl	8004680 <_init>
 8004640:	1b64      	subs	r4, r4, r5
 8004642:	10a4      	asrs	r4, r4, #2
 8004644:	2600      	movs	r6, #0
 8004646:	42a6      	cmp	r6, r4
 8004648:	d105      	bne.n	8004656 <__libc_init_array+0x2e>
 800464a:	bd70      	pop	{r4, r5, r6, pc}
 800464c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004650:	4798      	blx	r3
 8004652:	3601      	adds	r6, #1
 8004654:	e7ee      	b.n	8004634 <__libc_init_array+0xc>
 8004656:	f855 3b04 	ldr.w	r3, [r5], #4
 800465a:	4798      	blx	r3
 800465c:	3601      	adds	r6, #1
 800465e:	e7f2      	b.n	8004646 <__libc_init_array+0x1e>
 8004660:	080046e8 	.word	0x080046e8
 8004664:	080046e8 	.word	0x080046e8
 8004668:	080046e8 	.word	0x080046e8
 800466c:	080046ec 	.word	0x080046ec

08004670 <memset>:
 8004670:	4402      	add	r2, r0
 8004672:	4603      	mov	r3, r0
 8004674:	4293      	cmp	r3, r2
 8004676:	d100      	bne.n	800467a <memset+0xa>
 8004678:	4770      	bx	lr
 800467a:	f803 1b01 	strb.w	r1, [r3], #1
 800467e:	e7f9      	b.n	8004674 <memset+0x4>

08004680 <_init>:
 8004680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004682:	bf00      	nop
 8004684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004686:	bc08      	pop	{r3}
 8004688:	469e      	mov	lr, r3
 800468a:	4770      	bx	lr

0800468c <_fini>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	bf00      	nop
 8004690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004692:	bc08      	pop	{r3}
 8004694:	469e      	mov	lr, r3
 8004696:	4770      	bx	lr
