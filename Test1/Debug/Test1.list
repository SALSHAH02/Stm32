
Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004114  08004114  00014114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041a0  080041a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080041a0  080041a0  000141a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041a8  080041a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041a8  080041a8  000141a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041ac  080041ac  000141ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080041b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000070  08004220  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08004220  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aad2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017ca  00000000  00000000  0002ab72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  0002c340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000820  00000000  00000000  0002cbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025332  00000000  00000000  0002d418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a8e6  00000000  00000000  0005274a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7376  00000000  00000000  0005d030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001443a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002694  00000000  00000000  001443f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080040fc 	.word	0x080040fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080040fc 	.word	0x080040fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fc37 	bl	8000dfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f83c 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f8bc 	bl	800070c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000594:	f000 f88a 	bl	80006ac <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  snprintf(str_tmp,100,"T_out = ");
 8000598:	4a17      	ldr	r2, [pc, #92]	; (80005f8 <main+0x74>)
 800059a:	2164      	movs	r1, #100	; 0x64
 800059c:	4817      	ldr	r0, [pc, #92]	; (80005fc <main+0x78>)
 800059e:	f003 f92b 	bl	80037f8 <sniprintf>
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_UART_Transmit(&huart1,str_tmp,sizeof(str_tmp),1000);
 80005a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a6:	2264      	movs	r2, #100	; 0x64
 80005a8:	4914      	ldr	r1, [pc, #80]	; (80005fc <main+0x78>)
 80005aa:	4815      	ldr	r0, [pc, #84]	; (8000600 <main+0x7c>)
 80005ac:	f002 fb24 	bl	8002bf8 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80005b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b4:	f000 fc96 	bl	8000ee4 <HAL_Delay>
	  memset(str_tmp,0,strlen(str_tmp));
 80005b8:	4810      	ldr	r0, [pc, #64]	; (80005fc <main+0x78>)
 80005ba:	f7ff fe09 	bl	80001d0 <strlen>
 80005be:	4603      	mov	r3, r0
 80005c0:	461a      	mov	r2, r3
 80005c2:	2100      	movs	r1, #0
 80005c4:	480d      	ldr	r0, [pc, #52]	; (80005fc <main+0x78>)
 80005c6:	f003 f90f 	bl	80037e8 <memset>
	  HAL_UART_Receive(&huart1,str_tmp,sizeof(str_tmp),4000);
 80005ca:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80005ce:	2264      	movs	r2, #100	; 0x64
 80005d0:	490a      	ldr	r1, [pc, #40]	; (80005fc <main+0x78>)
 80005d2:	480b      	ldr	r0, [pc, #44]	; (8000600 <main+0x7c>)
 80005d4:	f002 fba4 	bl	8002d20 <HAL_UART_Receive>
	  HAL_Delay(1000);
 80005d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005dc:	f000 fc82 	bl	8000ee4 <HAL_Delay>
      HAL_UART_Transmit(&huart1,"RX=",sizeof(50),1000);
 80005e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e4:	2204      	movs	r2, #4
 80005e6:	4907      	ldr	r1, [pc, #28]	; (8000604 <main+0x80>)
 80005e8:	4805      	ldr	r0, [pc, #20]	; (8000600 <main+0x7c>)
 80005ea:	f002 fb05 	bl	8002bf8 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80005ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f2:	f000 fc77 	bl	8000ee4 <HAL_Delay>
  {
 80005f6:	e7d4      	b.n	80005a2 <main+0x1e>
 80005f8:	08004114 	.word	0x08004114
 80005fc:	20000110 	.word	0x20000110
 8000600:	2000008c 	.word	0x2000008c
 8000604:	08004120 	.word	0x08004120

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b096      	sub	sp, #88	; 0x58
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	2244      	movs	r2, #68	; 0x44
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f003 f8e6 	bl	80037e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	463b      	mov	r3, r7
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800062a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800062e:	f000 ff83 	bl	8001538 <HAL_PWREx_ControlVoltageScaling>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000638:	f000 fa92 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800063c:	2310      	movs	r3, #16
 800063e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000648:	2360      	movs	r3, #96	; 0x60
 800064a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000650:	2301      	movs	r3, #1
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000654:	2301      	movs	r3, #1
 8000656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000658:	2328      	movs	r3, #40	; 0x28
 800065a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800065c:	2307      	movs	r3, #7
 800065e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4618      	mov	r0, r3
 800066e:	f000 ffb9 	bl	80015e4 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000678:	f000 fa72 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2303      	movs	r3, #3
 8000682:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	2104      	movs	r1, #4
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fb81 	bl	8001d9c <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006a0:	f000 fa5e 	bl	8000b60 <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3758      	adds	r7, #88	; 0x58
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006b2:	4a15      	ldr	r2, [pc, #84]	; (8000708 <MX_USART1_UART_Init+0x5c>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006f0:	f002 fa34 	bl	8002b5c <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006fa:	f000 fa31 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000008c 	.word	0x2000008c
 8000708:	40013800 	.word	0x40013800

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000722:	4bbc      	ldr	r3, [pc, #752]	; (8000a14 <MX_GPIO_Init+0x308>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	4abb      	ldr	r2, [pc, #748]	; (8000a14 <MX_GPIO_Init+0x308>)
 8000728:	f043 0310 	orr.w	r3, r3, #16
 800072c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072e:	4bb9      	ldr	r3, [pc, #740]	; (8000a14 <MX_GPIO_Init+0x308>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	f003 0310 	and.w	r3, r3, #16
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	4bb6      	ldr	r3, [pc, #728]	; (8000a14 <MX_GPIO_Init+0x308>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	4ab5      	ldr	r2, [pc, #724]	; (8000a14 <MX_GPIO_Init+0x308>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000746:	4bb3      	ldr	r3, [pc, #716]	; (8000a14 <MX_GPIO_Init+0x308>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4bb0      	ldr	r3, [pc, #704]	; (8000a14 <MX_GPIO_Init+0x308>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	4aaf      	ldr	r2, [pc, #700]	; (8000a14 <MX_GPIO_Init+0x308>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075e:	4bad      	ldr	r3, [pc, #692]	; (8000a14 <MX_GPIO_Init+0x308>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	4baa      	ldr	r3, [pc, #680]	; (8000a14 <MX_GPIO_Init+0x308>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4aa9      	ldr	r2, [pc, #676]	; (8000a14 <MX_GPIO_Init+0x308>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4ba7      	ldr	r3, [pc, #668]	; (8000a14 <MX_GPIO_Init+0x308>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000782:	4ba4      	ldr	r3, [pc, #656]	; (8000a14 <MX_GPIO_Init+0x308>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4aa3      	ldr	r2, [pc, #652]	; (8000a14 <MX_GPIO_Init+0x308>)
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4ba1      	ldr	r3, [pc, #644]	; (8000a14 <MX_GPIO_Init+0x308>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 718a 	mov.w	r1, #276	; 0x114
 80007a0:	489d      	ldr	r0, [pc, #628]	; (8000a18 <MX_GPIO_Init+0x30c>)
 80007a2:	f000 fe7f 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f248 1104 	movw	r1, #33028	; 0x8104
 80007ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b0:	f000 fe78 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80007b4:	2200      	movs	r2, #0
 80007b6:	f24f 0114 	movw	r1, #61460	; 0xf014
 80007ba:	4898      	ldr	r0, [pc, #608]	; (8000a1c <MX_GPIO_Init+0x310>)
 80007bc:	f000 fe72 	bl	80014a4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f241 0181 	movw	r1, #4225	; 0x1081
 80007c6:	4896      	ldr	r0, [pc, #600]	; (8000a20 <MX_GPIO_Init+0x314>)
 80007c8:	f000 fe6c 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d2:	4893      	ldr	r0, [pc, #588]	; (8000a20 <MX_GPIO_Init+0x314>)
 80007d4:	f000 fe66 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 7110 	mov.w	r1, #576	; 0x240
 80007de:	4891      	ldr	r0, [pc, #580]	; (8000a24 <MX_GPIO_Init+0x318>)
 80007e0:	f000 fe60 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2120      	movs	r1, #32
 80007e8:	488c      	ldr	r0, [pc, #560]	; (8000a1c <MX_GPIO_Init+0x310>)
 80007ea:	f000 fe5b 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80007ee:	2201      	movs	r2, #1
 80007f0:	2101      	movs	r1, #1
 80007f2:	4889      	ldr	r0, [pc, #548]	; (8000a18 <MX_GPIO_Init+0x30c>)
 80007f4:	f000 fe56 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80007f8:	f240 1315 	movw	r3, #277	; 0x115
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	4881      	ldr	r0, [pc, #516]	; (8000a18 <MX_GPIO_Init+0x30c>)
 8000812:	f000 fc9d 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000816:	236a      	movs	r3, #106	; 0x6a
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	487b      	ldr	r0, [pc, #492]	; (8000a18 <MX_GPIO_Init+0x30c>)
 800082c:	f000 fc90 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000830:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000836:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	4877      	ldr	r0, [pc, #476]	; (8000a24 <MX_GPIO_Init+0x318>)
 8000848:	f000 fc82 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800084c:	233f      	movs	r3, #63	; 0x3f
 800084e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000850:	230b      	movs	r3, #11
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	4871      	ldr	r0, [pc, #452]	; (8000a24 <MX_GPIO_Init+0x318>)
 8000860:	f000 fc76 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000864:	2303      	movs	r3, #3
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000870:	2303      	movs	r3, #3
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000874:	2308      	movs	r3, #8
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000882:	f000 fc65 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000886:	f248 1304 	movw	r3, #33028	; 0x8104
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a2:	f000 fc55 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80008a6:	2308      	movs	r3, #8
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008b6:	2301      	movs	r3, #1
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c4:	f000 fc44 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80008c8:	2310      	movs	r3, #16
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008cc:	230b      	movs	r3, #11
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008de:	f000 fc37 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80008e2:	23e0      	movs	r3, #224	; 0xe0
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ee:	2303      	movs	r3, #3
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008f2:	2305      	movs	r3, #5
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000900:	f000 fc26 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000904:	2301      	movs	r3, #1
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000908:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800090c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	4840      	ldr	r0, [pc, #256]	; (8000a1c <MX_GPIO_Init+0x310>)
 800091a:	f000 fc19 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800091e:	2302      	movs	r3, #2
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000922:	230b      	movs	r3, #11
 8000924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	483a      	ldr	r0, [pc, #232]	; (8000a1c <MX_GPIO_Init+0x310>)
 8000932:	f000 fc0d 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000936:	f24f 0334 	movw	r3, #61492	; 0xf034
 800093a:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	4833      	ldr	r0, [pc, #204]	; (8000a1c <MX_GPIO_Init+0x310>)
 8000950:	f000 fbfe 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000954:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000966:	2306      	movs	r3, #6
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4829      	ldr	r0, [pc, #164]	; (8000a18 <MX_GPIO_Init+0x30c>)
 8000972:	f000 fbed 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000976:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800097a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000988:	230a      	movs	r3, #10
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	4821      	ldr	r0, [pc, #132]	; (8000a18 <MX_GPIO_Init+0x30c>)
 8000994:	f000 fbdc 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000998:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800099c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800099e:	2312      	movs	r3, #18
 80009a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80009aa:	2304      	movs	r3, #4
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	4819      	ldr	r0, [pc, #100]	; (8000a1c <MX_GPIO_Init+0x310>)
 80009b6:	f000 fbcb 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80009ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c8:	2303      	movs	r3, #3
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009cc:	2307      	movs	r3, #7
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	4812      	ldr	r0, [pc, #72]	; (8000a20 <MX_GPIO_Init+0x314>)
 80009d8:	f000 fbba 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80009dc:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80009e0:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	480b      	ldr	r0, [pc, #44]	; (8000a20 <MX_GPIO_Init+0x314>)
 80009f4:	f000 fbac 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80009f8:	f243 0381 	movw	r3, #12417	; 0x3081
 80009fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	e00a      	b.n	8000a28 <MX_GPIO_Init+0x31c>
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000
 8000a18:	48001000 	.word	0x48001000
 8000a1c:	48000400 	.word	0x48000400
 8000a20:	48000c00 	.word	0x48000c00
 8000a24:	48000800 	.word	0x48000800
 8000a28:	484a      	ldr	r0, [pc, #296]	; (8000b54 <MX_GPIO_Init+0x448>)
 8000a2a:	f000 fb91 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000a2e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	4844      	ldr	r0, [pc, #272]	; (8000b58 <MX_GPIO_Init+0x44c>)
 8000a48:	f000 fb82 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000a4c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	483d      	ldr	r0, [pc, #244]	; (8000b58 <MX_GPIO_Init+0x44c>)
 8000a64:	f000 fb74 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000a68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a80:	f000 fb66 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000a84:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a96:	230a      	movs	r3, #10
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa4:	f000 fb54 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000aa8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000aba:	2306      	movs	r3, #6
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4824      	ldr	r0, [pc, #144]	; (8000b58 <MX_GPIO_Init+0x44c>)
 8000ac6:	f000 fb43 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000aca:	2302      	movs	r3, #2
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ada:	2305      	movs	r3, #5
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	481b      	ldr	r0, [pc, #108]	; (8000b54 <MX_GPIO_Init+0x448>)
 8000ae6:	f000 fb33 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000aea:	2378      	movs	r3, #120	; 0x78
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	2303      	movs	r3, #3
 8000af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afa:	2307      	movs	r3, #7
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4813      	ldr	r0, [pc, #76]	; (8000b54 <MX_GPIO_Init+0x448>)
 8000b06:	f000 fb23 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000b0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b10:	2312      	movs	r3, #18
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	480d      	ldr	r0, [pc, #52]	; (8000b5c <MX_GPIO_Init+0x450>)
 8000b28:	f000 fb12 	bl	8001150 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2017      	movs	r0, #23
 8000b32:	f000 fad6 	bl	80010e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b36:	2017      	movs	r0, #23
 8000b38:	f000 faef 	bl	800111a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2028      	movs	r0, #40	; 0x28
 8000b42:	f000 face 	bl	80010e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b46:	2028      	movs	r0, #40	; 0x28
 8000b48:	f000 fae7 	bl	800111a <HAL_NVIC_EnableIRQ>

}
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	; 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	48000c00 	.word	0x48000c00
 8000b58:	48000800 	.word	0x48000800
 8000b5c:	48000400 	.word	0x48000400

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <Error_Handler+0x8>
	...

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b76:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8e:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b94:	6593      	str	r3, [r2, #88]	; 0x58
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b0ac      	sub	sp, #176	; 0xb0
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2288      	movs	r2, #136	; 0x88
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f002 fe07 	bl	80037e8 <memset>
  if(huart->Instance==USART1)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a21      	ldr	r2, [pc, #132]	; (8000c64 <HAL_UART_MspInit+0xb0>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d13a      	bne.n	8000c5a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000be4:	2301      	movs	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000be8:	2300      	movs	r3, #0
 8000bea:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f001 faf7 	bl	80021e4 <HAL_RCCEx_PeriphCLKConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bfc:	f7ff ffb0 	bl	8000b60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c00:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <HAL_UART_MspInit+0xb4>)
 8000c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c04:	4a18      	ldr	r2, [pc, #96]	; (8000c68 <HAL_UART_MspInit+0xb4>)
 8000c06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0a:	6613      	str	r3, [r2, #96]	; 0x60
 8000c0c:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <HAL_UART_MspInit+0xb4>)
 8000c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c18:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <HAL_UART_MspInit+0xb4>)
 8000c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1c:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <HAL_UART_MspInit+0xb4>)
 8000c1e:	f043 0302 	orr.w	r3, r3, #2
 8000c22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c24:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <HAL_UART_MspInit+0xb4>)
 8000c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c28:	f003 0302 	and.w	r3, r3, #2
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000c30:	23c0      	movs	r3, #192	; 0xc0
 8000c32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c48:	2307      	movs	r3, #7
 8000c4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <HAL_UART_MspInit+0xb8>)
 8000c56:	f000 fa7b 	bl	8001150 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c5a:	bf00      	nop
 8000c5c:	37b0      	adds	r7, #176	; 0xb0
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40013800 	.word	0x40013800
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	48000400 	.word	0x48000400

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <NMI_Handler+0x4>

08000c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <HardFault_Handler+0x4>

08000c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <MemManage_Handler+0x4>

08000c82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <BusFault_Handler+0x4>

08000c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <UsageFault_Handler+0x4>

08000c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbc:	f000 f8f2 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8000cc8:	2020      	movs	r0, #32
 8000cca:	f000 fc03 	bl	80014d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8000cce:	2040      	movs	r0, #64	; 0x40
 8000cd0:	f000 fc00 	bl	80014d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8000cd4:	2080      	movs	r0, #128	; 0x80
 8000cd6:	f000 fbfd 	bl	80014d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8000cda:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000cde:	f000 fbf9 	bl	80014d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8000cea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000cee:	f000 fbf1 	bl	80014d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8000cf2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000cf6:	f000 fbed 	bl	80014d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8000cfa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfe:	f000 fbe9 	bl	80014d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8000d02:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d06:	f000 fbe5 	bl	80014d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8000d0a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000d0e:	f000 fbe1 	bl	80014d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d20:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <_sbrk+0x5c>)
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <_sbrk+0x60>)
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d102      	bne.n	8000d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <_sbrk+0x64>)
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <_sbrk+0x68>)
 8000d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d207      	bcs.n	8000d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d48:	f002 fd24 	bl	8003794 <__errno>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	220c      	movs	r2, #12
 8000d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
 8000d56:	e009      	b.n	8000d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <_sbrk+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <_sbrk+0x64>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <_sbrk+0x64>)
 8000d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20018000 	.word	0x20018000
 8000d78:	00000400 	.word	0x00000400
 8000d7c:	20000174 	.word	0x20000174
 8000d80:	20000190 	.word	0x20000190

08000d84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <SystemInit+0x20>)
 8000d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <SystemInit+0x20>)
 8000d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dac:	f7ff ffea 	bl	8000d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000db2:	490d      	ldr	r1, [pc, #52]	; (8000de8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <LoopForever+0xe>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc8:	4c0a      	ldr	r4, [pc, #40]	; (8000df4 <LoopForever+0x16>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f002 fce3 	bl	80037a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dda:	f7ff fbd3 	bl	8000584 <main>

08000dde <LoopForever>:

LoopForever:
    b LoopForever
 8000dde:	e7fe      	b.n	8000dde <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000de0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dec:	080041b0 	.word	0x080041b0
  ldr r2, =_sbss
 8000df0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000df4:	2000018c 	.word	0x2000018c

08000df8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC1_2_IRQHandler>

08000dfa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e00:	2300      	movs	r3, #0
 8000e02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f961 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f000 f80e 	bl	8000e2c <HAL_InitTick>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d002      	beq.n	8000e1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	71fb      	strb	r3, [r7, #7]
 8000e1a:	e001      	b.n	8000e20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e1c:	f7ff fea6 	bl	8000b6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e20:	79fb      	ldrb	r3, [r7, #7]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e34:	2300      	movs	r3, #0
 8000e36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <HAL_InitTick+0x6c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d023      	beq.n	8000e88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e40:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <HAL_InitTick+0x70>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <HAL_InitTick+0x6c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f96d 	bl	8001136 <HAL_SYSTICK_Config>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10f      	bne.n	8000e82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b0f      	cmp	r3, #15
 8000e66:	d809      	bhi.n	8000e7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f000 f937 	bl	80010e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e74:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <HAL_InitTick+0x74>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	e007      	b.n	8000e8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	73fb      	strb	r3, [r7, #15]
 8000e80:	e004      	b.n	8000e8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	73fb      	strb	r3, [r7, #15]
 8000e86:	e001      	b.n	8000e8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000178 	.word	0x20000178

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000178 	.word	0x20000178

08000ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eec:	f7ff ffee 	bl	8000ecc <HAL_GetTick>
 8000ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000efc:	d005      	beq.n	8000f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_Delay+0x44>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4413      	add	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f0a:	bf00      	nop
 8000f0c:	f7ff ffde 	bl	8000ecc <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d8f7      	bhi.n	8000f0c <HAL_Delay+0x28>
  {
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008

08000f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5e:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	60d3      	str	r3, [r2, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <__NVIC_GetPriorityGrouping+0x18>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	f003 0307 	and.w	r3, r3, #7
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	db0b      	blt.n	8000fba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	f003 021f 	and.w	r2, r3, #31
 8000fa8:	4907      	ldr	r1, [pc, #28]	; (8000fc8 <__NVIC_EnableIRQ+0x38>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	095b      	lsrs	r3, r3, #5
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000e100 	.word	0xe000e100

08000fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	db0a      	blt.n	8000ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	490c      	ldr	r1, [pc, #48]	; (8001018 <__NVIC_SetPriority+0x4c>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	0112      	lsls	r2, r2, #4
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff4:	e00a      	b.n	800100c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4908      	ldr	r1, [pc, #32]	; (800101c <__NVIC_SetPriority+0x50>)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	3b04      	subs	r3, #4
 8001004:	0112      	lsls	r2, r2, #4
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	440b      	add	r3, r1
 800100a:	761a      	strb	r2, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000e100 	.word	0xe000e100
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f1c3 0307 	rsb	r3, r3, #7
 800103a:	2b04      	cmp	r3, #4
 800103c:	bf28      	it	cs
 800103e:	2304      	movcs	r3, #4
 8001040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3304      	adds	r3, #4
 8001046:	2b06      	cmp	r3, #6
 8001048:	d902      	bls.n	8001050 <NVIC_EncodePriority+0x30>
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3b03      	subs	r3, #3
 800104e:	e000      	b.n	8001052 <NVIC_EncodePriority+0x32>
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	f04f 32ff 	mov.w	r2, #4294967295
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43da      	mvns	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001068:	f04f 31ff 	mov.w	r1, #4294967295
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43d9      	mvns	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	4313      	orrs	r3, r2
         );
}
 800107a:	4618      	mov	r0, r3
 800107c:	3724      	adds	r7, #36	; 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001098:	d301      	bcc.n	800109e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109a:	2301      	movs	r3, #1
 800109c:	e00f      	b.n	80010be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <SysTick_Config+0x40>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a6:	210f      	movs	r1, #15
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f7ff ff8e 	bl	8000fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <SysTick_Config+0x40>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <SysTick_Config+0x40>)
 80010b8:	2207      	movs	r2, #7
 80010ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	e000e010 	.word	0xe000e010

080010cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff29 	bl	8000f2c <__NVIC_SetPriorityGrouping>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010f4:	f7ff ff3e 	bl	8000f74 <__NVIC_GetPriorityGrouping>
 80010f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	6978      	ldr	r0, [r7, #20]
 8001100:	f7ff ff8e 	bl	8001020 <NVIC_EncodePriority>
 8001104:	4602      	mov	r2, r0
 8001106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff5d 	bl	8000fcc <__NVIC_SetPriority>
}
 8001112:	bf00      	nop
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff31 	bl	8000f90 <__NVIC_EnableIRQ>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ffa2 	bl	8001088 <SysTick_Config>
 8001144:	4603      	mov	r3, r0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001150:	b480      	push	{r7}
 8001152:	b087      	sub	sp, #28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115e:	e17f      	b.n	8001460 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	2101      	movs	r1, #1
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	fa01 f303 	lsl.w	r3, r1, r3
 800116c:	4013      	ands	r3, r2
 800116e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 8171 	beq.w	800145a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b01      	cmp	r3, #1
 8001182:	d005      	beq.n	8001190 <HAL_GPIO_Init+0x40>
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d130      	bne.n	80011f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	68da      	ldr	r2, [r3, #12]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011c6:	2201      	movs	r2, #1
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	091b      	lsrs	r3, r3, #4
 80011dc:	f003 0201 	and.w	r2, r3, #1
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d118      	bne.n	8001230 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001202:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001204:	2201      	movs	r2, #1
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	08db      	lsrs	r3, r3, #3
 800121a:	f003 0201 	and.w	r2, r3, #1
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b03      	cmp	r3, #3
 800123a:	d017      	beq.n	800126c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d123      	bne.n	80012c0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	08da      	lsrs	r2, r3, #3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3208      	adds	r2, #8
 8001280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	220f      	movs	r2, #15
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	691a      	ldr	r2, [r3, #16]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	08da      	lsrs	r2, r3, #3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3208      	adds	r2, #8
 80012ba:	6939      	ldr	r1, [r7, #16]
 80012bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	2203      	movs	r2, #3
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0203 	and.w	r2, r3, #3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 80ac 	beq.w	800145a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	4b5f      	ldr	r3, [pc, #380]	; (8001480 <HAL_GPIO_Init+0x330>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001306:	4a5e      	ldr	r2, [pc, #376]	; (8001480 <HAL_GPIO_Init+0x330>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6613      	str	r3, [r2, #96]	; 0x60
 800130e:	4b5c      	ldr	r3, [pc, #368]	; (8001480 <HAL_GPIO_Init+0x330>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800131a:	4a5a      	ldr	r2, [pc, #360]	; (8001484 <HAL_GPIO_Init+0x334>)
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	3302      	adds	r3, #2
 8001322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	220f      	movs	r2, #15
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001344:	d025      	beq.n	8001392 <HAL_GPIO_Init+0x242>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4f      	ldr	r2, [pc, #316]	; (8001488 <HAL_GPIO_Init+0x338>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d01f      	beq.n	800138e <HAL_GPIO_Init+0x23e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4e      	ldr	r2, [pc, #312]	; (800148c <HAL_GPIO_Init+0x33c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d019      	beq.n	800138a <HAL_GPIO_Init+0x23a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4d      	ldr	r2, [pc, #308]	; (8001490 <HAL_GPIO_Init+0x340>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d013      	beq.n	8001386 <HAL_GPIO_Init+0x236>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4c      	ldr	r2, [pc, #304]	; (8001494 <HAL_GPIO_Init+0x344>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d00d      	beq.n	8001382 <HAL_GPIO_Init+0x232>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4b      	ldr	r2, [pc, #300]	; (8001498 <HAL_GPIO_Init+0x348>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d007      	beq.n	800137e <HAL_GPIO_Init+0x22e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4a      	ldr	r2, [pc, #296]	; (800149c <HAL_GPIO_Init+0x34c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d101      	bne.n	800137a <HAL_GPIO_Init+0x22a>
 8001376:	2306      	movs	r3, #6
 8001378:	e00c      	b.n	8001394 <HAL_GPIO_Init+0x244>
 800137a:	2307      	movs	r3, #7
 800137c:	e00a      	b.n	8001394 <HAL_GPIO_Init+0x244>
 800137e:	2305      	movs	r3, #5
 8001380:	e008      	b.n	8001394 <HAL_GPIO_Init+0x244>
 8001382:	2304      	movs	r3, #4
 8001384:	e006      	b.n	8001394 <HAL_GPIO_Init+0x244>
 8001386:	2303      	movs	r3, #3
 8001388:	e004      	b.n	8001394 <HAL_GPIO_Init+0x244>
 800138a:	2302      	movs	r3, #2
 800138c:	e002      	b.n	8001394 <HAL_GPIO_Init+0x244>
 800138e:	2301      	movs	r3, #1
 8001390:	e000      	b.n	8001394 <HAL_GPIO_Init+0x244>
 8001392:	2300      	movs	r3, #0
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	f002 0203 	and.w	r2, r2, #3
 800139a:	0092      	lsls	r2, r2, #2
 800139c:	4093      	lsls	r3, r2
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013a4:	4937      	ldr	r1, [pc, #220]	; (8001484 <HAL_GPIO_Init+0x334>)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	3302      	adds	r3, #2
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013b2:	4b3b      	ldr	r3, [pc, #236]	; (80014a0 <HAL_GPIO_Init+0x350>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013d6:	4a32      	ldr	r2, [pc, #200]	; (80014a0 <HAL_GPIO_Init+0x350>)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013dc:	4b30      	ldr	r3, [pc, #192]	; (80014a0 <HAL_GPIO_Init+0x350>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001400:	4a27      	ldr	r2, [pc, #156]	; (80014a0 <HAL_GPIO_Init+0x350>)
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001406:	4b26      	ldr	r3, [pc, #152]	; (80014a0 <HAL_GPIO_Init+0x350>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800142a:	4a1d      	ldr	r2, [pc, #116]	; (80014a0 <HAL_GPIO_Init+0x350>)
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001430:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <HAL_GPIO_Init+0x350>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	43db      	mvns	r3, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001454:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <HAL_GPIO_Init+0x350>)
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	3301      	adds	r3, #1
 800145e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa22 f303 	lsr.w	r3, r2, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	f47f ae78 	bne.w	8001160 <HAL_GPIO_Init+0x10>
  }
}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	371c      	adds	r7, #28
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000
 8001484:	40010000 	.word	0x40010000
 8001488:	48000400 	.word	0x48000400
 800148c:	48000800 	.word	0x48000800
 8001490:	48000c00 	.word	0x48000c00
 8001494:	48001000 	.word	0x48001000
 8001498:	48001400 	.word	0x48001400
 800149c:	48001800 	.word	0x48001800
 80014a0:	40010400 	.word	0x40010400

080014a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
 80014b0:	4613      	mov	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b4:	787b      	ldrb	r3, [r7, #1]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014c0:	e002      	b.n	80014c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014c2:	887a      	ldrh	r2, [r7, #2]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014e0:	695a      	ldr	r2, [r3, #20]
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d006      	beq.n	80014f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014ea:	4a05      	ldr	r2, [pc, #20]	; (8001500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f806 	bl	8001504 <HAL_GPIO_EXTI_Callback>
  }
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40010400 	.word	0x40010400

08001504 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <HAL_PWREx_GetVoltageRange+0x18>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001528:	4618      	mov	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40007000 	.word	0x40007000

08001538 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001546:	d130      	bne.n	80015aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001548:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001554:	d038      	beq.n	80015c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001556:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800155e:	4a1e      	ldr	r2, [pc, #120]	; (80015d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001560:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001564:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001566:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2232      	movs	r2, #50	; 0x32
 800156c:	fb02 f303 	mul.w	r3, r2, r3
 8001570:	4a1b      	ldr	r2, [pc, #108]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001572:	fba2 2303 	umull	r2, r3, r2, r3
 8001576:	0c9b      	lsrs	r3, r3, #18
 8001578:	3301      	adds	r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800157c:	e002      	b.n	8001584 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	3b01      	subs	r3, #1
 8001582:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800158c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001590:	d102      	bne.n	8001598 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f2      	bne.n	800157e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015a4:	d110      	bne.n	80015c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e00f      	b.n	80015ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b6:	d007      	beq.n	80015c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015c0:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40007000 	.word	0x40007000
 80015dc:	20000000 	.word	0x20000000
 80015e0:	431bde83 	.word	0x431bde83

080015e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e3ca      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015f6:	4b97      	ldr	r3, [pc, #604]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001600:	4b94      	ldr	r3, [pc, #592]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0310 	and.w	r3, r3, #16
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 80e4 	beq.w	80017e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d007      	beq.n	800162e <HAL_RCC_OscConfig+0x4a>
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	2b0c      	cmp	r3, #12
 8001622:	f040 808b 	bne.w	800173c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	2b01      	cmp	r3, #1
 800162a:	f040 8087 	bne.w	800173c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800162e:	4b89      	ldr	r3, [pc, #548]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d005      	beq.n	8001646 <HAL_RCC_OscConfig+0x62>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e3a2      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a1a      	ldr	r2, [r3, #32]
 800164a:	4b82      	ldr	r3, [pc, #520]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	2b00      	cmp	r3, #0
 8001654:	d004      	beq.n	8001660 <HAL_RCC_OscConfig+0x7c>
 8001656:	4b7f      	ldr	r3, [pc, #508]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800165e:	e005      	b.n	800166c <HAL_RCC_OscConfig+0x88>
 8001660:	4b7c      	ldr	r3, [pc, #496]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 8001662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800166c:	4293      	cmp	r3, r2
 800166e:	d223      	bcs.n	80016b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	4618      	mov	r0, r3
 8001676:	f000 fd55 	bl	8002124 <RCC_SetFlashLatencyFromMSIRange>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e383      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001684:	4b73      	ldr	r3, [pc, #460]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a72      	ldr	r2, [pc, #456]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 800168a:	f043 0308 	orr.w	r3, r3, #8
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	4b70      	ldr	r3, [pc, #448]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	496d      	ldr	r1, [pc, #436]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016a2:	4b6c      	ldr	r3, [pc, #432]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	021b      	lsls	r3, r3, #8
 80016b0:	4968      	ldr	r1, [pc, #416]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	604b      	str	r3, [r1, #4]
 80016b6:	e025      	b.n	8001704 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016b8:	4b66      	ldr	r3, [pc, #408]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a65      	ldr	r2, [pc, #404]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 80016be:	f043 0308 	orr.w	r3, r3, #8
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	4b63      	ldr	r3, [pc, #396]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	4960      	ldr	r1, [pc, #384]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016d6:	4b5f      	ldr	r3, [pc, #380]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	495b      	ldr	r1, [pc, #364]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d109      	bne.n	8001704 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 fd15 	bl	8002124 <RCC_SetFlashLatencyFromMSIRange>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e343      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001704:	f000 fc4a 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8001708:	4602      	mov	r2, r0
 800170a:	4b52      	ldr	r3, [pc, #328]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	091b      	lsrs	r3, r3, #4
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	4950      	ldr	r1, [pc, #320]	; (8001858 <HAL_RCC_OscConfig+0x274>)
 8001716:	5ccb      	ldrb	r3, [r1, r3]
 8001718:	f003 031f 	and.w	r3, r3, #31
 800171c:	fa22 f303 	lsr.w	r3, r2, r3
 8001720:	4a4e      	ldr	r2, [pc, #312]	; (800185c <HAL_RCC_OscConfig+0x278>)
 8001722:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001724:	4b4e      	ldr	r3, [pc, #312]	; (8001860 <HAL_RCC_OscConfig+0x27c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fb7f 	bl	8000e2c <HAL_InitTick>
 800172e:	4603      	mov	r3, r0
 8001730:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d052      	beq.n	80017de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	e327      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d032      	beq.n	80017aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001744:	4b43      	ldr	r3, [pc, #268]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a42      	ldr	r2, [pc, #264]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001750:	f7ff fbbc 	bl	8000ecc <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001758:	f7ff fbb8 	bl	8000ecc <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e310      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800176a:	4b3a      	ldr	r3, [pc, #232]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001776:	4b37      	ldr	r3, [pc, #220]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a36      	ldr	r2, [pc, #216]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 800177c:	f043 0308 	orr.w	r3, r3, #8
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	4b34      	ldr	r3, [pc, #208]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	4931      	ldr	r1, [pc, #196]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 8001790:	4313      	orrs	r3, r2
 8001792:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001794:	4b2f      	ldr	r3, [pc, #188]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	492c      	ldr	r1, [pc, #176]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]
 80017a8:	e01a      	b.n	80017e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017aa:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a29      	ldr	r2, [pc, #164]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 80017b0:	f023 0301 	bic.w	r3, r3, #1
 80017b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017b6:	f7ff fb89 	bl	8000ecc <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017be:	f7ff fb85 	bl	8000ecc <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e2dd      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017d0:	4b20      	ldr	r3, [pc, #128]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f0      	bne.n	80017be <HAL_RCC_OscConfig+0x1da>
 80017dc:	e000      	b.n	80017e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d074      	beq.n	80018d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d005      	beq.n	80017fe <HAL_RCC_OscConfig+0x21a>
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	2b0c      	cmp	r3, #12
 80017f6:	d10e      	bne.n	8001816 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d10b      	bne.n	8001816 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d064      	beq.n	80018d4 <HAL_RCC_OscConfig+0x2f0>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d160      	bne.n	80018d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e2ba      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800181e:	d106      	bne.n	800182e <HAL_RCC_OscConfig+0x24a>
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0b      	ldr	r2, [pc, #44]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 8001826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	e026      	b.n	800187c <HAL_RCC_OscConfig+0x298>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001836:	d115      	bne.n	8001864 <HAL_RCC_OscConfig+0x280>
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a05      	ldr	r2, [pc, #20]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 800183e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a02      	ldr	r2, [pc, #8]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 800184a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	e014      	b.n	800187c <HAL_RCC_OscConfig+0x298>
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000
 8001858:	08004124 	.word	0x08004124
 800185c:	20000000 	.word	0x20000000
 8001860:	20000004 	.word	0x20000004
 8001864:	4ba0      	ldr	r3, [pc, #640]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a9f      	ldr	r2, [pc, #636]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 800186a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b9d      	ldr	r3, [pc, #628]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a9c      	ldr	r2, [pc, #624]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 8001876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800187a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d013      	beq.n	80018ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff fb22 	bl	8000ecc <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff fb1e 	bl	8000ecc <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	; 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e276      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800189e:	4b92      	ldr	r3, [pc, #584]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x2a8>
 80018aa:	e014      	b.n	80018d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f7ff fb0e 	bl	8000ecc <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b4:	f7ff fb0a 	bl	8000ecc <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b64      	cmp	r3, #100	; 0x64
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e262      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018c6:	4b88      	ldr	r3, [pc, #544]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x2d0>
 80018d2:	e000      	b.n	80018d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d060      	beq.n	80019a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d005      	beq.n	80018f4 <HAL_RCC_OscConfig+0x310>
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2b0c      	cmp	r3, #12
 80018ec:	d119      	bne.n	8001922 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d116      	bne.n	8001922 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f4:	4b7c      	ldr	r3, [pc, #496]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_OscConfig+0x328>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e23f      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190c:	4b76      	ldr	r3, [pc, #472]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	061b      	lsls	r3, r3, #24
 800191a:	4973      	ldr	r1, [pc, #460]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001920:	e040      	b.n	80019a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d023      	beq.n	8001972 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800192a:	4b6f      	ldr	r3, [pc, #444]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a6e      	ldr	r2, [pc, #440]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 8001930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001936:	f7ff fac9 	bl	8000ecc <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800193e:	f7ff fac5 	bl	8000ecc <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e21d      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001950:	4b65      	ldr	r3, [pc, #404]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0f0      	beq.n	800193e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195c:	4b62      	ldr	r3, [pc, #392]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	061b      	lsls	r3, r3, #24
 800196a:	495f      	ldr	r1, [pc, #380]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 800196c:	4313      	orrs	r3, r2
 800196e:	604b      	str	r3, [r1, #4]
 8001970:	e018      	b.n	80019a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001972:	4b5d      	ldr	r3, [pc, #372]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a5c      	ldr	r2, [pc, #368]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 8001978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800197c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197e:	f7ff faa5 	bl	8000ecc <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001986:	f7ff faa1 	bl	8000ecc <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e1f9      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001998:	4b53      	ldr	r3, [pc, #332]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f0      	bne.n	8001986 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d03c      	beq.n	8001a2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d01c      	beq.n	80019f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b8:	4b4b      	ldr	r3, [pc, #300]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 80019ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019be:	4a4a      	ldr	r2, [pc, #296]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c8:	f7ff fa80 	bl	8000ecc <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d0:	f7ff fa7c 	bl	8000ecc <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e1d4      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019e2:	4b41      	ldr	r3, [pc, #260]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 80019e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0ef      	beq.n	80019d0 <HAL_RCC_OscConfig+0x3ec>
 80019f0:	e01b      	b.n	8001a2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f2:	4b3d      	ldr	r3, [pc, #244]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 80019f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f8:	4a3b      	ldr	r2, [pc, #236]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 80019fa:	f023 0301 	bic.w	r3, r3, #1
 80019fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a02:	f7ff fa63 	bl	8000ecc <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0a:	f7ff fa5f 	bl	8000ecc <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e1b7      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a1c:	4b32      	ldr	r3, [pc, #200]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 8001a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1ef      	bne.n	8001a0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0304 	and.w	r3, r3, #4
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 80a6 	beq.w	8001b84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10d      	bne.n	8001a64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a48:	4b27      	ldr	r3, [pc, #156]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4c:	4a26      	ldr	r2, [pc, #152]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 8001a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a52:	6593      	str	r3, [r2, #88]	; 0x58
 8001a54:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 8001a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a60:	2301      	movs	r3, #1
 8001a62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a64:	4b21      	ldr	r3, [pc, #132]	; (8001aec <HAL_RCC_OscConfig+0x508>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d118      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a70:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <HAL_RCC_OscConfig+0x508>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a1d      	ldr	r2, [pc, #116]	; (8001aec <HAL_RCC_OscConfig+0x508>)
 8001a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a7c:	f7ff fa26 	bl	8000ecc <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a84:	f7ff fa22 	bl	8000ecc <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e17a      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <HAL_RCC_OscConfig+0x508>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d108      	bne.n	8001abc <HAL_RCC_OscConfig+0x4d8>
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 8001aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aba:	e029      	b.n	8001b10 <HAL_RCC_OscConfig+0x52c>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2b05      	cmp	r3, #5
 8001ac2:	d115      	bne.n	8001af0 <HAL_RCC_OscConfig+0x50c>
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 8001ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aca:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ad4:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 8001ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ada:	4a03      	ldr	r2, [pc, #12]	; (8001ae8 <HAL_RCC_OscConfig+0x504>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ae4:	e014      	b.n	8001b10 <HAL_RCC_OscConfig+0x52c>
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40007000 	.word	0x40007000
 8001af0:	4b9c      	ldr	r3, [pc, #624]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af6:	4a9b      	ldr	r2, [pc, #620]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001af8:	f023 0301 	bic.w	r3, r3, #1
 8001afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b00:	4b98      	ldr	r3, [pc, #608]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b06:	4a97      	ldr	r2, [pc, #604]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001b08:	f023 0304 	bic.w	r3, r3, #4
 8001b0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d016      	beq.n	8001b46 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b18:	f7ff f9d8 	bl	8000ecc <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b1e:	e00a      	b.n	8001b36 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b20:	f7ff f9d4 	bl	8000ecc <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e12a      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b36:	4b8b      	ldr	r3, [pc, #556]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0ed      	beq.n	8001b20 <HAL_RCC_OscConfig+0x53c>
 8001b44:	e015      	b.n	8001b72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b46:	f7ff f9c1 	bl	8000ecc <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b4c:	e00a      	b.n	8001b64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4e:	f7ff f9bd 	bl	8000ecc <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e113      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b64:	4b7f      	ldr	r3, [pc, #508]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1ed      	bne.n	8001b4e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b72:	7ffb      	ldrb	r3, [r7, #31]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d105      	bne.n	8001b84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b78:	4b7a      	ldr	r3, [pc, #488]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7c:	4a79      	ldr	r2, [pc, #484]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b82:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 80fe 	beq.w	8001d8a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	f040 80d0 	bne.w	8001d38 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b98:	4b72      	ldr	r3, [pc, #456]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f003 0203 	and.w	r2, r3, #3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d130      	bne.n	8001c0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d127      	bne.n	8001c0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d11f      	bne.n	8001c0e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bd8:	2a07      	cmp	r2, #7
 8001bda:	bf14      	ite	ne
 8001bdc:	2201      	movne	r2, #1
 8001bde:	2200      	moveq	r2, #0
 8001be0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d113      	bne.n	8001c0e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf0:	085b      	lsrs	r3, r3, #1
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d109      	bne.n	8001c0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	085b      	lsrs	r3, r3, #1
 8001c06:	3b01      	subs	r3, #1
 8001c08:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d06e      	beq.n	8001cec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	2b0c      	cmp	r3, #12
 8001c12:	d069      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c14:	4b53      	ldr	r3, [pc, #332]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d105      	bne.n	8001c2c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c20:	4b50      	ldr	r3, [pc, #320]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0ad      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c30:	4b4c      	ldr	r3, [pc, #304]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a4b      	ldr	r2, [pc, #300]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c3a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c3c:	f7ff f946 	bl	8000ecc <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c44:	f7ff f942 	bl	8000ecc <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e09a      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c56:	4b43      	ldr	r3, [pc, #268]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c62:	4b40      	ldr	r3, [pc, #256]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	4b40      	ldr	r3, [pc, #256]	; (8001d68 <HAL_RCC_OscConfig+0x784>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c72:	3a01      	subs	r2, #1
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	4311      	orrs	r1, r2
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c7c:	0212      	lsls	r2, r2, #8
 8001c7e:	4311      	orrs	r1, r2
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c84:	0852      	lsrs	r2, r2, #1
 8001c86:	3a01      	subs	r2, #1
 8001c88:	0552      	lsls	r2, r2, #21
 8001c8a:	4311      	orrs	r1, r2
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c90:	0852      	lsrs	r2, r2, #1
 8001c92:	3a01      	subs	r2, #1
 8001c94:	0652      	lsls	r2, r2, #25
 8001c96:	4311      	orrs	r1, r2
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c9c:	0912      	lsrs	r2, r2, #4
 8001c9e:	0452      	lsls	r2, r2, #17
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	4930      	ldr	r1, [pc, #192]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ca8:	4b2e      	ldr	r3, [pc, #184]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a2d      	ldr	r2, [pc, #180]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cb2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cb4:	4b2b      	ldr	r3, [pc, #172]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	4a2a      	ldr	r2, [pc, #168]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cc0:	f7ff f904 	bl	8000ecc <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7ff f900 	bl	8000ecc <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e058      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cda:	4b22      	ldr	r3, [pc, #136]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ce6:	e050      	b.n	8001d8a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e04f      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cec:	4b1d      	ldr	r3, [pc, #116]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d148      	bne.n	8001d8a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cf8:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a19      	ldr	r2, [pc, #100]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d04:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	4a16      	ldr	r2, [pc, #88]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d10:	f7ff f8dc 	bl	8000ecc <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d18:	f7ff f8d8 	bl	8000ecc <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e030      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x734>
 8001d36:	e028      	b.n	8001d8a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	2b0c      	cmp	r3, #12
 8001d3c:	d023      	beq.n	8001d86 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a08      	ldr	r2, [pc, #32]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001d44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4a:	f7ff f8bf 	bl	8000ecc <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d50:	e00c      	b.n	8001d6c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d52:	f7ff f8bb 	bl	8000ecc <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d905      	bls.n	8001d6c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e013      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
 8001d64:	40021000 	.word	0x40021000
 8001d68:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_RCC_OscConfig+0x7b0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1ec      	bne.n	8001d52 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_RCC_OscConfig+0x7b0>)
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	4905      	ldr	r1, [pc, #20]	; (8001d94 <HAL_RCC_OscConfig+0x7b0>)
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_RCC_OscConfig+0x7b4>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	60cb      	str	r3, [r1, #12]
 8001d84:	e001      	b.n	8001d8a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3720      	adds	r7, #32
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40021000 	.word	0x40021000
 8001d98:	feeefffc 	.word	0xfeeefffc

08001d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0e7      	b.n	8001f80 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001db0:	4b75      	ldr	r3, [pc, #468]	; (8001f88 <HAL_RCC_ClockConfig+0x1ec>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d910      	bls.n	8001de0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dbe:	4b72      	ldr	r3, [pc, #456]	; (8001f88 <HAL_RCC_ClockConfig+0x1ec>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 0207 	bic.w	r2, r3, #7
 8001dc6:	4970      	ldr	r1, [pc, #448]	; (8001f88 <HAL_RCC_ClockConfig+0x1ec>)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dce:	4b6e      	ldr	r3, [pc, #440]	; (8001f88 <HAL_RCC_ClockConfig+0x1ec>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d001      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0cf      	b.n	8001f80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d010      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	4b66      	ldr	r3, [pc, #408]	; (8001f8c <HAL_RCC_ClockConfig+0x1f0>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d908      	bls.n	8001e0e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dfc:	4b63      	ldr	r3, [pc, #396]	; (8001f8c <HAL_RCC_ClockConfig+0x1f0>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	4960      	ldr	r1, [pc, #384]	; (8001f8c <HAL_RCC_ClockConfig+0x1f0>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d04c      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d107      	bne.n	8001e32 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e22:	4b5a      	ldr	r3, [pc, #360]	; (8001f8c <HAL_RCC_ClockConfig+0x1f0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d121      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e0a6      	b.n	8001f80 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d107      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e3a:	4b54      	ldr	r3, [pc, #336]	; (8001f8c <HAL_RCC_ClockConfig+0x1f0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d115      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e09a      	b.n	8001f80 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d107      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e52:	4b4e      	ldr	r3, [pc, #312]	; (8001f8c <HAL_RCC_ClockConfig+0x1f0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d109      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e08e      	b.n	8001f80 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e62:	4b4a      	ldr	r3, [pc, #296]	; (8001f8c <HAL_RCC_ClockConfig+0x1f0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e086      	b.n	8001f80 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e72:	4b46      	ldr	r3, [pc, #280]	; (8001f8c <HAL_RCC_ClockConfig+0x1f0>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f023 0203 	bic.w	r2, r3, #3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4943      	ldr	r1, [pc, #268]	; (8001f8c <HAL_RCC_ClockConfig+0x1f0>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e84:	f7ff f822 	bl	8000ecc <HAL_GetTick>
 8001e88:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e8c:	f7ff f81e 	bl	8000ecc <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e06e      	b.n	8001f80 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea2:	4b3a      	ldr	r3, [pc, #232]	; (8001f8c <HAL_RCC_ClockConfig+0x1f0>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 020c 	and.w	r2, r3, #12
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d1eb      	bne.n	8001e8c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d010      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	4b31      	ldr	r3, [pc, #196]	; (8001f8c <HAL_RCC_ClockConfig+0x1f0>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d208      	bcs.n	8001ee2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed0:	4b2e      	ldr	r3, [pc, #184]	; (8001f8c <HAL_RCC_ClockConfig+0x1f0>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	492b      	ldr	r1, [pc, #172]	; (8001f8c <HAL_RCC_ClockConfig+0x1f0>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee2:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <HAL_RCC_ClockConfig+0x1ec>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d210      	bcs.n	8001f12 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef0:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <HAL_RCC_ClockConfig+0x1ec>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f023 0207 	bic.w	r2, r3, #7
 8001ef8:	4923      	ldr	r1, [pc, #140]	; (8001f88 <HAL_RCC_ClockConfig+0x1ec>)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f00:	4b21      	ldr	r3, [pc, #132]	; (8001f88 <HAL_RCC_ClockConfig+0x1ec>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d001      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e036      	b.n	8001f80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d008      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <HAL_RCC_ClockConfig+0x1f0>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	4918      	ldr	r1, [pc, #96]	; (8001f8c <HAL_RCC_ClockConfig+0x1f0>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d009      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f3c:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <HAL_RCC_ClockConfig+0x1f0>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4910      	ldr	r1, [pc, #64]	; (8001f8c <HAL_RCC_ClockConfig+0x1f0>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f50:	f000 f824 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <HAL_RCC_ClockConfig+0x1f0>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	091b      	lsrs	r3, r3, #4
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	490b      	ldr	r1, [pc, #44]	; (8001f90 <HAL_RCC_ClockConfig+0x1f4>)
 8001f62:	5ccb      	ldrb	r3, [r1, r3]
 8001f64:	f003 031f 	and.w	r3, r3, #31
 8001f68:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6c:	4a09      	ldr	r2, [pc, #36]	; (8001f94 <HAL_RCC_ClockConfig+0x1f8>)
 8001f6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f70:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <HAL_RCC_ClockConfig+0x1fc>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe ff59 	bl	8000e2c <HAL_InitTick>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f7e:	7afb      	ldrb	r3, [r7, #11]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40022000 	.word	0x40022000
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	08004124 	.word	0x08004124
 8001f94:	20000000 	.word	0x20000000
 8001f98:	20000004 	.word	0x20000004

08001f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	; 0x24
 8001fa0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001faa:	4b3e      	ldr	r3, [pc, #248]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fb4:	4b3b      	ldr	r3, [pc, #236]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x34>
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	2b0c      	cmp	r3, #12
 8001fc8:	d121      	bne.n	800200e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d11e      	bne.n	800200e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fd0:	4b34      	ldr	r3, [pc, #208]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d107      	bne.n	8001fec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fdc:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe2:	0a1b      	lsrs	r3, r3, #8
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	61fb      	str	r3, [r7, #28]
 8001fea:	e005      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fec:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ff8:	4a2b      	ldr	r2, [pc, #172]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002000:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10d      	bne.n	8002024 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800200c:	e00a      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b04      	cmp	r3, #4
 8002012:	d102      	bne.n	800201a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002014:	4b25      	ldr	r3, [pc, #148]	; (80020ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002016:	61bb      	str	r3, [r7, #24]
 8002018:	e004      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	2b08      	cmp	r3, #8
 800201e:	d101      	bne.n	8002024 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002020:	4b23      	ldr	r3, [pc, #140]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002022:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	2b0c      	cmp	r3, #12
 8002028:	d134      	bne.n	8002094 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800202a:	4b1e      	ldr	r3, [pc, #120]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d003      	beq.n	8002042 <HAL_RCC_GetSysClockFreq+0xa6>
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b03      	cmp	r3, #3
 800203e:	d003      	beq.n	8002048 <HAL_RCC_GetSysClockFreq+0xac>
 8002040:	e005      	b.n	800204e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002042:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002044:	617b      	str	r3, [r7, #20]
      break;
 8002046:	e005      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002048:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800204a:	617b      	str	r3, [r7, #20]
      break;
 800204c:	e002      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	617b      	str	r3, [r7, #20]
      break;
 8002052:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002054:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	3301      	adds	r3, #1
 8002060:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002062:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	0a1b      	lsrs	r3, r3, #8
 8002068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	fb03 f202 	mul.w	r2, r3, r2
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	fbb2 f3f3 	udiv	r3, r2, r3
 8002078:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	0e5b      	lsrs	r3, r3, #25
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	3301      	adds	r3, #1
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002092:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002094:	69bb      	ldr	r3, [r7, #24]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3724      	adds	r7, #36	; 0x24
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
 80020a8:	0800413c 	.word	0x0800413c
 80020ac:	00f42400 	.word	0x00f42400
 80020b0:	007a1200 	.word	0x007a1200

080020b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020b8:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020ba:	681b      	ldr	r3, [r3, #0]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	20000000 	.word	0x20000000

080020cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020d0:	f7ff fff0 	bl	80020b4 <HAL_RCC_GetHCLKFreq>
 80020d4:	4602      	mov	r2, r0
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	0a1b      	lsrs	r3, r3, #8
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	4904      	ldr	r1, [pc, #16]	; (80020f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020e2:	5ccb      	ldrb	r3, [r1, r3]
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40021000 	.word	0x40021000
 80020f4:	08004134 	.word	0x08004134

080020f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020fc:	f7ff ffda 	bl	80020b4 <HAL_RCC_GetHCLKFreq>
 8002100:	4602      	mov	r2, r0
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	0adb      	lsrs	r3, r3, #11
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	4904      	ldr	r1, [pc, #16]	; (8002120 <HAL_RCC_GetPCLK2Freq+0x28>)
 800210e:	5ccb      	ldrb	r3, [r1, r3]
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002118:	4618      	mov	r0, r3
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	08004134 	.word	0x08004134

08002124 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800212c:	2300      	movs	r3, #0
 800212e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002130:	4b2a      	ldr	r3, [pc, #168]	; (80021dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800213c:	f7ff f9ee 	bl	800151c <HAL_PWREx_GetVoltageRange>
 8002140:	6178      	str	r0, [r7, #20]
 8002142:	e014      	b.n	800216e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002144:	4b25      	ldr	r3, [pc, #148]	; (80021dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002148:	4a24      	ldr	r2, [pc, #144]	; (80021dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800214a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214e:	6593      	str	r3, [r2, #88]	; 0x58
 8002150:	4b22      	ldr	r3, [pc, #136]	; (80021dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800215c:	f7ff f9de 	bl	800151c <HAL_PWREx_GetVoltageRange>
 8002160:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002162:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002166:	4a1d      	ldr	r2, [pc, #116]	; (80021dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800216c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002174:	d10b      	bne.n	800218e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b80      	cmp	r3, #128	; 0x80
 800217a:	d919      	bls.n	80021b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2ba0      	cmp	r3, #160	; 0xa0
 8002180:	d902      	bls.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002182:	2302      	movs	r3, #2
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	e013      	b.n	80021b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002188:	2301      	movs	r3, #1
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	e010      	b.n	80021b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b80      	cmp	r3, #128	; 0x80
 8002192:	d902      	bls.n	800219a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002194:	2303      	movs	r3, #3
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	e00a      	b.n	80021b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b80      	cmp	r3, #128	; 0x80
 800219e:	d102      	bne.n	80021a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021a0:	2302      	movs	r3, #2
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	e004      	b.n	80021b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b70      	cmp	r3, #112	; 0x70
 80021aa:	d101      	bne.n	80021b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021ac:	2301      	movs	r3, #1
 80021ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f023 0207 	bic.w	r2, r3, #7
 80021b8:	4909      	ldr	r1, [pc, #36]	; (80021e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021c0:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d001      	beq.n	80021d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40022000 	.word	0x40022000

080021e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021ec:	2300      	movs	r3, #0
 80021ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021f0:	2300      	movs	r3, #0
 80021f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d041      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002204:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002208:	d02a      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800220a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800220e:	d824      	bhi.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002210:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002214:	d008      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002216:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800221a:	d81e      	bhi.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00a      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002220:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002224:	d010      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002226:	e018      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002228:	4b86      	ldr	r3, [pc, #536]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	4a85      	ldr	r2, [pc, #532]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002232:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002234:	e015      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3304      	adds	r3, #4
 800223a:	2100      	movs	r1, #0
 800223c:	4618      	mov	r0, r3
 800223e:	f000 fabb 	bl	80027b8 <RCCEx_PLLSAI1_Config>
 8002242:	4603      	mov	r3, r0
 8002244:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002246:	e00c      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3320      	adds	r3, #32
 800224c:	2100      	movs	r1, #0
 800224e:	4618      	mov	r0, r3
 8002250:	f000 fba6 	bl	80029a0 <RCCEx_PLLSAI2_Config>
 8002254:	4603      	mov	r3, r0
 8002256:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002258:	e003      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	74fb      	strb	r3, [r7, #19]
      break;
 800225e:	e000      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002260:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002262:	7cfb      	ldrb	r3, [r7, #19]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10b      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002268:	4b76      	ldr	r3, [pc, #472]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002276:	4973      	ldr	r1, [pc, #460]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800227e:	e001      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002280:	7cfb      	ldrb	r3, [r7, #19]
 8002282:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d041      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002294:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002298:	d02a      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800229a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800229e:	d824      	bhi.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022a4:	d008      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022aa:	d81e      	bhi.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00a      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80022b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022b4:	d010      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022b6:	e018      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022b8:	4b62      	ldr	r3, [pc, #392]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	4a61      	ldr	r2, [pc, #388]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022c4:	e015      	b.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3304      	adds	r3, #4
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 fa73 	bl	80027b8 <RCCEx_PLLSAI1_Config>
 80022d2:	4603      	mov	r3, r0
 80022d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022d6:	e00c      	b.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3320      	adds	r3, #32
 80022dc:	2100      	movs	r1, #0
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fb5e 	bl	80029a0 <RCCEx_PLLSAI2_Config>
 80022e4:	4603      	mov	r3, r0
 80022e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022e8:	e003      	b.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	74fb      	strb	r3, [r7, #19]
      break;
 80022ee:	e000      	b.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80022f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022f2:	7cfb      	ldrb	r3, [r7, #19]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10b      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022f8:	4b52      	ldr	r3, [pc, #328]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002306:	494f      	ldr	r1, [pc, #316]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800230e:	e001      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80a0 	beq.w	8002462 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002322:	2300      	movs	r3, #0
 8002324:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002326:	4b47      	ldr	r3, [pc, #284]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002336:	2300      	movs	r3, #0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00d      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800233c:	4b41      	ldr	r3, [pc, #260]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002340:	4a40      	ldr	r2, [pc, #256]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002346:	6593      	str	r3, [r2, #88]	; 0x58
 8002348:	4b3e      	ldr	r3, [pc, #248]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800234a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002354:	2301      	movs	r3, #1
 8002356:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002358:	4b3b      	ldr	r3, [pc, #236]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a3a      	ldr	r2, [pc, #232]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800235e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002362:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002364:	f7fe fdb2 	bl	8000ecc <HAL_GetTick>
 8002368:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800236a:	e009      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236c:	f7fe fdae 	bl	8000ecc <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d902      	bls.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	74fb      	strb	r3, [r7, #19]
        break;
 800237e:	e005      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002380:	4b31      	ldr	r3, [pc, #196]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0ef      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800238c:	7cfb      	ldrb	r3, [r7, #19]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d15c      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002392:	4b2c      	ldr	r3, [pc, #176]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800239c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d01f      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d019      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023b0:	4b24      	ldr	r3, [pc, #144]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023bc:	4b21      	ldr	r3, [pc, #132]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c2:	4a20      	ldr	r2, [pc, #128]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023cc:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d2:	4a1c      	ldr	r2, [pc, #112]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023dc:	4a19      	ldr	r2, [pc, #100]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d016      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ee:	f7fe fd6d 	bl	8000ecc <HAL_GetTick>
 80023f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f4:	e00b      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f6:	f7fe fd69 	bl	8000ecc <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	f241 3288 	movw	r2, #5000	; 0x1388
 8002404:	4293      	cmp	r3, r2
 8002406:	d902      	bls.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	74fb      	strb	r3, [r7, #19]
            break;
 800240c:	e006      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800240e:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0ec      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800241c:	7cfb      	ldrb	r3, [r7, #19]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10c      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002428:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002432:	4904      	ldr	r1, [pc, #16]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800243a:	e009      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800243c:	7cfb      	ldrb	r3, [r7, #19]
 800243e:	74bb      	strb	r3, [r7, #18]
 8002440:	e006      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800244c:	7cfb      	ldrb	r3, [r7, #19]
 800244e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002450:	7c7b      	ldrb	r3, [r7, #17]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d105      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002456:	4b9e      	ldr	r3, [pc, #632]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245a:	4a9d      	ldr	r2, [pc, #628]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002460:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800246e:	4b98      	ldr	r3, [pc, #608]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002474:	f023 0203 	bic.w	r2, r3, #3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247c:	4994      	ldr	r1, [pc, #592]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002490:	4b8f      	ldr	r3, [pc, #572]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002496:	f023 020c 	bic.w	r2, r3, #12
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249e:	498c      	ldr	r1, [pc, #560]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024b2:	4b87      	ldr	r3, [pc, #540]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	4983      	ldr	r1, [pc, #524]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024d4:	4b7e      	ldr	r3, [pc, #504]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	497b      	ldr	r1, [pc, #492]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0310 	and.w	r3, r3, #16
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024f6:	4b76      	ldr	r3, [pc, #472]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002504:	4972      	ldr	r1, [pc, #456]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002518:	4b6d      	ldr	r3, [pc, #436]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002526:	496a      	ldr	r1, [pc, #424]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800253a:	4b65      	ldr	r3, [pc, #404]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002540:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002548:	4961      	ldr	r1, [pc, #388]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800255c:	4b5c      	ldr	r3, [pc, #368]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002562:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800256a:	4959      	ldr	r1, [pc, #356]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800257e:	4b54      	ldr	r3, [pc, #336]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002584:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800258c:	4950      	ldr	r1, [pc, #320]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00a      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025a0:	4b4b      	ldr	r3, [pc, #300]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ae:	4948      	ldr	r1, [pc, #288]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025c2:	4b43      	ldr	r3, [pc, #268]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d0:	493f      	ldr	r1, [pc, #252]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d028      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025e4:	4b3a      	ldr	r3, [pc, #232]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025f2:	4937      	ldr	r1, [pc, #220]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002602:	d106      	bne.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002604:	4b32      	ldr	r3, [pc, #200]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4a31      	ldr	r2, [pc, #196]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800260e:	60d3      	str	r3, [r2, #12]
 8002610:	e011      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002616:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800261a:	d10c      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3304      	adds	r3, #4
 8002620:	2101      	movs	r1, #1
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f8c8 	bl	80027b8 <RCCEx_PLLSAI1_Config>
 8002628:	4603      	mov	r3, r0
 800262a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800262c:	7cfb      	ldrb	r3, [r7, #19]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002632:	7cfb      	ldrb	r3, [r7, #19]
 8002634:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d028      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002642:	4b23      	ldr	r3, [pc, #140]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002648:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002650:	491f      	ldr	r1, [pc, #124]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002660:	d106      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002662:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	4a1a      	ldr	r2, [pc, #104]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800266c:	60d3      	str	r3, [r2, #12]
 800266e:	e011      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002674:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002678:	d10c      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3304      	adds	r3, #4
 800267e:	2101      	movs	r1, #1
 8002680:	4618      	mov	r0, r3
 8002682:	f000 f899 	bl	80027b8 <RCCEx_PLLSAI1_Config>
 8002686:	4603      	mov	r3, r0
 8002688:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800268a:	7cfb      	ldrb	r3, [r7, #19]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002690:	7cfb      	ldrb	r3, [r7, #19]
 8002692:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d02b      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026a0:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ae:	4908      	ldr	r1, [pc, #32]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026be:	d109      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026c0:	4b03      	ldr	r3, [pc, #12]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4a02      	ldr	r2, [pc, #8]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ca:	60d3      	str	r3, [r2, #12]
 80026cc:	e014      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3304      	adds	r3, #4
 80026e2:	2101      	movs	r1, #1
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 f867 	bl	80027b8 <RCCEx_PLLSAI1_Config>
 80026ea:	4603      	mov	r3, r0
 80026ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026ee:	7cfb      	ldrb	r3, [r7, #19]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80026f4:	7cfb      	ldrb	r3, [r7, #19]
 80026f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d02f      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002704:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002712:	4928      	ldr	r1, [pc, #160]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800271e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002722:	d10d      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3304      	adds	r3, #4
 8002728:	2102      	movs	r1, #2
 800272a:	4618      	mov	r0, r3
 800272c:	f000 f844 	bl	80027b8 <RCCEx_PLLSAI1_Config>
 8002730:	4603      	mov	r3, r0
 8002732:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002734:	7cfb      	ldrb	r3, [r7, #19]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d014      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800273a:	7cfb      	ldrb	r3, [r7, #19]
 800273c:	74bb      	strb	r3, [r7, #18]
 800273e:	e011      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002748:	d10c      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3320      	adds	r3, #32
 800274e:	2102      	movs	r1, #2
 8002750:	4618      	mov	r0, r3
 8002752:	f000 f925 	bl	80029a0 <RCCEx_PLLSAI2_Config>
 8002756:	4603      	mov	r3, r0
 8002758:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800275a:	7cfb      	ldrb	r3, [r7, #19]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00a      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002770:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002776:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800277e:	490d      	ldr	r1, [pc, #52]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002780:	4313      	orrs	r3, r2
 8002782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00b      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002798:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027a2:	4904      	ldr	r1, [pc, #16]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40021000 	.word	0x40021000

080027b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027c6:	4b75      	ldr	r3, [pc, #468]	; (800299c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d018      	beq.n	8002804 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027d2:	4b72      	ldr	r3, [pc, #456]	; (800299c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f003 0203 	and.w	r2, r3, #3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d10d      	bne.n	80027fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
       ||
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d009      	beq.n	80027fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027ea:	4b6c      	ldr	r3, [pc, #432]	; (800299c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	091b      	lsrs	r3, r3, #4
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
       ||
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d047      	beq.n	800288e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	73fb      	strb	r3, [r7, #15]
 8002802:	e044      	b.n	800288e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b03      	cmp	r3, #3
 800280a:	d018      	beq.n	800283e <RCCEx_PLLSAI1_Config+0x86>
 800280c:	2b03      	cmp	r3, #3
 800280e:	d825      	bhi.n	800285c <RCCEx_PLLSAI1_Config+0xa4>
 8002810:	2b01      	cmp	r3, #1
 8002812:	d002      	beq.n	800281a <RCCEx_PLLSAI1_Config+0x62>
 8002814:	2b02      	cmp	r3, #2
 8002816:	d009      	beq.n	800282c <RCCEx_PLLSAI1_Config+0x74>
 8002818:	e020      	b.n	800285c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800281a:	4b60      	ldr	r3, [pc, #384]	; (800299c <RCCEx_PLLSAI1_Config+0x1e4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d11d      	bne.n	8002862 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800282a:	e01a      	b.n	8002862 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800282c:	4b5b      	ldr	r3, [pc, #364]	; (800299c <RCCEx_PLLSAI1_Config+0x1e4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002834:	2b00      	cmp	r3, #0
 8002836:	d116      	bne.n	8002866 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800283c:	e013      	b.n	8002866 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800283e:	4b57      	ldr	r3, [pc, #348]	; (800299c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10f      	bne.n	800286a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800284a:	4b54      	ldr	r3, [pc, #336]	; (800299c <RCCEx_PLLSAI1_Config+0x1e4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d109      	bne.n	800286a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800285a:	e006      	b.n	800286a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
      break;
 8002860:	e004      	b.n	800286c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002862:	bf00      	nop
 8002864:	e002      	b.n	800286c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002866:	bf00      	nop
 8002868:	e000      	b.n	800286c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800286a:	bf00      	nop
    }

    if(status == HAL_OK)
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10d      	bne.n	800288e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002872:	4b4a      	ldr	r3, [pc, #296]	; (800299c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6819      	ldr	r1, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	3b01      	subs	r3, #1
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	430b      	orrs	r3, r1
 8002888:	4944      	ldr	r1, [pc, #272]	; (800299c <RCCEx_PLLSAI1_Config+0x1e4>)
 800288a:	4313      	orrs	r3, r2
 800288c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d17d      	bne.n	8002990 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002894:	4b41      	ldr	r3, [pc, #260]	; (800299c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a40      	ldr	r2, [pc, #256]	; (800299c <RCCEx_PLLSAI1_Config+0x1e4>)
 800289a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800289e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a0:	f7fe fb14 	bl	8000ecc <HAL_GetTick>
 80028a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028a6:	e009      	b.n	80028bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028a8:	f7fe fb10 	bl	8000ecc <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d902      	bls.n	80028bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	73fb      	strb	r3, [r7, #15]
        break;
 80028ba:	e005      	b.n	80028c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028bc:	4b37      	ldr	r3, [pc, #220]	; (800299c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1ef      	bne.n	80028a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d160      	bne.n	8002990 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d111      	bne.n	80028f8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028d4:	4b31      	ldr	r3, [pc, #196]	; (800299c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6892      	ldr	r2, [r2, #8]
 80028e4:	0211      	lsls	r1, r2, #8
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	68d2      	ldr	r2, [r2, #12]
 80028ea:	0912      	lsrs	r2, r2, #4
 80028ec:	0452      	lsls	r2, r2, #17
 80028ee:	430a      	orrs	r2, r1
 80028f0:	492a      	ldr	r1, [pc, #168]	; (800299c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	610b      	str	r3, [r1, #16]
 80028f6:	e027      	b.n	8002948 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d112      	bne.n	8002924 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028fe:	4b27      	ldr	r3, [pc, #156]	; (800299c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002906:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6892      	ldr	r2, [r2, #8]
 800290e:	0211      	lsls	r1, r2, #8
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6912      	ldr	r2, [r2, #16]
 8002914:	0852      	lsrs	r2, r2, #1
 8002916:	3a01      	subs	r2, #1
 8002918:	0552      	lsls	r2, r2, #21
 800291a:	430a      	orrs	r2, r1
 800291c:	491f      	ldr	r1, [pc, #124]	; (800299c <RCCEx_PLLSAI1_Config+0x1e4>)
 800291e:	4313      	orrs	r3, r2
 8002920:	610b      	str	r3, [r1, #16]
 8002922:	e011      	b.n	8002948 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002924:	4b1d      	ldr	r3, [pc, #116]	; (800299c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800292c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6892      	ldr	r2, [r2, #8]
 8002934:	0211      	lsls	r1, r2, #8
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6952      	ldr	r2, [r2, #20]
 800293a:	0852      	lsrs	r2, r2, #1
 800293c:	3a01      	subs	r2, #1
 800293e:	0652      	lsls	r2, r2, #25
 8002940:	430a      	orrs	r2, r1
 8002942:	4916      	ldr	r1, [pc, #88]	; (800299c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002944:	4313      	orrs	r3, r2
 8002946:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002948:	4b14      	ldr	r3, [pc, #80]	; (800299c <RCCEx_PLLSAI1_Config+0x1e4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a13      	ldr	r2, [pc, #76]	; (800299c <RCCEx_PLLSAI1_Config+0x1e4>)
 800294e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002952:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002954:	f7fe faba 	bl	8000ecc <HAL_GetTick>
 8002958:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800295a:	e009      	b.n	8002970 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800295c:	f7fe fab6 	bl	8000ecc <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d902      	bls.n	8002970 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	73fb      	strb	r3, [r7, #15]
          break;
 800296e:	e005      	b.n	800297c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0ef      	beq.n	800295c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002984:	691a      	ldr	r2, [r3, #16]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	4904      	ldr	r1, [pc, #16]	; (800299c <RCCEx_PLLSAI1_Config+0x1e4>)
 800298c:	4313      	orrs	r3, r2
 800298e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002990:	7bfb      	ldrb	r3, [r7, #15]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000

080029a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029ae:	4b6a      	ldr	r3, [pc, #424]	; (8002b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d018      	beq.n	80029ec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80029ba:	4b67      	ldr	r3, [pc, #412]	; (8002b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f003 0203 	and.w	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d10d      	bne.n	80029e6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
       ||
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029d2:	4b61      	ldr	r3, [pc, #388]	; (8002b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	091b      	lsrs	r3, r3, #4
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
       ||
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d047      	beq.n	8002a76 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	73fb      	strb	r3, [r7, #15]
 80029ea:	e044      	b.n	8002a76 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d018      	beq.n	8002a26 <RCCEx_PLLSAI2_Config+0x86>
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d825      	bhi.n	8002a44 <RCCEx_PLLSAI2_Config+0xa4>
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d002      	beq.n	8002a02 <RCCEx_PLLSAI2_Config+0x62>
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d009      	beq.n	8002a14 <RCCEx_PLLSAI2_Config+0x74>
 8002a00:	e020      	b.n	8002a44 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a02:	4b55      	ldr	r3, [pc, #340]	; (8002b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d11d      	bne.n	8002a4a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a12:	e01a      	b.n	8002a4a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a14:	4b50      	ldr	r3, [pc, #320]	; (8002b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d116      	bne.n	8002a4e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a24:	e013      	b.n	8002a4e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a26:	4b4c      	ldr	r3, [pc, #304]	; (8002b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10f      	bne.n	8002a52 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a32:	4b49      	ldr	r3, [pc, #292]	; (8002b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a42:	e006      	b.n	8002a52 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
      break;
 8002a48:	e004      	b.n	8002a54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a4a:	bf00      	nop
 8002a4c:	e002      	b.n	8002a54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a4e:	bf00      	nop
 8002a50:	e000      	b.n	8002a54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a52:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10d      	bne.n	8002a76 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a5a:	4b3f      	ldr	r3, [pc, #252]	; (8002b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6819      	ldr	r1, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	430b      	orrs	r3, r1
 8002a70:	4939      	ldr	r1, [pc, #228]	; (8002b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d167      	bne.n	8002b4c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a7c:	4b36      	ldr	r3, [pc, #216]	; (8002b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a35      	ldr	r2, [pc, #212]	; (8002b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a88:	f7fe fa20 	bl	8000ecc <HAL_GetTick>
 8002a8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a8e:	e009      	b.n	8002aa4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a90:	f7fe fa1c 	bl	8000ecc <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d902      	bls.n	8002aa4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	73fb      	strb	r3, [r7, #15]
        break;
 8002aa2:	e005      	b.n	8002ab0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002aa4:	4b2c      	ldr	r3, [pc, #176]	; (8002b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1ef      	bne.n	8002a90 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d14a      	bne.n	8002b4c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d111      	bne.n	8002ae0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002abc:	4b26      	ldr	r3, [pc, #152]	; (8002b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6892      	ldr	r2, [r2, #8]
 8002acc:	0211      	lsls	r1, r2, #8
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68d2      	ldr	r2, [r2, #12]
 8002ad2:	0912      	lsrs	r2, r2, #4
 8002ad4:	0452      	lsls	r2, r2, #17
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	491f      	ldr	r1, [pc, #124]	; (8002b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	614b      	str	r3, [r1, #20]
 8002ade:	e011      	b.n	8002b04 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ae8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6892      	ldr	r2, [r2, #8]
 8002af0:	0211      	lsls	r1, r2, #8
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6912      	ldr	r2, [r2, #16]
 8002af6:	0852      	lsrs	r2, r2, #1
 8002af8:	3a01      	subs	r2, #1
 8002afa:	0652      	lsls	r2, r2, #25
 8002afc:	430a      	orrs	r2, r1
 8002afe:	4916      	ldr	r1, [pc, #88]	; (8002b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b04:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a13      	ldr	r2, [pc, #76]	; (8002b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b10:	f7fe f9dc 	bl	8000ecc <HAL_GetTick>
 8002b14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b16:	e009      	b.n	8002b2c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b18:	f7fe f9d8 	bl	8000ecc <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d902      	bls.n	8002b2c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	73fb      	strb	r3, [r7, #15]
          break;
 8002b2a:	e005      	b.n	8002b38 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b2c:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0ef      	beq.n	8002b18 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b40:	695a      	ldr	r2, [r3, #20]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	4904      	ldr	r1, [pc, #16]	; (8002b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000

08002b5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e040      	b.n	8002bf0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d106      	bne.n	8002b84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7fe f818 	bl	8000bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2224      	movs	r2, #36	; 0x24
 8002b88:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0201 	bic.w	r2, r2, #1
 8002b98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f992 	bl	8002ec4 <UART_SetConfig>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e022      	b.n	8002bf0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fc3e 	bl	8003434 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 fcc5 	bl	8003578 <UART_CheckIdleState>
 8002bee:	4603      	mov	r3, r0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08a      	sub	sp, #40	; 0x28
 8002bfc:	af02      	add	r7, sp, #8
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	4613      	mov	r3, r2
 8002c06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	f040 8082 	bne.w	8002d16 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <HAL_UART_Transmit+0x26>
 8002c18:	88fb      	ldrh	r3, [r7, #6]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e07a      	b.n	8002d18 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_UART_Transmit+0x38>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e073      	b.n	8002d18 <HAL_UART_Transmit+0x120>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2221      	movs	r2, #33	; 0x21
 8002c44:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c46:	f7fe f941 	bl	8000ecc <HAL_GetTick>
 8002c4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	88fa      	ldrh	r2, [r7, #6]
 8002c50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	88fa      	ldrh	r2, [r7, #6]
 8002c58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c64:	d108      	bne.n	8002c78 <HAL_UART_Transmit+0x80>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d104      	bne.n	8002c78 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	61bb      	str	r3, [r7, #24]
 8002c76:	e003      	b.n	8002c80 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002c88:	e02d      	b.n	8002ce6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2200      	movs	r2, #0
 8002c92:	2180      	movs	r1, #128	; 0x80
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fcb8 	bl	800360a <UART_WaitOnFlagUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e039      	b.n	8002d18 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10b      	bne.n	8002cc2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	881a      	ldrh	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cb6:	b292      	uxth	r2, r2
 8002cb8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	61bb      	str	r3, [r7, #24]
 8002cc0:	e008      	b.n	8002cd4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	781a      	ldrb	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	b292      	uxth	r2, r2
 8002ccc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1cb      	bne.n	8002c8a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2140      	movs	r1, #64	; 0x40
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 fc84 	bl	800360a <UART_WaitOnFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e005      	b.n	8002d18 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	e000      	b.n	8002d18 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002d16:	2302      	movs	r3, #2
  }
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3720      	adds	r7, #32
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08a      	sub	sp, #40	; 0x28
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	f040 80bf 	bne.w	8002eb8 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <HAL_UART_Receive+0x26>
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e0b7      	b.n	8002eba <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_UART_Receive+0x38>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e0b0      	b.n	8002eba <HAL_UART_Receive+0x19a>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2222      	movs	r2, #34	; 0x22
 8002d6c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d74:	f7fe f8aa 	bl	8000ecc <HAL_GetTick>
 8002d78:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	88fa      	ldrh	r2, [r7, #6]
 8002d7e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	88fa      	ldrh	r2, [r7, #6]
 8002d86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d92:	d10e      	bne.n	8002db2 <HAL_UART_Receive+0x92>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d105      	bne.n	8002da8 <HAL_UART_Receive+0x88>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002da2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002da6:	e02d      	b.n	8002e04 <HAL_UART_Receive+0xe4>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	22ff      	movs	r2, #255	; 0xff
 8002dac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002db0:	e028      	b.n	8002e04 <HAL_UART_Receive+0xe4>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10d      	bne.n	8002dd6 <HAL_UART_Receive+0xb6>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d104      	bne.n	8002dcc <HAL_UART_Receive+0xac>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	22ff      	movs	r2, #255	; 0xff
 8002dc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002dca:	e01b      	b.n	8002e04 <HAL_UART_Receive+0xe4>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	227f      	movs	r2, #127	; 0x7f
 8002dd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002dd4:	e016      	b.n	8002e04 <HAL_UART_Receive+0xe4>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dde:	d10d      	bne.n	8002dfc <HAL_UART_Receive+0xdc>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d104      	bne.n	8002df2 <HAL_UART_Receive+0xd2>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	227f      	movs	r2, #127	; 0x7f
 8002dec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002df0:	e008      	b.n	8002e04 <HAL_UART_Receive+0xe4>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	223f      	movs	r2, #63	; 0x3f
 8002df6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002dfa:	e003      	b.n	8002e04 <HAL_UART_Receive+0xe4>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002e0a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e14:	d108      	bne.n	8002e28 <HAL_UART_Receive+0x108>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d104      	bne.n	8002e28 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	61bb      	str	r3, [r7, #24]
 8002e26:	e003      	b.n	8002e30 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002e38:	e033      	b.n	8002ea2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2200      	movs	r2, #0
 8002e42:	2120      	movs	r1, #32
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 fbe0 	bl	800360a <UART_WaitOnFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e032      	b.n	8002eba <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10c      	bne.n	8002e74 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	8a7b      	ldrh	r3, [r7, #18]
 8002e64:	4013      	ands	r3, r2
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	3302      	adds	r3, #2
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	e00d      	b.n	8002e90 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	8a7b      	ldrh	r3, [r7, #18]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	4013      	ands	r3, r2
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1c5      	bne.n	8002e3a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	e000      	b.n	8002eba <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002eb8:	2302      	movs	r3, #2
  }
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3720      	adds	r7, #32
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ec8:	b08a      	sub	sp, #40	; 0x28
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	431a      	orrs	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	4ba4      	ldr	r3, [pc, #656]	; (8003184 <UART_SetConfig+0x2c0>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	6812      	ldr	r2, [r2, #0]
 8002efa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002efc:	430b      	orrs	r3, r1
 8002efe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a99      	ldr	r2, [pc, #612]	; (8003188 <UART_SetConfig+0x2c4>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d004      	beq.n	8002f30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f40:	430a      	orrs	r2, r1
 8002f42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a90      	ldr	r2, [pc, #576]	; (800318c <UART_SetConfig+0x2c8>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d126      	bne.n	8002f9c <UART_SetConfig+0xd8>
 8002f4e:	4b90      	ldr	r3, [pc, #576]	; (8003190 <UART_SetConfig+0x2cc>)
 8002f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d81b      	bhi.n	8002f94 <UART_SetConfig+0xd0>
 8002f5c:	a201      	add	r2, pc, #4	; (adr r2, 8002f64 <UART_SetConfig+0xa0>)
 8002f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f62:	bf00      	nop
 8002f64:	08002f75 	.word	0x08002f75
 8002f68:	08002f85 	.word	0x08002f85
 8002f6c:	08002f7d 	.word	0x08002f7d
 8002f70:	08002f8d 	.word	0x08002f8d
 8002f74:	2301      	movs	r3, #1
 8002f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f7a:	e116      	b.n	80031aa <UART_SetConfig+0x2e6>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f82:	e112      	b.n	80031aa <UART_SetConfig+0x2e6>
 8002f84:	2304      	movs	r3, #4
 8002f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f8a:	e10e      	b.n	80031aa <UART_SetConfig+0x2e6>
 8002f8c:	2308      	movs	r3, #8
 8002f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f92:	e10a      	b.n	80031aa <UART_SetConfig+0x2e6>
 8002f94:	2310      	movs	r3, #16
 8002f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f9a:	e106      	b.n	80031aa <UART_SetConfig+0x2e6>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a7c      	ldr	r2, [pc, #496]	; (8003194 <UART_SetConfig+0x2d0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d138      	bne.n	8003018 <UART_SetConfig+0x154>
 8002fa6:	4b7a      	ldr	r3, [pc, #488]	; (8003190 <UART_SetConfig+0x2cc>)
 8002fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fac:	f003 030c 	and.w	r3, r3, #12
 8002fb0:	2b0c      	cmp	r3, #12
 8002fb2:	d82d      	bhi.n	8003010 <UART_SetConfig+0x14c>
 8002fb4:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <UART_SetConfig+0xf8>)
 8002fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fba:	bf00      	nop
 8002fbc:	08002ff1 	.word	0x08002ff1
 8002fc0:	08003011 	.word	0x08003011
 8002fc4:	08003011 	.word	0x08003011
 8002fc8:	08003011 	.word	0x08003011
 8002fcc:	08003001 	.word	0x08003001
 8002fd0:	08003011 	.word	0x08003011
 8002fd4:	08003011 	.word	0x08003011
 8002fd8:	08003011 	.word	0x08003011
 8002fdc:	08002ff9 	.word	0x08002ff9
 8002fe0:	08003011 	.word	0x08003011
 8002fe4:	08003011 	.word	0x08003011
 8002fe8:	08003011 	.word	0x08003011
 8002fec:	08003009 	.word	0x08003009
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ff6:	e0d8      	b.n	80031aa <UART_SetConfig+0x2e6>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ffe:	e0d4      	b.n	80031aa <UART_SetConfig+0x2e6>
 8003000:	2304      	movs	r3, #4
 8003002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003006:	e0d0      	b.n	80031aa <UART_SetConfig+0x2e6>
 8003008:	2308      	movs	r3, #8
 800300a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800300e:	e0cc      	b.n	80031aa <UART_SetConfig+0x2e6>
 8003010:	2310      	movs	r3, #16
 8003012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003016:	e0c8      	b.n	80031aa <UART_SetConfig+0x2e6>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a5e      	ldr	r2, [pc, #376]	; (8003198 <UART_SetConfig+0x2d4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d125      	bne.n	800306e <UART_SetConfig+0x1aa>
 8003022:	4b5b      	ldr	r3, [pc, #364]	; (8003190 <UART_SetConfig+0x2cc>)
 8003024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003028:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800302c:	2b30      	cmp	r3, #48	; 0x30
 800302e:	d016      	beq.n	800305e <UART_SetConfig+0x19a>
 8003030:	2b30      	cmp	r3, #48	; 0x30
 8003032:	d818      	bhi.n	8003066 <UART_SetConfig+0x1a2>
 8003034:	2b20      	cmp	r3, #32
 8003036:	d00a      	beq.n	800304e <UART_SetConfig+0x18a>
 8003038:	2b20      	cmp	r3, #32
 800303a:	d814      	bhi.n	8003066 <UART_SetConfig+0x1a2>
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <UART_SetConfig+0x182>
 8003040:	2b10      	cmp	r3, #16
 8003042:	d008      	beq.n	8003056 <UART_SetConfig+0x192>
 8003044:	e00f      	b.n	8003066 <UART_SetConfig+0x1a2>
 8003046:	2300      	movs	r3, #0
 8003048:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800304c:	e0ad      	b.n	80031aa <UART_SetConfig+0x2e6>
 800304e:	2302      	movs	r3, #2
 8003050:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003054:	e0a9      	b.n	80031aa <UART_SetConfig+0x2e6>
 8003056:	2304      	movs	r3, #4
 8003058:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800305c:	e0a5      	b.n	80031aa <UART_SetConfig+0x2e6>
 800305e:	2308      	movs	r3, #8
 8003060:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003064:	e0a1      	b.n	80031aa <UART_SetConfig+0x2e6>
 8003066:	2310      	movs	r3, #16
 8003068:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800306c:	e09d      	b.n	80031aa <UART_SetConfig+0x2e6>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a4a      	ldr	r2, [pc, #296]	; (800319c <UART_SetConfig+0x2d8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d125      	bne.n	80030c4 <UART_SetConfig+0x200>
 8003078:	4b45      	ldr	r3, [pc, #276]	; (8003190 <UART_SetConfig+0x2cc>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003082:	2bc0      	cmp	r3, #192	; 0xc0
 8003084:	d016      	beq.n	80030b4 <UART_SetConfig+0x1f0>
 8003086:	2bc0      	cmp	r3, #192	; 0xc0
 8003088:	d818      	bhi.n	80030bc <UART_SetConfig+0x1f8>
 800308a:	2b80      	cmp	r3, #128	; 0x80
 800308c:	d00a      	beq.n	80030a4 <UART_SetConfig+0x1e0>
 800308e:	2b80      	cmp	r3, #128	; 0x80
 8003090:	d814      	bhi.n	80030bc <UART_SetConfig+0x1f8>
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <UART_SetConfig+0x1d8>
 8003096:	2b40      	cmp	r3, #64	; 0x40
 8003098:	d008      	beq.n	80030ac <UART_SetConfig+0x1e8>
 800309a:	e00f      	b.n	80030bc <UART_SetConfig+0x1f8>
 800309c:	2300      	movs	r3, #0
 800309e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030a2:	e082      	b.n	80031aa <UART_SetConfig+0x2e6>
 80030a4:	2302      	movs	r3, #2
 80030a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030aa:	e07e      	b.n	80031aa <UART_SetConfig+0x2e6>
 80030ac:	2304      	movs	r3, #4
 80030ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030b2:	e07a      	b.n	80031aa <UART_SetConfig+0x2e6>
 80030b4:	2308      	movs	r3, #8
 80030b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ba:	e076      	b.n	80031aa <UART_SetConfig+0x2e6>
 80030bc:	2310      	movs	r3, #16
 80030be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030c2:	e072      	b.n	80031aa <UART_SetConfig+0x2e6>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a35      	ldr	r2, [pc, #212]	; (80031a0 <UART_SetConfig+0x2dc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d12a      	bne.n	8003124 <UART_SetConfig+0x260>
 80030ce:	4b30      	ldr	r3, [pc, #192]	; (8003190 <UART_SetConfig+0x2cc>)
 80030d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030dc:	d01a      	beq.n	8003114 <UART_SetConfig+0x250>
 80030de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030e2:	d81b      	bhi.n	800311c <UART_SetConfig+0x258>
 80030e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e8:	d00c      	beq.n	8003104 <UART_SetConfig+0x240>
 80030ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ee:	d815      	bhi.n	800311c <UART_SetConfig+0x258>
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <UART_SetConfig+0x238>
 80030f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f8:	d008      	beq.n	800310c <UART_SetConfig+0x248>
 80030fa:	e00f      	b.n	800311c <UART_SetConfig+0x258>
 80030fc:	2300      	movs	r3, #0
 80030fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003102:	e052      	b.n	80031aa <UART_SetConfig+0x2e6>
 8003104:	2302      	movs	r3, #2
 8003106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800310a:	e04e      	b.n	80031aa <UART_SetConfig+0x2e6>
 800310c:	2304      	movs	r3, #4
 800310e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003112:	e04a      	b.n	80031aa <UART_SetConfig+0x2e6>
 8003114:	2308      	movs	r3, #8
 8003116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800311a:	e046      	b.n	80031aa <UART_SetConfig+0x2e6>
 800311c:	2310      	movs	r3, #16
 800311e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003122:	e042      	b.n	80031aa <UART_SetConfig+0x2e6>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a17      	ldr	r2, [pc, #92]	; (8003188 <UART_SetConfig+0x2c4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d13a      	bne.n	80031a4 <UART_SetConfig+0x2e0>
 800312e:	4b18      	ldr	r3, [pc, #96]	; (8003190 <UART_SetConfig+0x2cc>)
 8003130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003134:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003138:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800313c:	d01a      	beq.n	8003174 <UART_SetConfig+0x2b0>
 800313e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003142:	d81b      	bhi.n	800317c <UART_SetConfig+0x2b8>
 8003144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003148:	d00c      	beq.n	8003164 <UART_SetConfig+0x2a0>
 800314a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800314e:	d815      	bhi.n	800317c <UART_SetConfig+0x2b8>
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <UART_SetConfig+0x298>
 8003154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003158:	d008      	beq.n	800316c <UART_SetConfig+0x2a8>
 800315a:	e00f      	b.n	800317c <UART_SetConfig+0x2b8>
 800315c:	2300      	movs	r3, #0
 800315e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003162:	e022      	b.n	80031aa <UART_SetConfig+0x2e6>
 8003164:	2302      	movs	r3, #2
 8003166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800316a:	e01e      	b.n	80031aa <UART_SetConfig+0x2e6>
 800316c:	2304      	movs	r3, #4
 800316e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003172:	e01a      	b.n	80031aa <UART_SetConfig+0x2e6>
 8003174:	2308      	movs	r3, #8
 8003176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800317a:	e016      	b.n	80031aa <UART_SetConfig+0x2e6>
 800317c:	2310      	movs	r3, #16
 800317e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003182:	e012      	b.n	80031aa <UART_SetConfig+0x2e6>
 8003184:	efff69f3 	.word	0xefff69f3
 8003188:	40008000 	.word	0x40008000
 800318c:	40013800 	.word	0x40013800
 8003190:	40021000 	.word	0x40021000
 8003194:	40004400 	.word	0x40004400
 8003198:	40004800 	.word	0x40004800
 800319c:	40004c00 	.word	0x40004c00
 80031a0:	40005000 	.word	0x40005000
 80031a4:	2310      	movs	r3, #16
 80031a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a9f      	ldr	r2, [pc, #636]	; (800342c <UART_SetConfig+0x568>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d17a      	bne.n	80032aa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d824      	bhi.n	8003206 <UART_SetConfig+0x342>
 80031bc:	a201      	add	r2, pc, #4	; (adr r2, 80031c4 <UART_SetConfig+0x300>)
 80031be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c2:	bf00      	nop
 80031c4:	080031e9 	.word	0x080031e9
 80031c8:	08003207 	.word	0x08003207
 80031cc:	080031f1 	.word	0x080031f1
 80031d0:	08003207 	.word	0x08003207
 80031d4:	080031f7 	.word	0x080031f7
 80031d8:	08003207 	.word	0x08003207
 80031dc:	08003207 	.word	0x08003207
 80031e0:	08003207 	.word	0x08003207
 80031e4:	080031ff 	.word	0x080031ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031e8:	f7fe ff70 	bl	80020cc <HAL_RCC_GetPCLK1Freq>
 80031ec:	61f8      	str	r0, [r7, #28]
        break;
 80031ee:	e010      	b.n	8003212 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031f0:	4b8f      	ldr	r3, [pc, #572]	; (8003430 <UART_SetConfig+0x56c>)
 80031f2:	61fb      	str	r3, [r7, #28]
        break;
 80031f4:	e00d      	b.n	8003212 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031f6:	f7fe fed1 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 80031fa:	61f8      	str	r0, [r7, #28]
        break;
 80031fc:	e009      	b.n	8003212 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003202:	61fb      	str	r3, [r7, #28]
        break;
 8003204:	e005      	b.n	8003212 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003210:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 80fb 	beq.w	8003410 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	4413      	add	r3, r2
 8003224:	69fa      	ldr	r2, [r7, #28]
 8003226:	429a      	cmp	r2, r3
 8003228:	d305      	bcc.n	8003236 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	429a      	cmp	r2, r3
 8003234:	d903      	bls.n	800323e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800323c:	e0e8      	b.n	8003410 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	2200      	movs	r2, #0
 8003242:	461c      	mov	r4, r3
 8003244:	4615      	mov	r5, r2
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	022b      	lsls	r3, r5, #8
 8003250:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003254:	0222      	lsls	r2, r4, #8
 8003256:	68f9      	ldr	r1, [r7, #12]
 8003258:	6849      	ldr	r1, [r1, #4]
 800325a:	0849      	lsrs	r1, r1, #1
 800325c:	2000      	movs	r0, #0
 800325e:	4688      	mov	r8, r1
 8003260:	4681      	mov	r9, r0
 8003262:	eb12 0a08 	adds.w	sl, r2, r8
 8003266:	eb43 0b09 	adc.w	fp, r3, r9
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	603b      	str	r3, [r7, #0]
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003278:	4650      	mov	r0, sl
 800327a:	4659      	mov	r1, fp
 800327c:	f7fd f800 	bl	8000280 <__aeabi_uldivmod>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4613      	mov	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800328e:	d308      	bcc.n	80032a2 <UART_SetConfig+0x3de>
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003296:	d204      	bcs.n	80032a2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	60da      	str	r2, [r3, #12]
 80032a0:	e0b6      	b.n	8003410 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80032a8:	e0b2      	b.n	8003410 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b2:	d15e      	bne.n	8003372 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80032b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d828      	bhi.n	800330e <UART_SetConfig+0x44a>
 80032bc:	a201      	add	r2, pc, #4	; (adr r2, 80032c4 <UART_SetConfig+0x400>)
 80032be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c2:	bf00      	nop
 80032c4:	080032e9 	.word	0x080032e9
 80032c8:	080032f1 	.word	0x080032f1
 80032cc:	080032f9 	.word	0x080032f9
 80032d0:	0800330f 	.word	0x0800330f
 80032d4:	080032ff 	.word	0x080032ff
 80032d8:	0800330f 	.word	0x0800330f
 80032dc:	0800330f 	.word	0x0800330f
 80032e0:	0800330f 	.word	0x0800330f
 80032e4:	08003307 	.word	0x08003307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032e8:	f7fe fef0 	bl	80020cc <HAL_RCC_GetPCLK1Freq>
 80032ec:	61f8      	str	r0, [r7, #28]
        break;
 80032ee:	e014      	b.n	800331a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032f0:	f7fe ff02 	bl	80020f8 <HAL_RCC_GetPCLK2Freq>
 80032f4:	61f8      	str	r0, [r7, #28]
        break;
 80032f6:	e010      	b.n	800331a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032f8:	4b4d      	ldr	r3, [pc, #308]	; (8003430 <UART_SetConfig+0x56c>)
 80032fa:	61fb      	str	r3, [r7, #28]
        break;
 80032fc:	e00d      	b.n	800331a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032fe:	f7fe fe4d 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8003302:	61f8      	str	r0, [r7, #28]
        break;
 8003304:	e009      	b.n	800331a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800330a:	61fb      	str	r3, [r7, #28]
        break;
 800330c:	e005      	b.n	800331a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003318:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d077      	beq.n	8003410 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	005a      	lsls	r2, r3, #1
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	085b      	lsrs	r3, r3, #1
 800332a:	441a      	add	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	fbb2 f3f3 	udiv	r3, r2, r3
 8003334:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	2b0f      	cmp	r3, #15
 800333a:	d916      	bls.n	800336a <UART_SetConfig+0x4a6>
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003342:	d212      	bcs.n	800336a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	b29b      	uxth	r3, r3
 8003348:	f023 030f 	bic.w	r3, r3, #15
 800334c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	085b      	lsrs	r3, r3, #1
 8003352:	b29b      	uxth	r3, r3
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	b29a      	uxth	r2, r3
 800335a:	8afb      	ldrh	r3, [r7, #22]
 800335c:	4313      	orrs	r3, r2
 800335e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	8afa      	ldrh	r2, [r7, #22]
 8003366:	60da      	str	r2, [r3, #12]
 8003368:	e052      	b.n	8003410 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003370:	e04e      	b.n	8003410 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003372:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003376:	2b08      	cmp	r3, #8
 8003378:	d827      	bhi.n	80033ca <UART_SetConfig+0x506>
 800337a:	a201      	add	r2, pc, #4	; (adr r2, 8003380 <UART_SetConfig+0x4bc>)
 800337c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003380:	080033a5 	.word	0x080033a5
 8003384:	080033ad 	.word	0x080033ad
 8003388:	080033b5 	.word	0x080033b5
 800338c:	080033cb 	.word	0x080033cb
 8003390:	080033bb 	.word	0x080033bb
 8003394:	080033cb 	.word	0x080033cb
 8003398:	080033cb 	.word	0x080033cb
 800339c:	080033cb 	.word	0x080033cb
 80033a0:	080033c3 	.word	0x080033c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033a4:	f7fe fe92 	bl	80020cc <HAL_RCC_GetPCLK1Freq>
 80033a8:	61f8      	str	r0, [r7, #28]
        break;
 80033aa:	e014      	b.n	80033d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033ac:	f7fe fea4 	bl	80020f8 <HAL_RCC_GetPCLK2Freq>
 80033b0:	61f8      	str	r0, [r7, #28]
        break;
 80033b2:	e010      	b.n	80033d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033b4:	4b1e      	ldr	r3, [pc, #120]	; (8003430 <UART_SetConfig+0x56c>)
 80033b6:	61fb      	str	r3, [r7, #28]
        break;
 80033b8:	e00d      	b.n	80033d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ba:	f7fe fdef 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 80033be:	61f8      	str	r0, [r7, #28]
        break;
 80033c0:	e009      	b.n	80033d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033c6:	61fb      	str	r3, [r7, #28]
        break;
 80033c8:	e005      	b.n	80033d6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80033d4:	bf00      	nop
    }

    if (pclk != 0U)
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d019      	beq.n	8003410 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	085a      	lsrs	r2, r3, #1
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	441a      	add	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	2b0f      	cmp	r3, #15
 80033f4:	d909      	bls.n	800340a <UART_SetConfig+0x546>
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fc:	d205      	bcs.n	800340a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60da      	str	r2, [r3, #12]
 8003408:	e002      	b.n	8003410 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800341c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003420:	4618      	mov	r0, r3
 8003422:	3728      	adds	r7, #40	; 0x28
 8003424:	46bd      	mov	sp, r7
 8003426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800342a:	bf00      	nop
 800342c:	40008000 	.word	0x40008000
 8003430:	00f42400 	.word	0x00f42400

08003434 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00a      	beq.n	800345e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00a      	beq.n	80034a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	f003 0320 	and.w	r3, r3, #32
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003510:	2b00      	cmp	r3, #0
 8003512:	d01a      	beq.n	800354a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003532:	d10a      	bne.n	800354a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	605a      	str	r2, [r3, #4]
  }
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af02      	add	r7, sp, #8
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003588:	f7fd fca0 	bl	8000ecc <HAL_GetTick>
 800358c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b08      	cmp	r3, #8
 800359a:	d10e      	bne.n	80035ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800359c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f82d 	bl	800360a <UART_WaitOnFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e023      	b.n	8003602 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d10e      	bne.n	80035e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f817 	bl	800360a <UART_WaitOnFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e00d      	b.n	8003602 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2220      	movs	r2, #32
 80035ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2220      	movs	r2, #32
 80035f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b09c      	sub	sp, #112	; 0x70
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	603b      	str	r3, [r7, #0]
 8003616:	4613      	mov	r3, r2
 8003618:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800361a:	e0a5      	b.n	8003768 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800361e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003622:	f000 80a1 	beq.w	8003768 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003626:	f7fd fc51 	bl	8000ecc <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003632:	429a      	cmp	r2, r3
 8003634:	d302      	bcc.n	800363c <UART_WaitOnFlagUntilTimeout+0x32>
 8003636:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003638:	2b00      	cmp	r3, #0
 800363a:	d13e      	bne.n	80036ba <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003644:	e853 3f00 	ldrex	r3, [r3]
 8003648:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800364a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800364c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003650:	667b      	str	r3, [r7, #100]	; 0x64
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800365a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800365c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003660:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003662:	e841 2300 	strex	r3, r2, [r1]
 8003666:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1e6      	bne.n	800363c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	3308      	adds	r3, #8
 8003674:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003678:	e853 3f00 	ldrex	r3, [r3]
 800367c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800367e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003680:	f023 0301 	bic.w	r3, r3, #1
 8003684:	663b      	str	r3, [r7, #96]	; 0x60
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	3308      	adds	r3, #8
 800368c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800368e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003690:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003692:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003694:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003696:	e841 2300 	strex	r3, r2, [r1]
 800369a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800369c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1e5      	bne.n	800366e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2220      	movs	r2, #32
 80036a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e067      	b.n	800378a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d04f      	beq.n	8003768 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036d6:	d147      	bne.n	8003768 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036e0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ea:	e853 3f00 	ldrex	r3, [r3]
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003700:	637b      	str	r3, [r7, #52]	; 0x34
 8003702:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003704:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003708:	e841 2300 	strex	r3, r2, [r1]
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800370e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e6      	bne.n	80036e2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3308      	adds	r3, #8
 800371a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	e853 3f00 	ldrex	r3, [r3]
 8003722:	613b      	str	r3, [r7, #16]
   return(result);
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f023 0301 	bic.w	r3, r3, #1
 800372a:	66bb      	str	r3, [r7, #104]	; 0x68
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3308      	adds	r3, #8
 8003732:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003734:	623a      	str	r2, [r7, #32]
 8003736:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003738:	69f9      	ldr	r1, [r7, #28]
 800373a:	6a3a      	ldr	r2, [r7, #32]
 800373c:	e841 2300 	strex	r3, r2, [r1]
 8003740:	61bb      	str	r3, [r7, #24]
   return(result);
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1e5      	bne.n	8003714 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2220      	movs	r2, #32
 8003752:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e010      	b.n	800378a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	69da      	ldr	r2, [r3, #28]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	4013      	ands	r3, r2
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	429a      	cmp	r2, r3
 8003776:	bf0c      	ite	eq
 8003778:	2301      	moveq	r3, #1
 800377a:	2300      	movne	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	461a      	mov	r2, r3
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	429a      	cmp	r2, r3
 8003784:	f43f af4a 	beq.w	800361c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3770      	adds	r7, #112	; 0x70
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <__errno>:
 8003794:	4b01      	ldr	r3, [pc, #4]	; (800379c <__errno+0x8>)
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	2000000c 	.word	0x2000000c

080037a0 <__libc_init_array>:
 80037a0:	b570      	push	{r4, r5, r6, lr}
 80037a2:	4d0d      	ldr	r5, [pc, #52]	; (80037d8 <__libc_init_array+0x38>)
 80037a4:	4c0d      	ldr	r4, [pc, #52]	; (80037dc <__libc_init_array+0x3c>)
 80037a6:	1b64      	subs	r4, r4, r5
 80037a8:	10a4      	asrs	r4, r4, #2
 80037aa:	2600      	movs	r6, #0
 80037ac:	42a6      	cmp	r6, r4
 80037ae:	d109      	bne.n	80037c4 <__libc_init_array+0x24>
 80037b0:	4d0b      	ldr	r5, [pc, #44]	; (80037e0 <__libc_init_array+0x40>)
 80037b2:	4c0c      	ldr	r4, [pc, #48]	; (80037e4 <__libc_init_array+0x44>)
 80037b4:	f000 fca2 	bl	80040fc <_init>
 80037b8:	1b64      	subs	r4, r4, r5
 80037ba:	10a4      	asrs	r4, r4, #2
 80037bc:	2600      	movs	r6, #0
 80037be:	42a6      	cmp	r6, r4
 80037c0:	d105      	bne.n	80037ce <__libc_init_array+0x2e>
 80037c2:	bd70      	pop	{r4, r5, r6, pc}
 80037c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037c8:	4798      	blx	r3
 80037ca:	3601      	adds	r6, #1
 80037cc:	e7ee      	b.n	80037ac <__libc_init_array+0xc>
 80037ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d2:	4798      	blx	r3
 80037d4:	3601      	adds	r6, #1
 80037d6:	e7f2      	b.n	80037be <__libc_init_array+0x1e>
 80037d8:	080041a8 	.word	0x080041a8
 80037dc:	080041a8 	.word	0x080041a8
 80037e0:	080041a8 	.word	0x080041a8
 80037e4:	080041ac 	.word	0x080041ac

080037e8 <memset>:
 80037e8:	4402      	add	r2, r0
 80037ea:	4603      	mov	r3, r0
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d100      	bne.n	80037f2 <memset+0xa>
 80037f0:	4770      	bx	lr
 80037f2:	f803 1b01 	strb.w	r1, [r3], #1
 80037f6:	e7f9      	b.n	80037ec <memset+0x4>

080037f8 <sniprintf>:
 80037f8:	b40c      	push	{r2, r3}
 80037fa:	b530      	push	{r4, r5, lr}
 80037fc:	4b17      	ldr	r3, [pc, #92]	; (800385c <sniprintf+0x64>)
 80037fe:	1e0c      	subs	r4, r1, #0
 8003800:	681d      	ldr	r5, [r3, #0]
 8003802:	b09d      	sub	sp, #116	; 0x74
 8003804:	da08      	bge.n	8003818 <sniprintf+0x20>
 8003806:	238b      	movs	r3, #139	; 0x8b
 8003808:	602b      	str	r3, [r5, #0]
 800380a:	f04f 30ff 	mov.w	r0, #4294967295
 800380e:	b01d      	add	sp, #116	; 0x74
 8003810:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003814:	b002      	add	sp, #8
 8003816:	4770      	bx	lr
 8003818:	f44f 7302 	mov.w	r3, #520	; 0x208
 800381c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003820:	bf14      	ite	ne
 8003822:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003826:	4623      	moveq	r3, r4
 8003828:	9304      	str	r3, [sp, #16]
 800382a:	9307      	str	r3, [sp, #28]
 800382c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003830:	9002      	str	r0, [sp, #8]
 8003832:	9006      	str	r0, [sp, #24]
 8003834:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003838:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800383a:	ab21      	add	r3, sp, #132	; 0x84
 800383c:	a902      	add	r1, sp, #8
 800383e:	4628      	mov	r0, r5
 8003840:	9301      	str	r3, [sp, #4]
 8003842:	f000 f869 	bl	8003918 <_svfiprintf_r>
 8003846:	1c43      	adds	r3, r0, #1
 8003848:	bfbc      	itt	lt
 800384a:	238b      	movlt	r3, #139	; 0x8b
 800384c:	602b      	strlt	r3, [r5, #0]
 800384e:	2c00      	cmp	r4, #0
 8003850:	d0dd      	beq.n	800380e <sniprintf+0x16>
 8003852:	9b02      	ldr	r3, [sp, #8]
 8003854:	2200      	movs	r2, #0
 8003856:	701a      	strb	r2, [r3, #0]
 8003858:	e7d9      	b.n	800380e <sniprintf+0x16>
 800385a:	bf00      	nop
 800385c:	2000000c 	.word	0x2000000c

08003860 <__ssputs_r>:
 8003860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003864:	688e      	ldr	r6, [r1, #8]
 8003866:	429e      	cmp	r6, r3
 8003868:	4682      	mov	sl, r0
 800386a:	460c      	mov	r4, r1
 800386c:	4690      	mov	r8, r2
 800386e:	461f      	mov	r7, r3
 8003870:	d838      	bhi.n	80038e4 <__ssputs_r+0x84>
 8003872:	898a      	ldrh	r2, [r1, #12]
 8003874:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003878:	d032      	beq.n	80038e0 <__ssputs_r+0x80>
 800387a:	6825      	ldr	r5, [r4, #0]
 800387c:	6909      	ldr	r1, [r1, #16]
 800387e:	eba5 0901 	sub.w	r9, r5, r1
 8003882:	6965      	ldr	r5, [r4, #20]
 8003884:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003888:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800388c:	3301      	adds	r3, #1
 800388e:	444b      	add	r3, r9
 8003890:	106d      	asrs	r5, r5, #1
 8003892:	429d      	cmp	r5, r3
 8003894:	bf38      	it	cc
 8003896:	461d      	movcc	r5, r3
 8003898:	0553      	lsls	r3, r2, #21
 800389a:	d531      	bpl.n	8003900 <__ssputs_r+0xa0>
 800389c:	4629      	mov	r1, r5
 800389e:	f000 fb63 	bl	8003f68 <_malloc_r>
 80038a2:	4606      	mov	r6, r0
 80038a4:	b950      	cbnz	r0, 80038bc <__ssputs_r+0x5c>
 80038a6:	230c      	movs	r3, #12
 80038a8:	f8ca 3000 	str.w	r3, [sl]
 80038ac:	89a3      	ldrh	r3, [r4, #12]
 80038ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038b2:	81a3      	strh	r3, [r4, #12]
 80038b4:	f04f 30ff 	mov.w	r0, #4294967295
 80038b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038bc:	6921      	ldr	r1, [r4, #16]
 80038be:	464a      	mov	r2, r9
 80038c0:	f000 fabe 	bl	8003e40 <memcpy>
 80038c4:	89a3      	ldrh	r3, [r4, #12]
 80038c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ce:	81a3      	strh	r3, [r4, #12]
 80038d0:	6126      	str	r6, [r4, #16]
 80038d2:	6165      	str	r5, [r4, #20]
 80038d4:	444e      	add	r6, r9
 80038d6:	eba5 0509 	sub.w	r5, r5, r9
 80038da:	6026      	str	r6, [r4, #0]
 80038dc:	60a5      	str	r5, [r4, #8]
 80038de:	463e      	mov	r6, r7
 80038e0:	42be      	cmp	r6, r7
 80038e2:	d900      	bls.n	80038e6 <__ssputs_r+0x86>
 80038e4:	463e      	mov	r6, r7
 80038e6:	6820      	ldr	r0, [r4, #0]
 80038e8:	4632      	mov	r2, r6
 80038ea:	4641      	mov	r1, r8
 80038ec:	f000 fab6 	bl	8003e5c <memmove>
 80038f0:	68a3      	ldr	r3, [r4, #8]
 80038f2:	1b9b      	subs	r3, r3, r6
 80038f4:	60a3      	str	r3, [r4, #8]
 80038f6:	6823      	ldr	r3, [r4, #0]
 80038f8:	4433      	add	r3, r6
 80038fa:	6023      	str	r3, [r4, #0]
 80038fc:	2000      	movs	r0, #0
 80038fe:	e7db      	b.n	80038b8 <__ssputs_r+0x58>
 8003900:	462a      	mov	r2, r5
 8003902:	f000 fba5 	bl	8004050 <_realloc_r>
 8003906:	4606      	mov	r6, r0
 8003908:	2800      	cmp	r0, #0
 800390a:	d1e1      	bne.n	80038d0 <__ssputs_r+0x70>
 800390c:	6921      	ldr	r1, [r4, #16]
 800390e:	4650      	mov	r0, sl
 8003910:	f000 fabe 	bl	8003e90 <_free_r>
 8003914:	e7c7      	b.n	80038a6 <__ssputs_r+0x46>
	...

08003918 <_svfiprintf_r>:
 8003918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800391c:	4698      	mov	r8, r3
 800391e:	898b      	ldrh	r3, [r1, #12]
 8003920:	061b      	lsls	r3, r3, #24
 8003922:	b09d      	sub	sp, #116	; 0x74
 8003924:	4607      	mov	r7, r0
 8003926:	460d      	mov	r5, r1
 8003928:	4614      	mov	r4, r2
 800392a:	d50e      	bpl.n	800394a <_svfiprintf_r+0x32>
 800392c:	690b      	ldr	r3, [r1, #16]
 800392e:	b963      	cbnz	r3, 800394a <_svfiprintf_r+0x32>
 8003930:	2140      	movs	r1, #64	; 0x40
 8003932:	f000 fb19 	bl	8003f68 <_malloc_r>
 8003936:	6028      	str	r0, [r5, #0]
 8003938:	6128      	str	r0, [r5, #16]
 800393a:	b920      	cbnz	r0, 8003946 <_svfiprintf_r+0x2e>
 800393c:	230c      	movs	r3, #12
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	f04f 30ff 	mov.w	r0, #4294967295
 8003944:	e0d1      	b.n	8003aea <_svfiprintf_r+0x1d2>
 8003946:	2340      	movs	r3, #64	; 0x40
 8003948:	616b      	str	r3, [r5, #20]
 800394a:	2300      	movs	r3, #0
 800394c:	9309      	str	r3, [sp, #36]	; 0x24
 800394e:	2320      	movs	r3, #32
 8003950:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003954:	f8cd 800c 	str.w	r8, [sp, #12]
 8003958:	2330      	movs	r3, #48	; 0x30
 800395a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003b04 <_svfiprintf_r+0x1ec>
 800395e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003962:	f04f 0901 	mov.w	r9, #1
 8003966:	4623      	mov	r3, r4
 8003968:	469a      	mov	sl, r3
 800396a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800396e:	b10a      	cbz	r2, 8003974 <_svfiprintf_r+0x5c>
 8003970:	2a25      	cmp	r2, #37	; 0x25
 8003972:	d1f9      	bne.n	8003968 <_svfiprintf_r+0x50>
 8003974:	ebba 0b04 	subs.w	fp, sl, r4
 8003978:	d00b      	beq.n	8003992 <_svfiprintf_r+0x7a>
 800397a:	465b      	mov	r3, fp
 800397c:	4622      	mov	r2, r4
 800397e:	4629      	mov	r1, r5
 8003980:	4638      	mov	r0, r7
 8003982:	f7ff ff6d 	bl	8003860 <__ssputs_r>
 8003986:	3001      	adds	r0, #1
 8003988:	f000 80aa 	beq.w	8003ae0 <_svfiprintf_r+0x1c8>
 800398c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800398e:	445a      	add	r2, fp
 8003990:	9209      	str	r2, [sp, #36]	; 0x24
 8003992:	f89a 3000 	ldrb.w	r3, [sl]
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 80a2 	beq.w	8003ae0 <_svfiprintf_r+0x1c8>
 800399c:	2300      	movs	r3, #0
 800399e:	f04f 32ff 	mov.w	r2, #4294967295
 80039a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039a6:	f10a 0a01 	add.w	sl, sl, #1
 80039aa:	9304      	str	r3, [sp, #16]
 80039ac:	9307      	str	r3, [sp, #28]
 80039ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039b2:	931a      	str	r3, [sp, #104]	; 0x68
 80039b4:	4654      	mov	r4, sl
 80039b6:	2205      	movs	r2, #5
 80039b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039bc:	4851      	ldr	r0, [pc, #324]	; (8003b04 <_svfiprintf_r+0x1ec>)
 80039be:	f7fc fc0f 	bl	80001e0 <memchr>
 80039c2:	9a04      	ldr	r2, [sp, #16]
 80039c4:	b9d8      	cbnz	r0, 80039fe <_svfiprintf_r+0xe6>
 80039c6:	06d0      	lsls	r0, r2, #27
 80039c8:	bf44      	itt	mi
 80039ca:	2320      	movmi	r3, #32
 80039cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039d0:	0711      	lsls	r1, r2, #28
 80039d2:	bf44      	itt	mi
 80039d4:	232b      	movmi	r3, #43	; 0x2b
 80039d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039da:	f89a 3000 	ldrb.w	r3, [sl]
 80039de:	2b2a      	cmp	r3, #42	; 0x2a
 80039e0:	d015      	beq.n	8003a0e <_svfiprintf_r+0xf6>
 80039e2:	9a07      	ldr	r2, [sp, #28]
 80039e4:	4654      	mov	r4, sl
 80039e6:	2000      	movs	r0, #0
 80039e8:	f04f 0c0a 	mov.w	ip, #10
 80039ec:	4621      	mov	r1, r4
 80039ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039f2:	3b30      	subs	r3, #48	; 0x30
 80039f4:	2b09      	cmp	r3, #9
 80039f6:	d94e      	bls.n	8003a96 <_svfiprintf_r+0x17e>
 80039f8:	b1b0      	cbz	r0, 8003a28 <_svfiprintf_r+0x110>
 80039fa:	9207      	str	r2, [sp, #28]
 80039fc:	e014      	b.n	8003a28 <_svfiprintf_r+0x110>
 80039fe:	eba0 0308 	sub.w	r3, r0, r8
 8003a02:	fa09 f303 	lsl.w	r3, r9, r3
 8003a06:	4313      	orrs	r3, r2
 8003a08:	9304      	str	r3, [sp, #16]
 8003a0a:	46a2      	mov	sl, r4
 8003a0c:	e7d2      	b.n	80039b4 <_svfiprintf_r+0x9c>
 8003a0e:	9b03      	ldr	r3, [sp, #12]
 8003a10:	1d19      	adds	r1, r3, #4
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	9103      	str	r1, [sp, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	bfbb      	ittet	lt
 8003a1a:	425b      	neglt	r3, r3
 8003a1c:	f042 0202 	orrlt.w	r2, r2, #2
 8003a20:	9307      	strge	r3, [sp, #28]
 8003a22:	9307      	strlt	r3, [sp, #28]
 8003a24:	bfb8      	it	lt
 8003a26:	9204      	strlt	r2, [sp, #16]
 8003a28:	7823      	ldrb	r3, [r4, #0]
 8003a2a:	2b2e      	cmp	r3, #46	; 0x2e
 8003a2c:	d10c      	bne.n	8003a48 <_svfiprintf_r+0x130>
 8003a2e:	7863      	ldrb	r3, [r4, #1]
 8003a30:	2b2a      	cmp	r3, #42	; 0x2a
 8003a32:	d135      	bne.n	8003aa0 <_svfiprintf_r+0x188>
 8003a34:	9b03      	ldr	r3, [sp, #12]
 8003a36:	1d1a      	adds	r2, r3, #4
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	9203      	str	r2, [sp, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	bfb8      	it	lt
 8003a40:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a44:	3402      	adds	r4, #2
 8003a46:	9305      	str	r3, [sp, #20]
 8003a48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b14 <_svfiprintf_r+0x1fc>
 8003a4c:	7821      	ldrb	r1, [r4, #0]
 8003a4e:	2203      	movs	r2, #3
 8003a50:	4650      	mov	r0, sl
 8003a52:	f7fc fbc5 	bl	80001e0 <memchr>
 8003a56:	b140      	cbz	r0, 8003a6a <_svfiprintf_r+0x152>
 8003a58:	2340      	movs	r3, #64	; 0x40
 8003a5a:	eba0 000a 	sub.w	r0, r0, sl
 8003a5e:	fa03 f000 	lsl.w	r0, r3, r0
 8003a62:	9b04      	ldr	r3, [sp, #16]
 8003a64:	4303      	orrs	r3, r0
 8003a66:	3401      	adds	r4, #1
 8003a68:	9304      	str	r3, [sp, #16]
 8003a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a6e:	4826      	ldr	r0, [pc, #152]	; (8003b08 <_svfiprintf_r+0x1f0>)
 8003a70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a74:	2206      	movs	r2, #6
 8003a76:	f7fc fbb3 	bl	80001e0 <memchr>
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	d038      	beq.n	8003af0 <_svfiprintf_r+0x1d8>
 8003a7e:	4b23      	ldr	r3, [pc, #140]	; (8003b0c <_svfiprintf_r+0x1f4>)
 8003a80:	bb1b      	cbnz	r3, 8003aca <_svfiprintf_r+0x1b2>
 8003a82:	9b03      	ldr	r3, [sp, #12]
 8003a84:	3307      	adds	r3, #7
 8003a86:	f023 0307 	bic.w	r3, r3, #7
 8003a8a:	3308      	adds	r3, #8
 8003a8c:	9303      	str	r3, [sp, #12]
 8003a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a90:	4433      	add	r3, r6
 8003a92:	9309      	str	r3, [sp, #36]	; 0x24
 8003a94:	e767      	b.n	8003966 <_svfiprintf_r+0x4e>
 8003a96:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a9a:	460c      	mov	r4, r1
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	e7a5      	b.n	80039ec <_svfiprintf_r+0xd4>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	3401      	adds	r4, #1
 8003aa4:	9305      	str	r3, [sp, #20]
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	f04f 0c0a 	mov.w	ip, #10
 8003aac:	4620      	mov	r0, r4
 8003aae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ab2:	3a30      	subs	r2, #48	; 0x30
 8003ab4:	2a09      	cmp	r2, #9
 8003ab6:	d903      	bls.n	8003ac0 <_svfiprintf_r+0x1a8>
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0c5      	beq.n	8003a48 <_svfiprintf_r+0x130>
 8003abc:	9105      	str	r1, [sp, #20]
 8003abe:	e7c3      	b.n	8003a48 <_svfiprintf_r+0x130>
 8003ac0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ac4:	4604      	mov	r4, r0
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e7f0      	b.n	8003aac <_svfiprintf_r+0x194>
 8003aca:	ab03      	add	r3, sp, #12
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	462a      	mov	r2, r5
 8003ad0:	4b0f      	ldr	r3, [pc, #60]	; (8003b10 <_svfiprintf_r+0x1f8>)
 8003ad2:	a904      	add	r1, sp, #16
 8003ad4:	4638      	mov	r0, r7
 8003ad6:	f3af 8000 	nop.w
 8003ada:	1c42      	adds	r2, r0, #1
 8003adc:	4606      	mov	r6, r0
 8003ade:	d1d6      	bne.n	8003a8e <_svfiprintf_r+0x176>
 8003ae0:	89ab      	ldrh	r3, [r5, #12]
 8003ae2:	065b      	lsls	r3, r3, #25
 8003ae4:	f53f af2c 	bmi.w	8003940 <_svfiprintf_r+0x28>
 8003ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003aea:	b01d      	add	sp, #116	; 0x74
 8003aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003af0:	ab03      	add	r3, sp, #12
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	462a      	mov	r2, r5
 8003af6:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <_svfiprintf_r+0x1f8>)
 8003af8:	a904      	add	r1, sp, #16
 8003afa:	4638      	mov	r0, r7
 8003afc:	f000 f87a 	bl	8003bf4 <_printf_i>
 8003b00:	e7eb      	b.n	8003ada <_svfiprintf_r+0x1c2>
 8003b02:	bf00      	nop
 8003b04:	0800416c 	.word	0x0800416c
 8003b08:	08004176 	.word	0x08004176
 8003b0c:	00000000 	.word	0x00000000
 8003b10:	08003861 	.word	0x08003861
 8003b14:	08004172 	.word	0x08004172

08003b18 <_printf_common>:
 8003b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b1c:	4616      	mov	r6, r2
 8003b1e:	4699      	mov	r9, r3
 8003b20:	688a      	ldr	r2, [r1, #8]
 8003b22:	690b      	ldr	r3, [r1, #16]
 8003b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	bfb8      	it	lt
 8003b2c:	4613      	movlt	r3, r2
 8003b2e:	6033      	str	r3, [r6, #0]
 8003b30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b34:	4607      	mov	r7, r0
 8003b36:	460c      	mov	r4, r1
 8003b38:	b10a      	cbz	r2, 8003b3e <_printf_common+0x26>
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	6033      	str	r3, [r6, #0]
 8003b3e:	6823      	ldr	r3, [r4, #0]
 8003b40:	0699      	lsls	r1, r3, #26
 8003b42:	bf42      	ittt	mi
 8003b44:	6833      	ldrmi	r3, [r6, #0]
 8003b46:	3302      	addmi	r3, #2
 8003b48:	6033      	strmi	r3, [r6, #0]
 8003b4a:	6825      	ldr	r5, [r4, #0]
 8003b4c:	f015 0506 	ands.w	r5, r5, #6
 8003b50:	d106      	bne.n	8003b60 <_printf_common+0x48>
 8003b52:	f104 0a19 	add.w	sl, r4, #25
 8003b56:	68e3      	ldr	r3, [r4, #12]
 8003b58:	6832      	ldr	r2, [r6, #0]
 8003b5a:	1a9b      	subs	r3, r3, r2
 8003b5c:	42ab      	cmp	r3, r5
 8003b5e:	dc26      	bgt.n	8003bae <_printf_common+0x96>
 8003b60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b64:	1e13      	subs	r3, r2, #0
 8003b66:	6822      	ldr	r2, [r4, #0]
 8003b68:	bf18      	it	ne
 8003b6a:	2301      	movne	r3, #1
 8003b6c:	0692      	lsls	r2, r2, #26
 8003b6e:	d42b      	bmi.n	8003bc8 <_printf_common+0xb0>
 8003b70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b74:	4649      	mov	r1, r9
 8003b76:	4638      	mov	r0, r7
 8003b78:	47c0      	blx	r8
 8003b7a:	3001      	adds	r0, #1
 8003b7c:	d01e      	beq.n	8003bbc <_printf_common+0xa4>
 8003b7e:	6823      	ldr	r3, [r4, #0]
 8003b80:	68e5      	ldr	r5, [r4, #12]
 8003b82:	6832      	ldr	r2, [r6, #0]
 8003b84:	f003 0306 	and.w	r3, r3, #6
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	bf08      	it	eq
 8003b8c:	1aad      	subeq	r5, r5, r2
 8003b8e:	68a3      	ldr	r3, [r4, #8]
 8003b90:	6922      	ldr	r2, [r4, #16]
 8003b92:	bf0c      	ite	eq
 8003b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b98:	2500      	movne	r5, #0
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	bfc4      	itt	gt
 8003b9e:	1a9b      	subgt	r3, r3, r2
 8003ba0:	18ed      	addgt	r5, r5, r3
 8003ba2:	2600      	movs	r6, #0
 8003ba4:	341a      	adds	r4, #26
 8003ba6:	42b5      	cmp	r5, r6
 8003ba8:	d11a      	bne.n	8003be0 <_printf_common+0xc8>
 8003baa:	2000      	movs	r0, #0
 8003bac:	e008      	b.n	8003bc0 <_printf_common+0xa8>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	4652      	mov	r2, sl
 8003bb2:	4649      	mov	r1, r9
 8003bb4:	4638      	mov	r0, r7
 8003bb6:	47c0      	blx	r8
 8003bb8:	3001      	adds	r0, #1
 8003bba:	d103      	bne.n	8003bc4 <_printf_common+0xac>
 8003bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bc4:	3501      	adds	r5, #1
 8003bc6:	e7c6      	b.n	8003b56 <_printf_common+0x3e>
 8003bc8:	18e1      	adds	r1, r4, r3
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	2030      	movs	r0, #48	; 0x30
 8003bce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bd2:	4422      	add	r2, r4
 8003bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bdc:	3302      	adds	r3, #2
 8003bde:	e7c7      	b.n	8003b70 <_printf_common+0x58>
 8003be0:	2301      	movs	r3, #1
 8003be2:	4622      	mov	r2, r4
 8003be4:	4649      	mov	r1, r9
 8003be6:	4638      	mov	r0, r7
 8003be8:	47c0      	blx	r8
 8003bea:	3001      	adds	r0, #1
 8003bec:	d0e6      	beq.n	8003bbc <_printf_common+0xa4>
 8003bee:	3601      	adds	r6, #1
 8003bf0:	e7d9      	b.n	8003ba6 <_printf_common+0x8e>
	...

08003bf4 <_printf_i>:
 8003bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf8:	7e0f      	ldrb	r7, [r1, #24]
 8003bfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bfc:	2f78      	cmp	r7, #120	; 0x78
 8003bfe:	4691      	mov	r9, r2
 8003c00:	4680      	mov	r8, r0
 8003c02:	460c      	mov	r4, r1
 8003c04:	469a      	mov	sl, r3
 8003c06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c0a:	d807      	bhi.n	8003c1c <_printf_i+0x28>
 8003c0c:	2f62      	cmp	r7, #98	; 0x62
 8003c0e:	d80a      	bhi.n	8003c26 <_printf_i+0x32>
 8003c10:	2f00      	cmp	r7, #0
 8003c12:	f000 80d8 	beq.w	8003dc6 <_printf_i+0x1d2>
 8003c16:	2f58      	cmp	r7, #88	; 0x58
 8003c18:	f000 80a3 	beq.w	8003d62 <_printf_i+0x16e>
 8003c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c24:	e03a      	b.n	8003c9c <_printf_i+0xa8>
 8003c26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c2a:	2b15      	cmp	r3, #21
 8003c2c:	d8f6      	bhi.n	8003c1c <_printf_i+0x28>
 8003c2e:	a101      	add	r1, pc, #4	; (adr r1, 8003c34 <_printf_i+0x40>)
 8003c30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c34:	08003c8d 	.word	0x08003c8d
 8003c38:	08003ca1 	.word	0x08003ca1
 8003c3c:	08003c1d 	.word	0x08003c1d
 8003c40:	08003c1d 	.word	0x08003c1d
 8003c44:	08003c1d 	.word	0x08003c1d
 8003c48:	08003c1d 	.word	0x08003c1d
 8003c4c:	08003ca1 	.word	0x08003ca1
 8003c50:	08003c1d 	.word	0x08003c1d
 8003c54:	08003c1d 	.word	0x08003c1d
 8003c58:	08003c1d 	.word	0x08003c1d
 8003c5c:	08003c1d 	.word	0x08003c1d
 8003c60:	08003dad 	.word	0x08003dad
 8003c64:	08003cd1 	.word	0x08003cd1
 8003c68:	08003d8f 	.word	0x08003d8f
 8003c6c:	08003c1d 	.word	0x08003c1d
 8003c70:	08003c1d 	.word	0x08003c1d
 8003c74:	08003dcf 	.word	0x08003dcf
 8003c78:	08003c1d 	.word	0x08003c1d
 8003c7c:	08003cd1 	.word	0x08003cd1
 8003c80:	08003c1d 	.word	0x08003c1d
 8003c84:	08003c1d 	.word	0x08003c1d
 8003c88:	08003d97 	.word	0x08003d97
 8003c8c:	682b      	ldr	r3, [r5, #0]
 8003c8e:	1d1a      	adds	r2, r3, #4
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	602a      	str	r2, [r5, #0]
 8003c94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e0a3      	b.n	8003de8 <_printf_i+0x1f4>
 8003ca0:	6820      	ldr	r0, [r4, #0]
 8003ca2:	6829      	ldr	r1, [r5, #0]
 8003ca4:	0606      	lsls	r6, r0, #24
 8003ca6:	f101 0304 	add.w	r3, r1, #4
 8003caa:	d50a      	bpl.n	8003cc2 <_printf_i+0xce>
 8003cac:	680e      	ldr	r6, [r1, #0]
 8003cae:	602b      	str	r3, [r5, #0]
 8003cb0:	2e00      	cmp	r6, #0
 8003cb2:	da03      	bge.n	8003cbc <_printf_i+0xc8>
 8003cb4:	232d      	movs	r3, #45	; 0x2d
 8003cb6:	4276      	negs	r6, r6
 8003cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cbc:	485e      	ldr	r0, [pc, #376]	; (8003e38 <_printf_i+0x244>)
 8003cbe:	230a      	movs	r3, #10
 8003cc0:	e019      	b.n	8003cf6 <_printf_i+0x102>
 8003cc2:	680e      	ldr	r6, [r1, #0]
 8003cc4:	602b      	str	r3, [r5, #0]
 8003cc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cca:	bf18      	it	ne
 8003ccc:	b236      	sxthne	r6, r6
 8003cce:	e7ef      	b.n	8003cb0 <_printf_i+0xbc>
 8003cd0:	682b      	ldr	r3, [r5, #0]
 8003cd2:	6820      	ldr	r0, [r4, #0]
 8003cd4:	1d19      	adds	r1, r3, #4
 8003cd6:	6029      	str	r1, [r5, #0]
 8003cd8:	0601      	lsls	r1, r0, #24
 8003cda:	d501      	bpl.n	8003ce0 <_printf_i+0xec>
 8003cdc:	681e      	ldr	r6, [r3, #0]
 8003cde:	e002      	b.n	8003ce6 <_printf_i+0xf2>
 8003ce0:	0646      	lsls	r6, r0, #25
 8003ce2:	d5fb      	bpl.n	8003cdc <_printf_i+0xe8>
 8003ce4:	881e      	ldrh	r6, [r3, #0]
 8003ce6:	4854      	ldr	r0, [pc, #336]	; (8003e38 <_printf_i+0x244>)
 8003ce8:	2f6f      	cmp	r7, #111	; 0x6f
 8003cea:	bf0c      	ite	eq
 8003cec:	2308      	moveq	r3, #8
 8003cee:	230a      	movne	r3, #10
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cf6:	6865      	ldr	r5, [r4, #4]
 8003cf8:	60a5      	str	r5, [r4, #8]
 8003cfa:	2d00      	cmp	r5, #0
 8003cfc:	bfa2      	ittt	ge
 8003cfe:	6821      	ldrge	r1, [r4, #0]
 8003d00:	f021 0104 	bicge.w	r1, r1, #4
 8003d04:	6021      	strge	r1, [r4, #0]
 8003d06:	b90e      	cbnz	r6, 8003d0c <_printf_i+0x118>
 8003d08:	2d00      	cmp	r5, #0
 8003d0a:	d04d      	beq.n	8003da8 <_printf_i+0x1b4>
 8003d0c:	4615      	mov	r5, r2
 8003d0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d12:	fb03 6711 	mls	r7, r3, r1, r6
 8003d16:	5dc7      	ldrb	r7, [r0, r7]
 8003d18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d1c:	4637      	mov	r7, r6
 8003d1e:	42bb      	cmp	r3, r7
 8003d20:	460e      	mov	r6, r1
 8003d22:	d9f4      	bls.n	8003d0e <_printf_i+0x11a>
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d10b      	bne.n	8003d40 <_printf_i+0x14c>
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	07de      	lsls	r6, r3, #31
 8003d2c:	d508      	bpl.n	8003d40 <_printf_i+0x14c>
 8003d2e:	6923      	ldr	r3, [r4, #16]
 8003d30:	6861      	ldr	r1, [r4, #4]
 8003d32:	4299      	cmp	r1, r3
 8003d34:	bfde      	ittt	le
 8003d36:	2330      	movle	r3, #48	; 0x30
 8003d38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d40:	1b52      	subs	r2, r2, r5
 8003d42:	6122      	str	r2, [r4, #16]
 8003d44:	f8cd a000 	str.w	sl, [sp]
 8003d48:	464b      	mov	r3, r9
 8003d4a:	aa03      	add	r2, sp, #12
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	4640      	mov	r0, r8
 8003d50:	f7ff fee2 	bl	8003b18 <_printf_common>
 8003d54:	3001      	adds	r0, #1
 8003d56:	d14c      	bne.n	8003df2 <_printf_i+0x1fe>
 8003d58:	f04f 30ff 	mov.w	r0, #4294967295
 8003d5c:	b004      	add	sp, #16
 8003d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d62:	4835      	ldr	r0, [pc, #212]	; (8003e38 <_printf_i+0x244>)
 8003d64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d68:	6829      	ldr	r1, [r5, #0]
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d70:	6029      	str	r1, [r5, #0]
 8003d72:	061d      	lsls	r5, r3, #24
 8003d74:	d514      	bpl.n	8003da0 <_printf_i+0x1ac>
 8003d76:	07df      	lsls	r7, r3, #31
 8003d78:	bf44      	itt	mi
 8003d7a:	f043 0320 	orrmi.w	r3, r3, #32
 8003d7e:	6023      	strmi	r3, [r4, #0]
 8003d80:	b91e      	cbnz	r6, 8003d8a <_printf_i+0x196>
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	f023 0320 	bic.w	r3, r3, #32
 8003d88:	6023      	str	r3, [r4, #0]
 8003d8a:	2310      	movs	r3, #16
 8003d8c:	e7b0      	b.n	8003cf0 <_printf_i+0xfc>
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	f043 0320 	orr.w	r3, r3, #32
 8003d94:	6023      	str	r3, [r4, #0]
 8003d96:	2378      	movs	r3, #120	; 0x78
 8003d98:	4828      	ldr	r0, [pc, #160]	; (8003e3c <_printf_i+0x248>)
 8003d9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d9e:	e7e3      	b.n	8003d68 <_printf_i+0x174>
 8003da0:	0659      	lsls	r1, r3, #25
 8003da2:	bf48      	it	mi
 8003da4:	b2b6      	uxthmi	r6, r6
 8003da6:	e7e6      	b.n	8003d76 <_printf_i+0x182>
 8003da8:	4615      	mov	r5, r2
 8003daa:	e7bb      	b.n	8003d24 <_printf_i+0x130>
 8003dac:	682b      	ldr	r3, [r5, #0]
 8003dae:	6826      	ldr	r6, [r4, #0]
 8003db0:	6961      	ldr	r1, [r4, #20]
 8003db2:	1d18      	adds	r0, r3, #4
 8003db4:	6028      	str	r0, [r5, #0]
 8003db6:	0635      	lsls	r5, r6, #24
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	d501      	bpl.n	8003dc0 <_printf_i+0x1cc>
 8003dbc:	6019      	str	r1, [r3, #0]
 8003dbe:	e002      	b.n	8003dc6 <_printf_i+0x1d2>
 8003dc0:	0670      	lsls	r0, r6, #25
 8003dc2:	d5fb      	bpl.n	8003dbc <_printf_i+0x1c8>
 8003dc4:	8019      	strh	r1, [r3, #0]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	6123      	str	r3, [r4, #16]
 8003dca:	4615      	mov	r5, r2
 8003dcc:	e7ba      	b.n	8003d44 <_printf_i+0x150>
 8003dce:	682b      	ldr	r3, [r5, #0]
 8003dd0:	1d1a      	adds	r2, r3, #4
 8003dd2:	602a      	str	r2, [r5, #0]
 8003dd4:	681d      	ldr	r5, [r3, #0]
 8003dd6:	6862      	ldr	r2, [r4, #4]
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4628      	mov	r0, r5
 8003ddc:	f7fc fa00 	bl	80001e0 <memchr>
 8003de0:	b108      	cbz	r0, 8003de6 <_printf_i+0x1f2>
 8003de2:	1b40      	subs	r0, r0, r5
 8003de4:	6060      	str	r0, [r4, #4]
 8003de6:	6863      	ldr	r3, [r4, #4]
 8003de8:	6123      	str	r3, [r4, #16]
 8003dea:	2300      	movs	r3, #0
 8003dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003df0:	e7a8      	b.n	8003d44 <_printf_i+0x150>
 8003df2:	6923      	ldr	r3, [r4, #16]
 8003df4:	462a      	mov	r2, r5
 8003df6:	4649      	mov	r1, r9
 8003df8:	4640      	mov	r0, r8
 8003dfa:	47d0      	blx	sl
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	d0ab      	beq.n	8003d58 <_printf_i+0x164>
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	079b      	lsls	r3, r3, #30
 8003e04:	d413      	bmi.n	8003e2e <_printf_i+0x23a>
 8003e06:	68e0      	ldr	r0, [r4, #12]
 8003e08:	9b03      	ldr	r3, [sp, #12]
 8003e0a:	4298      	cmp	r0, r3
 8003e0c:	bfb8      	it	lt
 8003e0e:	4618      	movlt	r0, r3
 8003e10:	e7a4      	b.n	8003d5c <_printf_i+0x168>
 8003e12:	2301      	movs	r3, #1
 8003e14:	4632      	mov	r2, r6
 8003e16:	4649      	mov	r1, r9
 8003e18:	4640      	mov	r0, r8
 8003e1a:	47d0      	blx	sl
 8003e1c:	3001      	adds	r0, #1
 8003e1e:	d09b      	beq.n	8003d58 <_printf_i+0x164>
 8003e20:	3501      	adds	r5, #1
 8003e22:	68e3      	ldr	r3, [r4, #12]
 8003e24:	9903      	ldr	r1, [sp, #12]
 8003e26:	1a5b      	subs	r3, r3, r1
 8003e28:	42ab      	cmp	r3, r5
 8003e2a:	dcf2      	bgt.n	8003e12 <_printf_i+0x21e>
 8003e2c:	e7eb      	b.n	8003e06 <_printf_i+0x212>
 8003e2e:	2500      	movs	r5, #0
 8003e30:	f104 0619 	add.w	r6, r4, #25
 8003e34:	e7f5      	b.n	8003e22 <_printf_i+0x22e>
 8003e36:	bf00      	nop
 8003e38:	0800417d 	.word	0x0800417d
 8003e3c:	0800418e 	.word	0x0800418e

08003e40 <memcpy>:
 8003e40:	440a      	add	r2, r1
 8003e42:	4291      	cmp	r1, r2
 8003e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e48:	d100      	bne.n	8003e4c <memcpy+0xc>
 8003e4a:	4770      	bx	lr
 8003e4c:	b510      	push	{r4, lr}
 8003e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e56:	4291      	cmp	r1, r2
 8003e58:	d1f9      	bne.n	8003e4e <memcpy+0xe>
 8003e5a:	bd10      	pop	{r4, pc}

08003e5c <memmove>:
 8003e5c:	4288      	cmp	r0, r1
 8003e5e:	b510      	push	{r4, lr}
 8003e60:	eb01 0402 	add.w	r4, r1, r2
 8003e64:	d902      	bls.n	8003e6c <memmove+0x10>
 8003e66:	4284      	cmp	r4, r0
 8003e68:	4623      	mov	r3, r4
 8003e6a:	d807      	bhi.n	8003e7c <memmove+0x20>
 8003e6c:	1e43      	subs	r3, r0, #1
 8003e6e:	42a1      	cmp	r1, r4
 8003e70:	d008      	beq.n	8003e84 <memmove+0x28>
 8003e72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e7a:	e7f8      	b.n	8003e6e <memmove+0x12>
 8003e7c:	4402      	add	r2, r0
 8003e7e:	4601      	mov	r1, r0
 8003e80:	428a      	cmp	r2, r1
 8003e82:	d100      	bne.n	8003e86 <memmove+0x2a>
 8003e84:	bd10      	pop	{r4, pc}
 8003e86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e8e:	e7f7      	b.n	8003e80 <memmove+0x24>

08003e90 <_free_r>:
 8003e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e92:	2900      	cmp	r1, #0
 8003e94:	d044      	beq.n	8003f20 <_free_r+0x90>
 8003e96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e9a:	9001      	str	r0, [sp, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f1a1 0404 	sub.w	r4, r1, #4
 8003ea2:	bfb8      	it	lt
 8003ea4:	18e4      	addlt	r4, r4, r3
 8003ea6:	f000 f913 	bl	80040d0 <__malloc_lock>
 8003eaa:	4a1e      	ldr	r2, [pc, #120]	; (8003f24 <_free_r+0x94>)
 8003eac:	9801      	ldr	r0, [sp, #4]
 8003eae:	6813      	ldr	r3, [r2, #0]
 8003eb0:	b933      	cbnz	r3, 8003ec0 <_free_r+0x30>
 8003eb2:	6063      	str	r3, [r4, #4]
 8003eb4:	6014      	str	r4, [r2, #0]
 8003eb6:	b003      	add	sp, #12
 8003eb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ebc:	f000 b90e 	b.w	80040dc <__malloc_unlock>
 8003ec0:	42a3      	cmp	r3, r4
 8003ec2:	d908      	bls.n	8003ed6 <_free_r+0x46>
 8003ec4:	6825      	ldr	r5, [r4, #0]
 8003ec6:	1961      	adds	r1, r4, r5
 8003ec8:	428b      	cmp	r3, r1
 8003eca:	bf01      	itttt	eq
 8003ecc:	6819      	ldreq	r1, [r3, #0]
 8003ece:	685b      	ldreq	r3, [r3, #4]
 8003ed0:	1949      	addeq	r1, r1, r5
 8003ed2:	6021      	streq	r1, [r4, #0]
 8003ed4:	e7ed      	b.n	8003eb2 <_free_r+0x22>
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	b10b      	cbz	r3, 8003ee0 <_free_r+0x50>
 8003edc:	42a3      	cmp	r3, r4
 8003ede:	d9fa      	bls.n	8003ed6 <_free_r+0x46>
 8003ee0:	6811      	ldr	r1, [r2, #0]
 8003ee2:	1855      	adds	r5, r2, r1
 8003ee4:	42a5      	cmp	r5, r4
 8003ee6:	d10b      	bne.n	8003f00 <_free_r+0x70>
 8003ee8:	6824      	ldr	r4, [r4, #0]
 8003eea:	4421      	add	r1, r4
 8003eec:	1854      	adds	r4, r2, r1
 8003eee:	42a3      	cmp	r3, r4
 8003ef0:	6011      	str	r1, [r2, #0]
 8003ef2:	d1e0      	bne.n	8003eb6 <_free_r+0x26>
 8003ef4:	681c      	ldr	r4, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	6053      	str	r3, [r2, #4]
 8003efa:	4421      	add	r1, r4
 8003efc:	6011      	str	r1, [r2, #0]
 8003efe:	e7da      	b.n	8003eb6 <_free_r+0x26>
 8003f00:	d902      	bls.n	8003f08 <_free_r+0x78>
 8003f02:	230c      	movs	r3, #12
 8003f04:	6003      	str	r3, [r0, #0]
 8003f06:	e7d6      	b.n	8003eb6 <_free_r+0x26>
 8003f08:	6825      	ldr	r5, [r4, #0]
 8003f0a:	1961      	adds	r1, r4, r5
 8003f0c:	428b      	cmp	r3, r1
 8003f0e:	bf04      	itt	eq
 8003f10:	6819      	ldreq	r1, [r3, #0]
 8003f12:	685b      	ldreq	r3, [r3, #4]
 8003f14:	6063      	str	r3, [r4, #4]
 8003f16:	bf04      	itt	eq
 8003f18:	1949      	addeq	r1, r1, r5
 8003f1a:	6021      	streq	r1, [r4, #0]
 8003f1c:	6054      	str	r4, [r2, #4]
 8003f1e:	e7ca      	b.n	8003eb6 <_free_r+0x26>
 8003f20:	b003      	add	sp, #12
 8003f22:	bd30      	pop	{r4, r5, pc}
 8003f24:	2000017c 	.word	0x2000017c

08003f28 <sbrk_aligned>:
 8003f28:	b570      	push	{r4, r5, r6, lr}
 8003f2a:	4e0e      	ldr	r6, [pc, #56]	; (8003f64 <sbrk_aligned+0x3c>)
 8003f2c:	460c      	mov	r4, r1
 8003f2e:	6831      	ldr	r1, [r6, #0]
 8003f30:	4605      	mov	r5, r0
 8003f32:	b911      	cbnz	r1, 8003f3a <sbrk_aligned+0x12>
 8003f34:	f000 f8bc 	bl	80040b0 <_sbrk_r>
 8003f38:	6030      	str	r0, [r6, #0]
 8003f3a:	4621      	mov	r1, r4
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	f000 f8b7 	bl	80040b0 <_sbrk_r>
 8003f42:	1c43      	adds	r3, r0, #1
 8003f44:	d00a      	beq.n	8003f5c <sbrk_aligned+0x34>
 8003f46:	1cc4      	adds	r4, r0, #3
 8003f48:	f024 0403 	bic.w	r4, r4, #3
 8003f4c:	42a0      	cmp	r0, r4
 8003f4e:	d007      	beq.n	8003f60 <sbrk_aligned+0x38>
 8003f50:	1a21      	subs	r1, r4, r0
 8003f52:	4628      	mov	r0, r5
 8003f54:	f000 f8ac 	bl	80040b0 <_sbrk_r>
 8003f58:	3001      	adds	r0, #1
 8003f5a:	d101      	bne.n	8003f60 <sbrk_aligned+0x38>
 8003f5c:	f04f 34ff 	mov.w	r4, #4294967295
 8003f60:	4620      	mov	r0, r4
 8003f62:	bd70      	pop	{r4, r5, r6, pc}
 8003f64:	20000180 	.word	0x20000180

08003f68 <_malloc_r>:
 8003f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f6c:	1ccd      	adds	r5, r1, #3
 8003f6e:	f025 0503 	bic.w	r5, r5, #3
 8003f72:	3508      	adds	r5, #8
 8003f74:	2d0c      	cmp	r5, #12
 8003f76:	bf38      	it	cc
 8003f78:	250c      	movcc	r5, #12
 8003f7a:	2d00      	cmp	r5, #0
 8003f7c:	4607      	mov	r7, r0
 8003f7e:	db01      	blt.n	8003f84 <_malloc_r+0x1c>
 8003f80:	42a9      	cmp	r1, r5
 8003f82:	d905      	bls.n	8003f90 <_malloc_r+0x28>
 8003f84:	230c      	movs	r3, #12
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	2600      	movs	r6, #0
 8003f8a:	4630      	mov	r0, r6
 8003f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f90:	4e2e      	ldr	r6, [pc, #184]	; (800404c <_malloc_r+0xe4>)
 8003f92:	f000 f89d 	bl	80040d0 <__malloc_lock>
 8003f96:	6833      	ldr	r3, [r6, #0]
 8003f98:	461c      	mov	r4, r3
 8003f9a:	bb34      	cbnz	r4, 8003fea <_malloc_r+0x82>
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	4638      	mov	r0, r7
 8003fa0:	f7ff ffc2 	bl	8003f28 <sbrk_aligned>
 8003fa4:	1c43      	adds	r3, r0, #1
 8003fa6:	4604      	mov	r4, r0
 8003fa8:	d14d      	bne.n	8004046 <_malloc_r+0xde>
 8003faa:	6834      	ldr	r4, [r6, #0]
 8003fac:	4626      	mov	r6, r4
 8003fae:	2e00      	cmp	r6, #0
 8003fb0:	d140      	bne.n	8004034 <_malloc_r+0xcc>
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	4631      	mov	r1, r6
 8003fb6:	4638      	mov	r0, r7
 8003fb8:	eb04 0803 	add.w	r8, r4, r3
 8003fbc:	f000 f878 	bl	80040b0 <_sbrk_r>
 8003fc0:	4580      	cmp	r8, r0
 8003fc2:	d13a      	bne.n	800403a <_malloc_r+0xd2>
 8003fc4:	6821      	ldr	r1, [r4, #0]
 8003fc6:	3503      	adds	r5, #3
 8003fc8:	1a6d      	subs	r5, r5, r1
 8003fca:	f025 0503 	bic.w	r5, r5, #3
 8003fce:	3508      	adds	r5, #8
 8003fd0:	2d0c      	cmp	r5, #12
 8003fd2:	bf38      	it	cc
 8003fd4:	250c      	movcc	r5, #12
 8003fd6:	4629      	mov	r1, r5
 8003fd8:	4638      	mov	r0, r7
 8003fda:	f7ff ffa5 	bl	8003f28 <sbrk_aligned>
 8003fde:	3001      	adds	r0, #1
 8003fe0:	d02b      	beq.n	800403a <_malloc_r+0xd2>
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	442b      	add	r3, r5
 8003fe6:	6023      	str	r3, [r4, #0]
 8003fe8:	e00e      	b.n	8004008 <_malloc_r+0xa0>
 8003fea:	6822      	ldr	r2, [r4, #0]
 8003fec:	1b52      	subs	r2, r2, r5
 8003fee:	d41e      	bmi.n	800402e <_malloc_r+0xc6>
 8003ff0:	2a0b      	cmp	r2, #11
 8003ff2:	d916      	bls.n	8004022 <_malloc_r+0xba>
 8003ff4:	1961      	adds	r1, r4, r5
 8003ff6:	42a3      	cmp	r3, r4
 8003ff8:	6025      	str	r5, [r4, #0]
 8003ffa:	bf18      	it	ne
 8003ffc:	6059      	strne	r1, [r3, #4]
 8003ffe:	6863      	ldr	r3, [r4, #4]
 8004000:	bf08      	it	eq
 8004002:	6031      	streq	r1, [r6, #0]
 8004004:	5162      	str	r2, [r4, r5]
 8004006:	604b      	str	r3, [r1, #4]
 8004008:	4638      	mov	r0, r7
 800400a:	f104 060b 	add.w	r6, r4, #11
 800400e:	f000 f865 	bl	80040dc <__malloc_unlock>
 8004012:	f026 0607 	bic.w	r6, r6, #7
 8004016:	1d23      	adds	r3, r4, #4
 8004018:	1af2      	subs	r2, r6, r3
 800401a:	d0b6      	beq.n	8003f8a <_malloc_r+0x22>
 800401c:	1b9b      	subs	r3, r3, r6
 800401e:	50a3      	str	r3, [r4, r2]
 8004020:	e7b3      	b.n	8003f8a <_malloc_r+0x22>
 8004022:	6862      	ldr	r2, [r4, #4]
 8004024:	42a3      	cmp	r3, r4
 8004026:	bf0c      	ite	eq
 8004028:	6032      	streq	r2, [r6, #0]
 800402a:	605a      	strne	r2, [r3, #4]
 800402c:	e7ec      	b.n	8004008 <_malloc_r+0xa0>
 800402e:	4623      	mov	r3, r4
 8004030:	6864      	ldr	r4, [r4, #4]
 8004032:	e7b2      	b.n	8003f9a <_malloc_r+0x32>
 8004034:	4634      	mov	r4, r6
 8004036:	6876      	ldr	r6, [r6, #4]
 8004038:	e7b9      	b.n	8003fae <_malloc_r+0x46>
 800403a:	230c      	movs	r3, #12
 800403c:	603b      	str	r3, [r7, #0]
 800403e:	4638      	mov	r0, r7
 8004040:	f000 f84c 	bl	80040dc <__malloc_unlock>
 8004044:	e7a1      	b.n	8003f8a <_malloc_r+0x22>
 8004046:	6025      	str	r5, [r4, #0]
 8004048:	e7de      	b.n	8004008 <_malloc_r+0xa0>
 800404a:	bf00      	nop
 800404c:	2000017c 	.word	0x2000017c

08004050 <_realloc_r>:
 8004050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004054:	4680      	mov	r8, r0
 8004056:	4614      	mov	r4, r2
 8004058:	460e      	mov	r6, r1
 800405a:	b921      	cbnz	r1, 8004066 <_realloc_r+0x16>
 800405c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004060:	4611      	mov	r1, r2
 8004062:	f7ff bf81 	b.w	8003f68 <_malloc_r>
 8004066:	b92a      	cbnz	r2, 8004074 <_realloc_r+0x24>
 8004068:	f7ff ff12 	bl	8003e90 <_free_r>
 800406c:	4625      	mov	r5, r4
 800406e:	4628      	mov	r0, r5
 8004070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004074:	f000 f838 	bl	80040e8 <_malloc_usable_size_r>
 8004078:	4284      	cmp	r4, r0
 800407a:	4607      	mov	r7, r0
 800407c:	d802      	bhi.n	8004084 <_realloc_r+0x34>
 800407e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004082:	d812      	bhi.n	80040aa <_realloc_r+0x5a>
 8004084:	4621      	mov	r1, r4
 8004086:	4640      	mov	r0, r8
 8004088:	f7ff ff6e 	bl	8003f68 <_malloc_r>
 800408c:	4605      	mov	r5, r0
 800408e:	2800      	cmp	r0, #0
 8004090:	d0ed      	beq.n	800406e <_realloc_r+0x1e>
 8004092:	42bc      	cmp	r4, r7
 8004094:	4622      	mov	r2, r4
 8004096:	4631      	mov	r1, r6
 8004098:	bf28      	it	cs
 800409a:	463a      	movcs	r2, r7
 800409c:	f7ff fed0 	bl	8003e40 <memcpy>
 80040a0:	4631      	mov	r1, r6
 80040a2:	4640      	mov	r0, r8
 80040a4:	f7ff fef4 	bl	8003e90 <_free_r>
 80040a8:	e7e1      	b.n	800406e <_realloc_r+0x1e>
 80040aa:	4635      	mov	r5, r6
 80040ac:	e7df      	b.n	800406e <_realloc_r+0x1e>
	...

080040b0 <_sbrk_r>:
 80040b0:	b538      	push	{r3, r4, r5, lr}
 80040b2:	4d06      	ldr	r5, [pc, #24]	; (80040cc <_sbrk_r+0x1c>)
 80040b4:	2300      	movs	r3, #0
 80040b6:	4604      	mov	r4, r0
 80040b8:	4608      	mov	r0, r1
 80040ba:	602b      	str	r3, [r5, #0]
 80040bc:	f7fc fe2c 	bl	8000d18 <_sbrk>
 80040c0:	1c43      	adds	r3, r0, #1
 80040c2:	d102      	bne.n	80040ca <_sbrk_r+0x1a>
 80040c4:	682b      	ldr	r3, [r5, #0]
 80040c6:	b103      	cbz	r3, 80040ca <_sbrk_r+0x1a>
 80040c8:	6023      	str	r3, [r4, #0]
 80040ca:	bd38      	pop	{r3, r4, r5, pc}
 80040cc:	20000184 	.word	0x20000184

080040d0 <__malloc_lock>:
 80040d0:	4801      	ldr	r0, [pc, #4]	; (80040d8 <__malloc_lock+0x8>)
 80040d2:	f000 b811 	b.w	80040f8 <__retarget_lock_acquire_recursive>
 80040d6:	bf00      	nop
 80040d8:	20000188 	.word	0x20000188

080040dc <__malloc_unlock>:
 80040dc:	4801      	ldr	r0, [pc, #4]	; (80040e4 <__malloc_unlock+0x8>)
 80040de:	f000 b80c 	b.w	80040fa <__retarget_lock_release_recursive>
 80040e2:	bf00      	nop
 80040e4:	20000188 	.word	0x20000188

080040e8 <_malloc_usable_size_r>:
 80040e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040ec:	1f18      	subs	r0, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bfbc      	itt	lt
 80040f2:	580b      	ldrlt	r3, [r1, r0]
 80040f4:	18c0      	addlt	r0, r0, r3
 80040f6:	4770      	bx	lr

080040f8 <__retarget_lock_acquire_recursive>:
 80040f8:	4770      	bx	lr

080040fa <__retarget_lock_release_recursive>:
 80040fa:	4770      	bx	lr

080040fc <_init>:
 80040fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fe:	bf00      	nop
 8004100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004102:	bc08      	pop	{r3}
 8004104:	469e      	mov	lr, r3
 8004106:	4770      	bx	lr

08004108 <_fini>:
 8004108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410a:	bf00      	nop
 800410c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800410e:	bc08      	pop	{r3}
 8004110:	469e      	mov	lr, r3
 8004112:	4770      	bx	lr
