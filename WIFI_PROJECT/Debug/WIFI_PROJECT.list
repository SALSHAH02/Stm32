
WIFI_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08004874  08004874  00014874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004990  08004990  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004990  08004990  00014990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004998  08004998  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004998  08004998  00014998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800499c  0800499c  0001499c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080049a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000074  08004a14  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08004a14  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b230  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019a6  00000000  00000000  0002b2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0002cc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002d5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000267fc  00000000  00000000  0002deb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b184  00000000  00000000  000546b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eaa78  00000000  00000000  0005f838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014a2b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d44  00000000  00000000  0014a300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800485c 	.word	0x0800485c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800485c 	.word	0x0800485c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fd8f 	bl	800109a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f8ca 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f94a 	bl	8000818 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000584:	f000 f918 	bl	80007b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 8000588:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800058c:	f000 fb6e 	bl	8000c6c <HAL_GPIO_EXTI_Callback>
   HAL_UART_Transmit(&huart1, "WIFI_PROJECT\n", 15, 500);
 8000590:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000594:	220f      	movs	r2, #15
 8000596:	4958      	ldr	r1, [pc, #352]	; (80006f8 <main+0x184>)
 8000598:	4858      	ldr	r0, [pc, #352]	; (80006fc <main+0x188>)
 800059a:	f002 fca3 	bl	8002ee4 <HAL_UART_Transmit>
  while (1)
   {
     /* USER CODE END WHILE */

     /* USER CODE BEGIN 3 */
 	  if(count==1)
 800059e:	4b58      	ldr	r3, [pc, #352]	; (8000700 <main+0x18c>)
 80005a0:	f993 3000 	ldrsb.w	r3, [r3]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d126      	bne.n	80005f6 <main+0x82>
 	  {   HAL_Delay(1000);
 80005a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ac:	f000 fdea 	bl	8001184 <HAL_Delay>
 		  HAL_UART_Transmit(&huart1, "single-tap\n", 7, 500);
 80005b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005b4:	2207      	movs	r2, #7
 80005b6:	4953      	ldr	r1, [pc, #332]	; (8000704 <main+0x190>)
 80005b8:	4850      	ldr	r0, [pc, #320]	; (80006fc <main+0x188>)
 80005ba:	f002 fc93 	bl	8002ee4 <HAL_UART_Transmit>
 		  HAL_Delay(100);
 80005be:	2064      	movs	r0, #100	; 0x64
 80005c0:	f000 fde0 	bl	8001184 <HAL_Delay>
		 if(!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)))
 80005c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c8:	484f      	ldr	r0, [pc, #316]	; (8000708 <main+0x194>)
 80005ca:	f001 f8bb 	bl	8001744 <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d103      	bne.n	80005dc <main+0x68>
 		  Button_WaitForPush(500);
 80005d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005d8:	f000 fb6a 	bl	8000cb0 <Button_WaitForPush>

		 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,0);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e6:	f001 f8c5 	bl	8001774 <HAL_GPIO_WritePin>
 		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 80005ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ee:	4847      	ldr	r0, [pc, #284]	; (800070c <main+0x198>)
 80005f0:	f001 f8d8 	bl	80017a4 <HAL_GPIO_TogglePin>
 80005f4:	e7d3      	b.n	800059e <main+0x2a>

 	  }
 	  else if(count==2)
 80005f6:	4b42      	ldr	r3, [pc, #264]	; (8000700 <main+0x18c>)
 80005f8:	f993 3000 	ldrsb.w	r3, [r3]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d125      	bne.n	800064c <main+0xd8>
 	  	  {
 		      HAL_Delay(1000);
 8000600:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000604:	f000 fdbe 	bl	8001184 <HAL_Delay>
 		      HAL_UART_Transmit(&huart1, "double-tap\n", 7, 500);
 8000608:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800060c:	2207      	movs	r2, #7
 800060e:	4940      	ldr	r1, [pc, #256]	; (8000710 <main+0x19c>)
 8000610:	483a      	ldr	r0, [pc, #232]	; (80006fc <main+0x188>)
 8000612:	f002 fc67 	bl	8002ee4 <HAL_UART_Transmit>
 	  	      HAL_Delay(100);
 8000616:	2064      	movs	r0, #100	; 0x64
 8000618:	f000 fdb4 	bl	8001184 <HAL_Delay>
 	  	   if(!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)))
 800061c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000620:	4839      	ldr	r0, [pc, #228]	; (8000708 <main+0x194>)
 8000622:	f001 f88f 	bl	8001744 <HAL_GPIO_ReadPin>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d102      	bne.n	8000632 <main+0xbe>
 	  	      Button_WaitForPush(100);
 800062c:	2064      	movs	r0, #100	; 0x64
 800062e:	f000 fb3f 	bl	8000cb0 <Button_WaitForPush>

 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,0);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000638:	4834      	ldr	r0, [pc, #208]	; (800070c <main+0x198>)
 800063a:	f001 f89b 	bl	8001774 <HAL_GPIO_WritePin>
 	  		  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_15);
 800063e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000646:	f001 f8ad 	bl	80017a4 <HAL_GPIO_TogglePin>
 800064a:	e7a8      	b.n	800059e <main+0x2a>

 	  	  }
 	  else if(count==3)
 800064c:	4b2c      	ldr	r3, [pc, #176]	; (8000700 <main+0x18c>)
 800064e:	f993 3000 	ldrsb.w	r3, [r3]
 8000652:	2b03      	cmp	r3, #3
 8000654:	d120      	bne.n	8000698 <main+0x124>
 	  	  {
 		      HAL_Delay(1000);
 8000656:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065a:	f000 fd93 	bl	8001184 <HAL_Delay>
 		  	 // HAL_UART_Transmit(&huart1, "SSID-3\n", 7, 500);
 		  	  HAL_Delay(100);
 800065e:	2064      	movs	r0, #100	; 0x64
 8000660:	f000 fd90 	bl	8001184 <HAL_Delay>
 		  	 if(!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)))
 8000664:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000668:	4827      	ldr	r0, [pc, #156]	; (8000708 <main+0x194>)
 800066a:	f001 f86b 	bl	8001744 <HAL_GPIO_ReadPin>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d103      	bne.n	800067c <main+0x108>
 		  	  Button_WaitForPush(50000);
 8000674:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000678:	f000 fb1a 	bl	8000cb0 <Button_WaitForPush>

 	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,1);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000682:	4822      	ldr	r0, [pc, #136]	; (800070c <main+0x198>)
 8000684:	f001 f876 	bl	8001774 <HAL_GPIO_WritePin>
 	  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,1);
 8000688:	2201      	movs	r2, #1
 800068a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800068e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000692:	f001 f86f 	bl	8001774 <HAL_GPIO_WritePin>
 8000696:	e782      	b.n	800059e <main+0x2a>


 	  	  }
 	  else if(count==4)
 8000698:	4b19      	ldr	r3, [pc, #100]	; (8000700 <main+0x18c>)
 800069a:	f993 3000 	ldrsb.w	r3, [r3]
 800069e:	2b04      	cmp	r3, #4
 80006a0:	d120      	bne.n	80006e4 <main+0x170>
 	 	  	  {
 		 HAL_Delay(1000);
 80006a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006a6:	f000 fd6d 	bl	8001184 <HAL_Delay>
 		//  HAL_UART_Transmit(&huart1, "SSID-4\n", 7, 500);
 		  HAL_Delay(100);
 80006aa:	2064      	movs	r0, #100	; 0x64
 80006ac:	f000 fd6a 	bl	8001184 <HAL_Delay>
 		 if(!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)))
 80006b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b4:	4814      	ldr	r0, [pc, #80]	; (8000708 <main+0x194>)
 80006b6:	f001 f845 	bl	8001744 <HAL_GPIO_ReadPin>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d103      	bne.n	80006c8 <main+0x154>
 		  Button_WaitForPush(50000);
 80006c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80006c4:	f000 faf4 	bl	8000cb0 <Button_WaitForPush>

 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ce:	480f      	ldr	r0, [pc, #60]	; (800070c <main+0x198>)
 80006d0:	f001 f850 	bl	8001774 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006de:	f001 f849 	bl	8001774 <HAL_GPIO_WritePin>
 80006e2:	e75c      	b.n	800059e <main+0x2a>

 	 	  	  }
 	  else if(count==5)
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <main+0x18c>)
 80006e6:	f993 3000 	ldrsb.w	r3, [r3]
 80006ea:	2b05      	cmp	r3, #5
 80006ec:	f47f af57 	bne.w	800059e <main+0x2a>
 	  {

 		  count=1;
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <main+0x18c>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	701a      	strb	r2, [r3, #0]
 	  if(count==1)
 80006f6:	e752      	b.n	800059e <main+0x2a>
 80006f8:	08004874 	.word	0x08004874
 80006fc:	20000090 	.word	0x20000090
 8000700:	20000000 	.word	0x20000000
 8000704:	08004884 	.word	0x08004884
 8000708:	48000800 	.word	0x48000800
 800070c:	48000400 	.word	0x48000400
 8000710:	08004890 	.word	0x08004890

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b096      	sub	sp, #88	; 0x58
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	2244      	movs	r2, #68	; 0x44
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f003 f904 	bl	8003930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	463b      	mov	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000736:	f44f 7000 	mov.w	r0, #512	; 0x200
 800073a:	f001 f873 	bl	8001824 <HAL_PWREx_ControlVoltageScaling>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000744:	f000 faf0 	bl	8000d28 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000748:	2310      	movs	r3, #16
 800074a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000754:	2360      	movs	r3, #96	; 0x60
 8000756:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2302      	movs	r3, #2
 800075a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800075c:	2301      	movs	r3, #1
 800075e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000760:	2301      	movs	r3, #1
 8000762:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000764:	2328      	movs	r3, #40	; 0x28
 8000766:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000768:	2307      	movs	r3, #7
 800076a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800076c:	2302      	movs	r3, #2
 800076e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000770:	2302      	movs	r3, #2
 8000772:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4618      	mov	r0, r3
 800077a:	f001 f8a9 	bl	80018d0 <HAL_RCC_OscConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000784:	f000 fad0 	bl	8000d28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000788:	230f      	movs	r3, #15
 800078a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078c:	2303      	movs	r3, #3
 800078e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800079c:	463b      	mov	r3, r7
 800079e:	2104      	movs	r1, #4
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 fc71 	bl	8002088 <HAL_RCC_ClockConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007ac:	f000 fabc 	bl	8000d28 <Error_Handler>
  }
}
 80007b0:	bf00      	nop
 80007b2:	3758      	adds	r7, #88	; 0x58
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007be:	4a15      	ldr	r2, [pc, #84]	; (8000814 <MX_USART1_UART_Init+0x5c>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_USART1_UART_Init+0x58>)
 80007fc:	f002 fb24 	bl	8002e48 <HAL_UART_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000806:	f000 fa8f 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000090 	.word	0x20000090
 8000814:	40013800 	.word	0x40013800

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800082e:	4bbc      	ldr	r3, [pc, #752]	; (8000b20 <MX_GPIO_Init+0x308>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	4abb      	ldr	r2, [pc, #748]	; (8000b20 <MX_GPIO_Init+0x308>)
 8000834:	f043 0310 	orr.w	r3, r3, #16
 8000838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083a:	4bb9      	ldr	r3, [pc, #740]	; (8000b20 <MX_GPIO_Init+0x308>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	f003 0310 	and.w	r3, r3, #16
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	4bb6      	ldr	r3, [pc, #728]	; (8000b20 <MX_GPIO_Init+0x308>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4ab5      	ldr	r2, [pc, #724]	; (8000b20 <MX_GPIO_Init+0x308>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4bb3      	ldr	r3, [pc, #716]	; (8000b20 <MX_GPIO_Init+0x308>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4bb0      	ldr	r3, [pc, #704]	; (8000b20 <MX_GPIO_Init+0x308>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4aaf      	ldr	r2, [pc, #700]	; (8000b20 <MX_GPIO_Init+0x308>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4bad      	ldr	r3, [pc, #692]	; (8000b20 <MX_GPIO_Init+0x308>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	4baa      	ldr	r3, [pc, #680]	; (8000b20 <MX_GPIO_Init+0x308>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	4aa9      	ldr	r2, [pc, #676]	; (8000b20 <MX_GPIO_Init+0x308>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000882:	4ba7      	ldr	r3, [pc, #668]	; (8000b20 <MX_GPIO_Init+0x308>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088e:	4ba4      	ldr	r3, [pc, #656]	; (8000b20 <MX_GPIO_Init+0x308>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	4aa3      	ldr	r2, [pc, #652]	; (8000b20 <MX_GPIO_Init+0x308>)
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089a:	4ba1      	ldr	r3, [pc, #644]	; (8000b20 <MX_GPIO_Init+0x308>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80008ac:	489d      	ldr	r0, [pc, #628]	; (8000b24 <MX_GPIO_Init+0x30c>)
 80008ae:	f000 ff61 	bl	8001774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f248 1104 	movw	r1, #33028	; 0x8104
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008bc:	f000 ff5a 	bl	8001774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80008c0:	2200      	movs	r2, #0
 80008c2:	f24f 0114 	movw	r1, #61460	; 0xf014
 80008c6:	4898      	ldr	r0, [pc, #608]	; (8000b28 <MX_GPIO_Init+0x310>)
 80008c8:	f000 ff54 	bl	8001774 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	f241 0181 	movw	r1, #4225	; 0x1081
 80008d2:	4896      	ldr	r0, [pc, #600]	; (8000b2c <MX_GPIO_Init+0x314>)
 80008d4:	f000 ff4e 	bl	8001774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008de:	4893      	ldr	r0, [pc, #588]	; (8000b2c <MX_GPIO_Init+0x314>)
 80008e0:	f000 ff48 	bl	8001774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80008ea:	4891      	ldr	r0, [pc, #580]	; (8000b30 <MX_GPIO_Init+0x318>)
 80008ec:	f000 ff42 	bl	8001774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2120      	movs	r1, #32
 80008f4:	488c      	ldr	r0, [pc, #560]	; (8000b28 <MX_GPIO_Init+0x310>)
 80008f6:	f000 ff3d 	bl	8001774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80008fa:	2201      	movs	r2, #1
 80008fc:	2101      	movs	r1, #1
 80008fe:	4889      	ldr	r0, [pc, #548]	; (8000b24 <MX_GPIO_Init+0x30c>)
 8000900:	f000 ff38 	bl	8001774 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000904:	f240 1315 	movw	r3, #277	; 0x115
 8000908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	4881      	ldr	r0, [pc, #516]	; (8000b24 <MX_GPIO_Init+0x30c>)
 800091e:	f000 fd67 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000922:	236a      	movs	r3, #106	; 0x6a
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000926:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800092a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	487b      	ldr	r0, [pc, #492]	; (8000b24 <MX_GPIO_Init+0x30c>)
 8000938:	f000 fd5a 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800093c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000942:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4619      	mov	r1, r3
 8000952:	4877      	ldr	r0, [pc, #476]	; (8000b30 <MX_GPIO_Init+0x318>)
 8000954:	f000 fd4c 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000958:	233f      	movs	r3, #63	; 0x3f
 800095a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800095c:	230b      	movs	r3, #11
 800095e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	4871      	ldr	r0, [pc, #452]	; (8000b30 <MX_GPIO_Init+0x318>)
 800096c:	f000 fd40 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000970:	2303      	movs	r3, #3
 8000972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097c:	2303      	movs	r3, #3
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000980:	2308      	movs	r3, #8
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098e:	f000 fd2f 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000992:	f248 1304 	movw	r3, #33028	; 0x8104
 8000996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ae:	f000 fd1f 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80009b2:	2308      	movs	r3, #8
 80009b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009c2:	2301      	movs	r3, #1
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d0:	f000 fd0e 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80009d4:	2310      	movs	r3, #16
 80009d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009d8:	230b      	movs	r3, #11
 80009da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ea:	f000 fd01 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80009ee:	23e0      	movs	r3, #224	; 0xe0
 80009f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009fe:	2305      	movs	r3, #5
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0c:	f000 fcf0 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000a10:	2301      	movs	r3, #1
 8000a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a14:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	4840      	ldr	r0, [pc, #256]	; (8000b28 <MX_GPIO_Init+0x310>)
 8000a26:	f000 fce3 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a2e:	230b      	movs	r3, #11
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	483a      	ldr	r0, [pc, #232]	; (8000b28 <MX_GPIO_Init+0x310>)
 8000a3e:	f000 fcd7 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000a42:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000a46:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4833      	ldr	r0, [pc, #204]	; (8000b28 <MX_GPIO_Init+0x310>)
 8000a5c:	f000 fcc8 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000a60:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000a72:	2306      	movs	r3, #6
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4829      	ldr	r0, [pc, #164]	; (8000b24 <MX_GPIO_Init+0x30c>)
 8000a7e:	f000 fcb7 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000a82:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000a86:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000a94:	230a      	movs	r3, #10
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4821      	ldr	r0, [pc, #132]	; (8000b24 <MX_GPIO_Init+0x30c>)
 8000aa0:	f000 fca6 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000aa4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aaa:	2312      	movs	r3, #18
 8000aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4819      	ldr	r0, [pc, #100]	; (8000b28 <MX_GPIO_Init+0x310>)
 8000ac2:	f000 fc95 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000ac6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ad8:	2307      	movs	r3, #7
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4812      	ldr	r0, [pc, #72]	; (8000b2c <MX_GPIO_Init+0x314>)
 8000ae4:	f000 fc84 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000ae8:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000aec:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	480b      	ldr	r0, [pc, #44]	; (8000b2c <MX_GPIO_Init+0x314>)
 8000b00:	f000 fc76 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b04:	f243 0381 	movw	r3, #12417	; 0x3081
 8000b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	e00a      	b.n	8000b34 <MX_GPIO_Init+0x31c>
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000
 8000b24:	48001000 	.word	0x48001000
 8000b28:	48000400 	.word	0x48000400
 8000b2c:	48000c00 	.word	0x48000c00
 8000b30:	48000800 	.word	0x48000800
 8000b34:	484a      	ldr	r0, [pc, #296]	; (8000c60 <MX_GPIO_Init+0x448>)
 8000b36:	f000 fc5b 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b3a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	4844      	ldr	r0, [pc, #272]	; (8000c64 <MX_GPIO_Init+0x44c>)
 8000b54:	f000 fc4c 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000b58:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	483d      	ldr	r0, [pc, #244]	; (8000c64 <MX_GPIO_Init+0x44c>)
 8000b70:	f000 fc3e 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8c:	f000 fc30 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000b90:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ba2:	230a      	movs	r3, #10
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb0:	f000 fc1e 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000bb4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bc6:	2306      	movs	r3, #6
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4824      	ldr	r0, [pc, #144]	; (8000c64 <MX_GPIO_Init+0x44c>)
 8000bd2:	f000 fc0d 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000be6:	2305      	movs	r3, #5
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	481b      	ldr	r0, [pc, #108]	; (8000c60 <MX_GPIO_Init+0x448>)
 8000bf2:	f000 fbfd 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000bf6:	2378      	movs	r3, #120	; 0x78
 8000bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c06:	2307      	movs	r3, #7
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4813      	ldr	r0, [pc, #76]	; (8000c60 <MX_GPIO_Init+0x448>)
 8000c12:	f000 fbed 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c1c:	2312      	movs	r3, #18
 8000c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c28:	2304      	movs	r3, #4
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	480d      	ldr	r0, [pc, #52]	; (8000c68 <MX_GPIO_Init+0x450>)
 8000c34:	f000 fbdc 	bl	80013f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2017      	movs	r0, #23
 8000c3e:	f000 fba0 	bl	8001382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c42:	2017      	movs	r0, #23
 8000c44:	f000 fbb9 	bl	80013ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2028      	movs	r0, #40	; 0x28
 8000c4e:	f000 fb98 	bl	8001382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c52:	2028      	movs	r0, #40	; 0x28
 8000c54:	f000 fbb1 	bl	80013ba <HAL_NVIC_EnableIRQ>

}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	; 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	48000c00 	.word	0x48000c00
 8000c64:	48000800 	.word	0x48000800
 8000c68:	48000400 	.word	0x48000400

08000c6c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	80fb      	strh	r3, [r7, #6]
if(GPIO_Pin == GPIO_PIN_13)
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c7c:	d10c      	bne.n	8000c98 <HAL_GPIO_EXTI_Callback+0x2c>
{
		count++;
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000c80:	f993 3000 	ldrsb.w	r3, [r3]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	3301      	adds	r3, #1
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	b25a      	sxtb	r2, r3
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000c8e:	701a      	strb	r2, [r3, #0]
		button_flag=1;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_GPIO_EXTI_Callback+0x40>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	701a      	strb	r2, [r3, #0]
}
else {
__NOP();
	}
}
 8000c96:	e000      	b.n	8000c9a <HAL_GPIO_EXTI_Callback+0x2e>
__NOP();
 8000c98:	bf00      	nop
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	20000114 	.word	0x20000114

08000cb0 <Button_WaitForPush>:



uint8_t Button_WaitForPush(uint32_t delay)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b09c      	sub	sp, #112	; 0x70
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t time_out;
char buff[100];

  while(!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)))
 8000cb8:	e01f      	b.n	8000cfa <Button_WaitForPush+0x4a>
  {		time_out= HAL_GetTick();
 8000cba:	f000 fa57 	bl	800116c <HAL_GetTick>
 8000cbe:	66f8      	str	r0, [r7, #108]	; 0x6c
//  	  	sprintf(buff,"timeout=%u\n",time_out);
//        HAL_UART_Transmit(&huart1,buff,50 , 500);
	  if(( ((HAL_GetTick()- time_out)) < delay))
 8000cc0:	f000 fa54 	bl	800116c <HAL_GetTick>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d911      	bls.n	8000cf4 <Button_WaitForPush+0x44>
	  {

		  HAL_UART_Transmit(&huart1, "SSID_SELECTED\n", 15, 500);
 8000cd0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cd4:	220f      	movs	r2, #15
 8000cd6:	490f      	ldr	r1, [pc, #60]	; (8000d14 <Button_WaitForPush+0x64>)
 8000cd8:	480f      	ldr	r0, [pc, #60]	; (8000d18 <Button_WaitForPush+0x68>)
 8000cda:	f002 f903 	bl	8002ee4 <HAL_UART_Transmit>
		  printf("%d\n",HAL_GetTick());
 8000cde:	f000 fa45 	bl	800116c <HAL_GetTick>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	480d      	ldr	r0, [pc, #52]	; (8000d1c <Button_WaitForPush+0x6c>)
 8000ce8:	f002 fe2a 	bl	8003940 <iprintf>
		  count=-1;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <Button_WaitForPush+0x70>)
 8000cee:	22ff      	movs	r2, #255	; 0xff
 8000cf0:	701a      	strb	r2, [r3, #0]
		  break;
 8000cf2:	e00a      	b.n	8000d0a <Button_WaitForPush+0x5a>
	  }

	  HAL_Delay(100);
 8000cf4:	2064      	movs	r0, #100	; 0x64
 8000cf6:	f000 fa45 	bl	8001184 <HAL_Delay>
  while(!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)))
 8000cfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfe:	4809      	ldr	r0, [pc, #36]	; (8000d24 <Button_WaitForPush+0x74>)
 8000d00:	f000 fd20 	bl	8001744 <HAL_GPIO_ReadPin>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0d7      	beq.n	8000cba <Button_WaitForPush+0xa>
//    }
//    HAL_Delay(100);
//  }
//  while (HAL_GetTick() < time_out);

  return 0;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3770      	adds	r7, #112	; 0x70
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	0800489c 	.word	0x0800489c
 8000d18:	20000090 	.word	0x20000090
 8000d1c:	080048ac 	.word	0x080048ac
 8000d20:	20000000 	.word	0x20000000
 8000d24:	48000800 	.word	0x48000800

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2c:	b672      	cpsid	i
}
 8000d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <Error_Handler+0x8>
	...

08000d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <HAL_MspInit+0x44>)
 8000d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d3e:	4a0e      	ldr	r2, [pc, #56]	; (8000d78 <HAL_MspInit+0x44>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6613      	str	r3, [r2, #96]	; 0x60
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <HAL_MspInit+0x44>)
 8000d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <HAL_MspInit+0x44>)
 8000d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d56:	4a08      	ldr	r2, [pc, #32]	; (8000d78 <HAL_MspInit+0x44>)
 8000d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_MspInit+0x44>)
 8000d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40021000 	.word	0x40021000

08000d7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b0ac      	sub	sp, #176	; 0xb0
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2288      	movs	r2, #136	; 0x88
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f002 fdc7 	bl	8003930 <memset>
  if(huart->Instance==USART1)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a21      	ldr	r2, [pc, #132]	; (8000e2c <HAL_UART_MspInit+0xb0>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d13a      	bne.n	8000e22 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dac:	2301      	movs	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000db0:	2300      	movs	r3, #0
 8000db2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 fb89 	bl	80024d0 <HAL_RCCEx_PeriphCLKConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dc4:	f7ff ffb0 	bl	8000d28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dc8:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_UART_MspInit+0xb4>)
 8000dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dcc:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <HAL_UART_MspInit+0xb4>)
 8000dce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd2:	6613      	str	r3, [r2, #96]	; 0x60
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <HAL_UART_MspInit+0xb4>)
 8000dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <HAL_UART_MspInit+0xb4>)
 8000de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de4:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <HAL_UART_MspInit+0xb4>)
 8000de6:	f043 0302 	orr.w	r3, r3, #2
 8000dea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dec:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <HAL_UART_MspInit+0xb4>)
 8000dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000df8:	23c0      	movs	r3, #192	; 0xc0
 8000dfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e10:	2307      	movs	r3, #7
 8000e12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4805      	ldr	r0, [pc, #20]	; (8000e34 <HAL_UART_MspInit+0xb8>)
 8000e1e:	f000 fae7 	bl	80013f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e22:	bf00      	nop
 8000e24:	37b0      	adds	r7, #176	; 0xb0
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40013800 	.word	0x40013800
 8000e30:	40021000 	.word	0x40021000
 8000e34:	48000400 	.word	0x48000400

08000e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <NMI_Handler+0x4>

08000e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <HardFault_Handler+0x4>

08000e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <MemManage_Handler+0x4>

08000e4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <BusFault_Handler+0x4>

08000e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <UsageFault_Handler+0x4>

08000e56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e84:	f000 f95e 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000e90:	2020      	movs	r0, #32
 8000e92:	f000 fca1 	bl	80017d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000e96:	2040      	movs	r0, #64	; 0x40
 8000e98:	f000 fc9e 	bl	80017d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000e9c:	2080      	movs	r0, #128	; 0x80
 8000e9e:	f000 fc9b 	bl	80017d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000ea2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ea6:	f000 fc97 	bl	80017d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}

08000eae <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000eb2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000eb6:	f000 fc8f 	bl	80017d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000eba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000ebe:	f000 fc8b 	bl	80017d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ec2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ec6:	f000 fc87 	bl	80017d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000eca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ece:	f000 fc83 	bl	80017d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000ed2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ed6:	f000 fc7f 	bl	80017d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}

08000ede <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b086      	sub	sp, #24
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	60f8      	str	r0, [r7, #12]
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	e00a      	b.n	8000f06 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ef0:	f3af 8000 	nop.w
 8000ef4:	4601      	mov	r1, r0
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	1c5a      	adds	r2, r3, #1
 8000efa:	60ba      	str	r2, [r7, #8]
 8000efc:	b2ca      	uxtb	r2, r1
 8000efe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	3301      	adds	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	dbf0      	blt.n	8000ef0 <_read+0x12>
	}

return len;
 8000f0e:	687b      	ldr	r3, [r7, #4]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	e009      	b.n	8000f3e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	1c5a      	adds	r2, r3, #1
 8000f2e:	60ba      	str	r2, [r7, #8]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	dbf1      	blt.n	8000f2a <_write+0x12>
	}
	return len;
 8000f46:	687b      	ldr	r3, [r7, #4]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <_close>:

int _close(int file)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	return -1;
 8000f58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f78:	605a      	str	r2, [r3, #4]
	return 0;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <_isatty>:

int _isatty(int file)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	return 1;
 8000f90:	2301      	movs	r3, #1
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b085      	sub	sp, #20
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	60f8      	str	r0, [r7, #12]
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
	return 0;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc0:	4a14      	ldr	r2, [pc, #80]	; (8001014 <_sbrk+0x5c>)
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <_sbrk+0x60>)
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <_sbrk+0x64>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	; (8001020 <_sbrk+0x68>)
 8000fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d207      	bcs.n	8000ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe8:	f002 fc78 	bl	80038dc <__errno>
 8000fec:	4603      	mov	r3, r0
 8000fee:	220c      	movs	r2, #12
 8000ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	e009      	b.n	800100c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	4a05      	ldr	r2, [pc, #20]	; (800101c <_sbrk+0x64>)
 8001008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20018000 	.word	0x20018000
 8001018:	00000400 	.word	0x00000400
 800101c:	20000118 	.word	0x20000118
 8001020:	20000130 	.word	0x20000130

08001024 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <SystemInit+0x20>)
 800102a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <SystemInit+0x20>)
 8001030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001080 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800104c:	f7ff ffea 	bl	8001024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <LoopForever+0x6>)
  ldr r1, =_edata
 8001052:	490d      	ldr	r1, [pc, #52]	; (8001088 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001054:	4a0d      	ldr	r2, [pc, #52]	; (800108c <LoopForever+0xe>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001058:	e002      	b.n	8001060 <LoopCopyDataInit>

0800105a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800105c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105e:	3304      	adds	r3, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001064:	d3f9      	bcc.n	800105a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001068:	4c0a      	ldr	r4, [pc, #40]	; (8001094 <LoopForever+0x16>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800106c:	e001      	b.n	8001072 <LoopFillZerobss>

0800106e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001070:	3204      	adds	r2, #4

08001072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001074:	d3fb      	bcc.n	800106e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001076:	f002 fc37 	bl	80038e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800107a:	f7ff fa7b 	bl	8000574 <main>

0800107e <LoopForever>:

LoopForever:
    b LoopForever
 800107e:	e7fe      	b.n	800107e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001080:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800108c:	080049a0 	.word	0x080049a0
  ldr r2, =_sbss
 8001090:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001094:	20000130 	.word	0x20000130

08001098 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC1_2_IRQHandler>

0800109a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010a0:	2300      	movs	r3, #0
 80010a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 f961 	bl	800136c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010aa:	2000      	movs	r0, #0
 80010ac:	f000 f80e 	bl	80010cc <HAL_InitTick>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d002      	beq.n	80010bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	71fb      	strb	r3, [r7, #7]
 80010ba:	e001      	b.n	80010c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010bc:	f7ff fe3a 	bl	8000d34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010c0:	79fb      	ldrb	r3, [r7, #7]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_InitTick+0x6c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d023      	beq.n	8001128 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010e0:	4b16      	ldr	r3, [pc, #88]	; (800113c <HAL_InitTick+0x70>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <HAL_InitTick+0x6c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4619      	mov	r1, r3
 80010ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f96d 	bl	80013d6 <HAL_SYSTICK_Config>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10f      	bne.n	8001122 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b0f      	cmp	r3, #15
 8001106:	d809      	bhi.n	800111c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001108:	2200      	movs	r2, #0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f000 f937 	bl	8001382 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001114:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <HAL_InitTick+0x74>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	e007      	b.n	800112c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e004      	b.n	800112c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	73fb      	strb	r3, [r7, #15]
 8001126:	e001      	b.n	800112c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000000c 	.word	0x2000000c
 800113c:	20000004 	.word	0x20000004
 8001140:	20000008 	.word	0x20000008

08001144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x20>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_IncTick+0x24>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <HAL_IncTick+0x24>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	2000000c 	.word	0x2000000c
 8001168:	2000011c 	.word	0x2000011c

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	2000011c 	.word	0x2000011c

08001184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff ffee 	bl	800116c <HAL_GetTick>
 8001190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800119c:	d005      	beq.n	80011aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_Delay+0x44>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011aa:	bf00      	nop
 80011ac:	f7ff ffde 	bl	800116c <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d8f7      	bhi.n	80011ac <HAL_Delay+0x28>
  {
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2000000c 	.word	0x2000000c

080011cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fe:	4a04      	ldr	r2, [pc, #16]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db0b      	blt.n	800125a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f003 021f 	and.w	r2, r3, #31
 8001248:	4907      	ldr	r1, [pc, #28]	; (8001268 <__NVIC_EnableIRQ+0x38>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	2001      	movs	r0, #1
 8001252:	fa00 f202 	lsl.w	r2, r0, r2
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000e100 	.word	0xe000e100

0800126c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db0a      	blt.n	8001296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	490c      	ldr	r1, [pc, #48]	; (80012b8 <__NVIC_SetPriority+0x4c>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	0112      	lsls	r2, r2, #4
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	440b      	add	r3, r1
 8001290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001294:	e00a      	b.n	80012ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4908      	ldr	r1, [pc, #32]	; (80012bc <__NVIC_SetPriority+0x50>)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	3b04      	subs	r3, #4
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	440b      	add	r3, r1
 80012aa:	761a      	strb	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f1c3 0307 	rsb	r3, r3, #7
 80012da:	2b04      	cmp	r3, #4
 80012dc:	bf28      	it	cs
 80012de:	2304      	movcs	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d902      	bls.n	80012f0 <NVIC_EncodePriority+0x30>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3b03      	subs	r3, #3
 80012ee:	e000      	b.n	80012f2 <NVIC_EncodePriority+0x32>
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001308:	f04f 31ff 	mov.w	r1, #4294967295
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43d9      	mvns	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
         );
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001338:	d301      	bcc.n	800133e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133a:	2301      	movs	r3, #1
 800133c:	e00f      	b.n	800135e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <SysTick_Config+0x40>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001346:	210f      	movs	r1, #15
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f7ff ff8e 	bl	800126c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <SysTick_Config+0x40>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <SysTick_Config+0x40>)
 8001358:	2207      	movs	r2, #7
 800135a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	e000e010 	.word	0xe000e010

0800136c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff29 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001394:	f7ff ff3e 	bl	8001214 <__NVIC_GetPriorityGrouping>
 8001398:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	68b9      	ldr	r1, [r7, #8]
 800139e:	6978      	ldr	r0, [r7, #20]
 80013a0:	f7ff ff8e 	bl	80012c0 <NVIC_EncodePriority>
 80013a4:	4602      	mov	r2, r0
 80013a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff5d 	bl	800126c <__NVIC_SetPriority>
}
 80013b2:	bf00      	nop
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff31 	bl	8001230 <__NVIC_EnableIRQ>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ffa2 	bl	8001328 <SysTick_Config>
 80013e4:	4603      	mov	r3, r0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b087      	sub	sp, #28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fe:	e17f      	b.n	8001700 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	2101      	movs	r1, #1
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	fa01 f303 	lsl.w	r3, r1, r3
 800140c:	4013      	ands	r3, r2
 800140e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 8171 	beq.w	80016fa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b01      	cmp	r3, #1
 8001422:	d005      	beq.n	8001430 <HAL_GPIO_Init+0x40>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d130      	bne.n	8001492 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	2203      	movs	r2, #3
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001466:	2201      	movs	r2, #1
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	091b      	lsrs	r3, r3, #4
 800147c:	f003 0201 	and.w	r2, r3, #1
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b03      	cmp	r3, #3
 800149c:	d118      	bne.n	80014d0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014a4:	2201      	movs	r2, #1
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	08db      	lsrs	r3, r3, #3
 80014ba:	f003 0201 	and.w	r2, r3, #1
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d017      	beq.n	800150c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d123      	bne.n	8001560 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	08da      	lsrs	r2, r3, #3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3208      	adds	r2, #8
 8001520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001524:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	220f      	movs	r2, #15
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4013      	ands	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	691a      	ldr	r2, [r3, #16]
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	08da      	lsrs	r2, r3, #3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3208      	adds	r2, #8
 800155a:	6939      	ldr	r1, [r7, #16]
 800155c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	2203      	movs	r2, #3
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 0203 	and.w	r2, r3, #3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 80ac 	beq.w	80016fa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	4b5f      	ldr	r3, [pc, #380]	; (8001720 <HAL_GPIO_Init+0x330>)
 80015a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a6:	4a5e      	ldr	r2, [pc, #376]	; (8001720 <HAL_GPIO_Init+0x330>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6613      	str	r3, [r2, #96]	; 0x60
 80015ae:	4b5c      	ldr	r3, [pc, #368]	; (8001720 <HAL_GPIO_Init+0x330>)
 80015b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015ba:	4a5a      	ldr	r2, [pc, #360]	; (8001724 <HAL_GPIO_Init+0x334>)
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3302      	adds	r3, #2
 80015c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	220f      	movs	r2, #15
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015e4:	d025      	beq.n	8001632 <HAL_GPIO_Init+0x242>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a4f      	ldr	r2, [pc, #316]	; (8001728 <HAL_GPIO_Init+0x338>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d01f      	beq.n	800162e <HAL_GPIO_Init+0x23e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a4e      	ldr	r2, [pc, #312]	; (800172c <HAL_GPIO_Init+0x33c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d019      	beq.n	800162a <HAL_GPIO_Init+0x23a>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4d      	ldr	r2, [pc, #308]	; (8001730 <HAL_GPIO_Init+0x340>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d013      	beq.n	8001626 <HAL_GPIO_Init+0x236>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4c      	ldr	r2, [pc, #304]	; (8001734 <HAL_GPIO_Init+0x344>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d00d      	beq.n	8001622 <HAL_GPIO_Init+0x232>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4b      	ldr	r2, [pc, #300]	; (8001738 <HAL_GPIO_Init+0x348>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d007      	beq.n	800161e <HAL_GPIO_Init+0x22e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4a      	ldr	r2, [pc, #296]	; (800173c <HAL_GPIO_Init+0x34c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d101      	bne.n	800161a <HAL_GPIO_Init+0x22a>
 8001616:	2306      	movs	r3, #6
 8001618:	e00c      	b.n	8001634 <HAL_GPIO_Init+0x244>
 800161a:	2307      	movs	r3, #7
 800161c:	e00a      	b.n	8001634 <HAL_GPIO_Init+0x244>
 800161e:	2305      	movs	r3, #5
 8001620:	e008      	b.n	8001634 <HAL_GPIO_Init+0x244>
 8001622:	2304      	movs	r3, #4
 8001624:	e006      	b.n	8001634 <HAL_GPIO_Init+0x244>
 8001626:	2303      	movs	r3, #3
 8001628:	e004      	b.n	8001634 <HAL_GPIO_Init+0x244>
 800162a:	2302      	movs	r3, #2
 800162c:	e002      	b.n	8001634 <HAL_GPIO_Init+0x244>
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <HAL_GPIO_Init+0x244>
 8001632:	2300      	movs	r3, #0
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	f002 0203 	and.w	r2, r2, #3
 800163a:	0092      	lsls	r2, r2, #2
 800163c:	4093      	lsls	r3, r2
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001644:	4937      	ldr	r1, [pc, #220]	; (8001724 <HAL_GPIO_Init+0x334>)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	089b      	lsrs	r3, r3, #2
 800164a:	3302      	adds	r3, #2
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001652:	4b3b      	ldr	r3, [pc, #236]	; (8001740 <HAL_GPIO_Init+0x350>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	43db      	mvns	r3, r3
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001676:	4a32      	ldr	r2, [pc, #200]	; (8001740 <HAL_GPIO_Init+0x350>)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800167c:	4b30      	ldr	r3, [pc, #192]	; (8001740 <HAL_GPIO_Init+0x350>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	43db      	mvns	r3, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016a0:	4a27      	ldr	r2, [pc, #156]	; (8001740 <HAL_GPIO_Init+0x350>)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <HAL_GPIO_Init+0x350>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016ca:	4a1d      	ldr	r2, [pc, #116]	; (8001740 <HAL_GPIO_Init+0x350>)
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_GPIO_Init+0x350>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	43db      	mvns	r3, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016f4:	4a12      	ldr	r2, [pc, #72]	; (8001740 <HAL_GPIO_Init+0x350>)
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa22 f303 	lsr.w	r3, r2, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	f47f ae78 	bne.w	8001400 <HAL_GPIO_Init+0x10>
  }
}
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	371c      	adds	r7, #28
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40021000 	.word	0x40021000
 8001724:	40010000 	.word	0x40010000
 8001728:	48000400 	.word	0x48000400
 800172c:	48000800 	.word	0x48000800
 8001730:	48000c00 	.word	0x48000c00
 8001734:	48001000 	.word	0x48001000
 8001738:	48001400 	.word	0x48001400
 800173c:	48001800 	.word	0x48001800
 8001740:	40010400 	.word	0x40010400

08001744 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691a      	ldr	r2, [r3, #16]
 8001754:	887b      	ldrh	r3, [r7, #2]
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d002      	beq.n	8001762 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	e001      	b.n	8001766 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
 8001780:	4613      	mov	r3, r2
 8001782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001784:	787b      	ldrb	r3, [r7, #1]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800178a:	887a      	ldrh	r2, [r7, #2]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001790:	e002      	b.n	8001798 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001792:	887a      	ldrh	r2, [r7, #2]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4013      	ands	r3, r2
 80017bc:	041a      	lsls	r2, r3, #16
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	43d9      	mvns	r1, r3
 80017c2:	887b      	ldrh	r3, [r7, #2]
 80017c4:	400b      	ands	r3, r1
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	619a      	str	r2, [r3, #24]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017e4:	695a      	ldr	r2, [r3, #20]
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d006      	beq.n	80017fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fa38 	bl	8000c6c <HAL_GPIO_EXTI_Callback>
  }
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40010400 	.word	0x40010400

08001808 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <HAL_PWREx_GetVoltageRange+0x18>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40007000 	.word	0x40007000

08001824 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001832:	d130      	bne.n	8001896 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001834:	4b23      	ldr	r3, [pc, #140]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800183c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001840:	d038      	beq.n	80018b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001842:	4b20      	ldr	r3, [pc, #128]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800184a:	4a1e      	ldr	r2, [pc, #120]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800184c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001850:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001852:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2232      	movs	r2, #50	; 0x32
 8001858:	fb02 f303 	mul.w	r3, r2, r3
 800185c:	4a1b      	ldr	r2, [pc, #108]	; (80018cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800185e:	fba2 2303 	umull	r2, r3, r2, r3
 8001862:	0c9b      	lsrs	r3, r3, #18
 8001864:	3301      	adds	r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001868:	e002      	b.n	8001870 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	3b01      	subs	r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800187c:	d102      	bne.n	8001884 <HAL_PWREx_ControlVoltageScaling+0x60>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1f2      	bne.n	800186a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001890:	d110      	bne.n	80018b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e00f      	b.n	80018b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800189e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018a2:	d007      	beq.n	80018b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018ac:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40007000 	.word	0x40007000
 80018c8:	20000004 	.word	0x20000004
 80018cc:	431bde83 	.word	0x431bde83

080018d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e3ca      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018e2:	4b97      	ldr	r3, [pc, #604]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018ec:	4b94      	ldr	r3, [pc, #592]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0310 	and.w	r3, r3, #16
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 80e4 	beq.w	8001acc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d007      	beq.n	800191a <HAL_RCC_OscConfig+0x4a>
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	2b0c      	cmp	r3, #12
 800190e:	f040 808b 	bne.w	8001a28 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2b01      	cmp	r3, #1
 8001916:	f040 8087 	bne.w	8001a28 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800191a:	4b89      	ldr	r3, [pc, #548]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <HAL_RCC_OscConfig+0x62>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e3a2      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a1a      	ldr	r2, [r3, #32]
 8001936:	4b82      	ldr	r3, [pc, #520]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d004      	beq.n	800194c <HAL_RCC_OscConfig+0x7c>
 8001942:	4b7f      	ldr	r3, [pc, #508]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800194a:	e005      	b.n	8001958 <HAL_RCC_OscConfig+0x88>
 800194c:	4b7c      	ldr	r3, [pc, #496]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 800194e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001952:	091b      	lsrs	r3, r3, #4
 8001954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001958:	4293      	cmp	r3, r2
 800195a:	d223      	bcs.n	80019a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	4618      	mov	r0, r3
 8001962:	f000 fd55 	bl	8002410 <RCC_SetFlashLatencyFromMSIRange>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e383      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001970:	4b73      	ldr	r3, [pc, #460]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a72      	ldr	r2, [pc, #456]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001976:	f043 0308 	orr.w	r3, r3, #8
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b70      	ldr	r3, [pc, #448]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	496d      	ldr	r1, [pc, #436]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800198e:	4b6c      	ldr	r3, [pc, #432]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	4968      	ldr	r1, [pc, #416]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	604b      	str	r3, [r1, #4]
 80019a2:	e025      	b.n	80019f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019a4:	4b66      	ldr	r3, [pc, #408]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a65      	ldr	r2, [pc, #404]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 80019aa:	f043 0308 	orr.w	r3, r3, #8
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	4b63      	ldr	r3, [pc, #396]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	4960      	ldr	r1, [pc, #384]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019c2:	4b5f      	ldr	r3, [pc, #380]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	021b      	lsls	r3, r3, #8
 80019d0:	495b      	ldr	r1, [pc, #364]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d109      	bne.n	80019f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 fd15 	bl	8002410 <RCC_SetFlashLatencyFromMSIRange>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e343      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019f0:	f000 fc4a 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 80019f4:	4602      	mov	r2, r0
 80019f6:	4b52      	ldr	r3, [pc, #328]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	091b      	lsrs	r3, r3, #4
 80019fc:	f003 030f 	and.w	r3, r3, #15
 8001a00:	4950      	ldr	r1, [pc, #320]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001a02:	5ccb      	ldrb	r3, [r1, r3]
 8001a04:	f003 031f 	and.w	r3, r3, #31
 8001a08:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0c:	4a4e      	ldr	r2, [pc, #312]	; (8001b48 <HAL_RCC_OscConfig+0x278>)
 8001a0e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a10:	4b4e      	ldr	r3, [pc, #312]	; (8001b4c <HAL_RCC_OscConfig+0x27c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fb59 	bl	80010cc <HAL_InitTick>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d052      	beq.n	8001aca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	e327      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d032      	beq.n	8001a96 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a30:	4b43      	ldr	r3, [pc, #268]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a42      	ldr	r2, [pc, #264]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fb96 	bl	800116c <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a44:	f7ff fb92 	bl	800116c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e310      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a56:	4b3a      	ldr	r3, [pc, #232]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a62:	4b37      	ldr	r3, [pc, #220]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a36      	ldr	r2, [pc, #216]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a68:	f043 0308 	orr.w	r3, r3, #8
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	4b34      	ldr	r3, [pc, #208]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	4931      	ldr	r1, [pc, #196]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a80:	4b2f      	ldr	r3, [pc, #188]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	492c      	ldr	r1, [pc, #176]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
 8001a94:	e01a      	b.n	8001acc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a96:	4b2a      	ldr	r3, [pc, #168]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a29      	ldr	r2, [pc, #164]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a9c:	f023 0301 	bic.w	r3, r3, #1
 8001aa0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001aa2:	f7ff fb63 	bl	800116c <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001aaa:	f7ff fb5f 	bl	800116c <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e2dd      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001abc:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f0      	bne.n	8001aaa <HAL_RCC_OscConfig+0x1da>
 8001ac8:	e000      	b.n	8001acc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d074      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d005      	beq.n	8001aea <HAL_RCC_OscConfig+0x21a>
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	2b0c      	cmp	r3, #12
 8001ae2:	d10e      	bne.n	8001b02 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d10b      	bne.n	8001b02 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d064      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x2f0>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d160      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e2ba      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0a:	d106      	bne.n	8001b1a <HAL_RCC_OscConfig+0x24a>
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	e026      	b.n	8001b68 <HAL_RCC_OscConfig+0x298>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b22:	d115      	bne.n	8001b50 <HAL_RCC_OscConfig+0x280>
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a02      	ldr	r2, [pc, #8]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	e014      	b.n	8001b68 <HAL_RCC_OscConfig+0x298>
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000
 8001b44:	080048b0 	.word	0x080048b0
 8001b48:	20000004 	.word	0x20000004
 8001b4c:	20000008 	.word	0x20000008
 8001b50:	4ba0      	ldr	r3, [pc, #640]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a9f      	ldr	r2, [pc, #636]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	4b9d      	ldr	r3, [pc, #628]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a9c      	ldr	r2, [pc, #624]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d013      	beq.n	8001b98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b70:	f7ff fafc 	bl	800116c <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b78:	f7ff faf8 	bl	800116c <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b64      	cmp	r3, #100	; 0x64
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e276      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b8a:	4b92      	ldr	r3, [pc, #584]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCC_OscConfig+0x2a8>
 8001b96:	e014      	b.n	8001bc2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b98:	f7ff fae8 	bl	800116c <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba0:	f7ff fae4 	bl	800116c <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	; 0x64
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e262      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bb2:	4b88      	ldr	r3, [pc, #544]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x2d0>
 8001bbe:	e000      	b.n	8001bc2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d060      	beq.n	8001c90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_OscConfig+0x310>
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	2b0c      	cmp	r3, #12
 8001bd8:	d119      	bne.n	8001c0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d116      	bne.n	8001c0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001be0:	4b7c      	ldr	r3, [pc, #496]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x328>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e23f      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf8:	4b76      	ldr	r3, [pc, #472]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	061b      	lsls	r3, r3, #24
 8001c06:	4973      	ldr	r1, [pc, #460]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c0c:	e040      	b.n	8001c90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d023      	beq.n	8001c5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c16:	4b6f      	ldr	r3, [pc, #444]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a6e      	ldr	r2, [pc, #440]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c22:	f7ff faa3 	bl	800116c <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c2a:	f7ff fa9f 	bl	800116c <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e21d      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c3c:	4b65      	ldr	r3, [pc, #404]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c48:	4b62      	ldr	r3, [pc, #392]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	061b      	lsls	r3, r3, #24
 8001c56:	495f      	ldr	r1, [pc, #380]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
 8001c5c:	e018      	b.n	8001c90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c5e:	4b5d      	ldr	r3, [pc, #372]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a5c      	ldr	r2, [pc, #368]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6a:	f7ff fa7f 	bl	800116c <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c72:	f7ff fa7b 	bl	800116c <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e1f9      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c84:	4b53      	ldr	r3, [pc, #332]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1f0      	bne.n	8001c72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d03c      	beq.n	8001d16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d01c      	beq.n	8001cde <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca4:	4b4b      	ldr	r3, [pc, #300]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001caa:	4a4a      	ldr	r2, [pc, #296]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb4:	f7ff fa5a 	bl	800116c <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cbc:	f7ff fa56 	bl	800116c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e1d4      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cce:	4b41      	ldr	r3, [pc, #260]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0ef      	beq.n	8001cbc <HAL_RCC_OscConfig+0x3ec>
 8001cdc:	e01b      	b.n	8001d16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cde:	4b3d      	ldr	r3, [pc, #244]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce4:	4a3b      	ldr	r2, [pc, #236]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001ce6:	f023 0301 	bic.w	r3, r3, #1
 8001cea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cee:	f7ff fa3d 	bl	800116c <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf6:	f7ff fa39 	bl	800116c <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e1b7      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d08:	4b32      	ldr	r3, [pc, #200]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1ef      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 80a6 	beq.w	8001e70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d24:	2300      	movs	r3, #0
 8001d26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d28:	4b2a      	ldr	r3, [pc, #168]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10d      	bne.n	8001d50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d34:	4b27      	ldr	r3, [pc, #156]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d38:	4a26      	ldr	r2, [pc, #152]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d40:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d50:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <HAL_RCC_OscConfig+0x508>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d118      	bne.n	8001d8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d5c:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <HAL_RCC_OscConfig+0x508>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a1d      	ldr	r2, [pc, #116]	; (8001dd8 <HAL_RCC_OscConfig+0x508>)
 8001d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d68:	f7ff fa00 	bl	800116c <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d70:	f7ff f9fc 	bl	800116c <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e17a      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_RCC_OscConfig+0x508>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d108      	bne.n	8001da8 <HAL_RCC_OscConfig+0x4d8>
 8001d96:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001da6:	e029      	b.n	8001dfc <HAL_RCC_OscConfig+0x52c>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	2b05      	cmp	r3, #5
 8001dae:	d115      	bne.n	8001ddc <HAL_RCC_OscConfig+0x50c>
 8001db0:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db6:	4a07      	ldr	r2, [pc, #28]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001db8:	f043 0304 	orr.w	r3, r3, #4
 8001dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dc0:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc6:	4a03      	ldr	r2, [pc, #12]	; (8001dd4 <HAL_RCC_OscConfig+0x504>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dd0:	e014      	b.n	8001dfc <HAL_RCC_OscConfig+0x52c>
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40007000 	.word	0x40007000
 8001ddc:	4b9c      	ldr	r3, [pc, #624]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de2:	4a9b      	ldr	r2, [pc, #620]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001de4:	f023 0301 	bic.w	r3, r3, #1
 8001de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dec:	4b98      	ldr	r3, [pc, #608]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df2:	4a97      	ldr	r2, [pc, #604]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001df4:	f023 0304 	bic.w	r3, r3, #4
 8001df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d016      	beq.n	8001e32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e04:	f7ff f9b2 	bl	800116c <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e0a:	e00a      	b.n	8001e22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0c:	f7ff f9ae 	bl	800116c <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e12a      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e22:	4b8b      	ldr	r3, [pc, #556]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0ed      	beq.n	8001e0c <HAL_RCC_OscConfig+0x53c>
 8001e30:	e015      	b.n	8001e5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e32:	f7ff f99b 	bl	800116c <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e38:	e00a      	b.n	8001e50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3a:	f7ff f997 	bl	800116c <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e113      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e50:	4b7f      	ldr	r3, [pc, #508]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1ed      	bne.n	8001e3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e5e:	7ffb      	ldrb	r3, [r7, #31]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d105      	bne.n	8001e70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e64:	4b7a      	ldr	r3, [pc, #488]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e68:	4a79      	ldr	r2, [pc, #484]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 80fe 	beq.w	8002076 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	f040 80d0 	bne.w	8002024 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e84:	4b72      	ldr	r3, [pc, #456]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f003 0203 	and.w	r2, r3, #3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d130      	bne.n	8001efa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d127      	bne.n	8001efa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d11f      	bne.n	8001efa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ec4:	2a07      	cmp	r2, #7
 8001ec6:	bf14      	ite	ne
 8001ec8:	2201      	movne	r2, #1
 8001eca:	2200      	moveq	r2, #0
 8001ecc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d113      	bne.n	8001efa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001edc:	085b      	lsrs	r3, r3, #1
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d109      	bne.n	8001efa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	085b      	lsrs	r3, r3, #1
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d06e      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b0c      	cmp	r3, #12
 8001efe:	d069      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f00:	4b53      	ldr	r3, [pc, #332]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d105      	bne.n	8001f18 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f0c:	4b50      	ldr	r3, [pc, #320]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0ad      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f1c:	4b4c      	ldr	r3, [pc, #304]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a4b      	ldr	r2, [pc, #300]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f26:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f28:	f7ff f920 	bl	800116c <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f30:	f7ff f91c 	bl	800116c <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e09a      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f42:	4b43      	ldr	r3, [pc, #268]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f4e:	4b40      	ldr	r3, [pc, #256]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	4b40      	ldr	r3, [pc, #256]	; (8002054 <HAL_RCC_OscConfig+0x784>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f5e:	3a01      	subs	r2, #1
 8001f60:	0112      	lsls	r2, r2, #4
 8001f62:	4311      	orrs	r1, r2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f68:	0212      	lsls	r2, r2, #8
 8001f6a:	4311      	orrs	r1, r2
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f70:	0852      	lsrs	r2, r2, #1
 8001f72:	3a01      	subs	r2, #1
 8001f74:	0552      	lsls	r2, r2, #21
 8001f76:	4311      	orrs	r1, r2
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f7c:	0852      	lsrs	r2, r2, #1
 8001f7e:	3a01      	subs	r2, #1
 8001f80:	0652      	lsls	r2, r2, #25
 8001f82:	4311      	orrs	r1, r2
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f88:	0912      	lsrs	r2, r2, #4
 8001f8a:	0452      	lsls	r2, r2, #17
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	4930      	ldr	r1, [pc, #192]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f94:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a2d      	ldr	r2, [pc, #180]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fa0:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4a2a      	ldr	r2, [pc, #168]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001faa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fac:	f7ff f8de 	bl	800116c <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7ff f8da 	bl	800116c <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e058      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc6:	4b22      	ldr	r3, [pc, #136]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fd2:	e050      	b.n	8002076 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e04f      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d148      	bne.n	8002076 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fe4:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a19      	ldr	r2, [pc, #100]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ff0:	4b17      	ldr	r3, [pc, #92]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4a16      	ldr	r2, [pc, #88]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8001ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ffa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ffc:	f7ff f8b6 	bl	800116c <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002004:	f7ff f8b2 	bl	800116c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e030      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002016:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x734>
 8002022:	e028      	b.n	8002076 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	2b0c      	cmp	r3, #12
 8002028:	d023      	beq.n	8002072 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a08      	ldr	r2, [pc, #32]	; (8002050 <HAL_RCC_OscConfig+0x780>)
 8002030:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002036:	f7ff f899 	bl	800116c <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800203c:	e00c      	b.n	8002058 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203e:	f7ff f895 	bl	800116c <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d905      	bls.n	8002058 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e013      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
 8002050:	40021000 	.word	0x40021000
 8002054:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002058:	4b09      	ldr	r3, [pc, #36]	; (8002080 <HAL_RCC_OscConfig+0x7b0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1ec      	bne.n	800203e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_RCC_OscConfig+0x7b0>)
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	4905      	ldr	r1, [pc, #20]	; (8002080 <HAL_RCC_OscConfig+0x7b0>)
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_RCC_OscConfig+0x7b4>)
 800206c:	4013      	ands	r3, r2
 800206e:	60cb      	str	r3, [r1, #12]
 8002070:	e001      	b.n	8002076 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3720      	adds	r7, #32
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	feeefffc 	.word	0xfeeefffc

08002088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0e7      	b.n	800226c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800209c:	4b75      	ldr	r3, [pc, #468]	; (8002274 <HAL_RCC_ClockConfig+0x1ec>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d910      	bls.n	80020cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020aa:	4b72      	ldr	r3, [pc, #456]	; (8002274 <HAL_RCC_ClockConfig+0x1ec>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 0207 	bic.w	r2, r3, #7
 80020b2:	4970      	ldr	r1, [pc, #448]	; (8002274 <HAL_RCC_ClockConfig+0x1ec>)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ba:	4b6e      	ldr	r3, [pc, #440]	; (8002274 <HAL_RCC_ClockConfig+0x1ec>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d001      	beq.n	80020cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0cf      	b.n	800226c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d010      	beq.n	80020fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	4b66      	ldr	r3, [pc, #408]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d908      	bls.n	80020fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e8:	4b63      	ldr	r3, [pc, #396]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	4960      	ldr	r1, [pc, #384]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d04c      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b03      	cmp	r3, #3
 800210c:	d107      	bne.n	800211e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800210e:	4b5a      	ldr	r3, [pc, #360]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d121      	bne.n	800215e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e0a6      	b.n	800226c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d107      	bne.n	8002136 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002126:	4b54      	ldr	r3, [pc, #336]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d115      	bne.n	800215e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e09a      	b.n	800226c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d107      	bne.n	800214e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800213e:	4b4e      	ldr	r3, [pc, #312]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d109      	bne.n	800215e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e08e      	b.n	800226c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800214e:	4b4a      	ldr	r3, [pc, #296]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e086      	b.n	800226c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800215e:	4b46      	ldr	r3, [pc, #280]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f023 0203 	bic.w	r2, r3, #3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	4943      	ldr	r1, [pc, #268]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 800216c:	4313      	orrs	r3, r2
 800216e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002170:	f7fe fffc 	bl	800116c <HAL_GetTick>
 8002174:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002176:	e00a      	b.n	800218e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002178:	f7fe fff8 	bl	800116c <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	f241 3288 	movw	r2, #5000	; 0x1388
 8002186:	4293      	cmp	r3, r2
 8002188:	d901      	bls.n	800218e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e06e      	b.n	800226c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218e:	4b3a      	ldr	r3, [pc, #232]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 020c 	and.w	r2, r3, #12
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	429a      	cmp	r2, r3
 800219e:	d1eb      	bne.n	8002178 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d010      	beq.n	80021ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	4b31      	ldr	r3, [pc, #196]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d208      	bcs.n	80021ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021bc:	4b2e      	ldr	r3, [pc, #184]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	492b      	ldr	r1, [pc, #172]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021ce:	4b29      	ldr	r3, [pc, #164]	; (8002274 <HAL_RCC_ClockConfig+0x1ec>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d210      	bcs.n	80021fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021dc:	4b25      	ldr	r3, [pc, #148]	; (8002274 <HAL_RCC_ClockConfig+0x1ec>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f023 0207 	bic.w	r2, r3, #7
 80021e4:	4923      	ldr	r1, [pc, #140]	; (8002274 <HAL_RCC_ClockConfig+0x1ec>)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ec:	4b21      	ldr	r3, [pc, #132]	; (8002274 <HAL_RCC_ClockConfig+0x1ec>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d001      	beq.n	80021fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e036      	b.n	800226c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	2b00      	cmp	r3, #0
 8002208:	d008      	beq.n	800221c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800220a:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	4918      	ldr	r1, [pc, #96]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 8002218:	4313      	orrs	r3, r2
 800221a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b00      	cmp	r3, #0
 8002226:	d009      	beq.n	800223c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002228:	4b13      	ldr	r3, [pc, #76]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4910      	ldr	r1, [pc, #64]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 8002238:	4313      	orrs	r3, r2
 800223a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800223c:	f000 f824 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 8002240:	4602      	mov	r2, r0
 8002242:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <HAL_RCC_ClockConfig+0x1f0>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	091b      	lsrs	r3, r3, #4
 8002248:	f003 030f 	and.w	r3, r3, #15
 800224c:	490b      	ldr	r1, [pc, #44]	; (800227c <HAL_RCC_ClockConfig+0x1f4>)
 800224e:	5ccb      	ldrb	r3, [r1, r3]
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
 8002258:	4a09      	ldr	r2, [pc, #36]	; (8002280 <HAL_RCC_ClockConfig+0x1f8>)
 800225a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800225c:	4b09      	ldr	r3, [pc, #36]	; (8002284 <HAL_RCC_ClockConfig+0x1fc>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe ff33 	bl	80010cc <HAL_InitTick>
 8002266:	4603      	mov	r3, r0
 8002268:	72fb      	strb	r3, [r7, #11]

  return status;
 800226a:	7afb      	ldrb	r3, [r7, #11]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40022000 	.word	0x40022000
 8002278:	40021000 	.word	0x40021000
 800227c:	080048b0 	.word	0x080048b0
 8002280:	20000004 	.word	0x20000004
 8002284:	20000008 	.word	0x20000008

08002288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
 8002292:	2300      	movs	r3, #0
 8002294:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002296:	4b3e      	ldr	r3, [pc, #248]	; (8002390 <HAL_RCC_GetSysClockFreq+0x108>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022a0:	4b3b      	ldr	r3, [pc, #236]	; (8002390 <HAL_RCC_GetSysClockFreq+0x108>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x34>
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	2b0c      	cmp	r3, #12
 80022b4:	d121      	bne.n	80022fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d11e      	bne.n	80022fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022bc:	4b34      	ldr	r3, [pc, #208]	; (8002390 <HAL_RCC_GetSysClockFreq+0x108>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d107      	bne.n	80022d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022c8:	4b31      	ldr	r3, [pc, #196]	; (8002390 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ce:	0a1b      	lsrs	r3, r3, #8
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	61fb      	str	r3, [r7, #28]
 80022d6:	e005      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022d8:	4b2d      	ldr	r3, [pc, #180]	; (8002390 <HAL_RCC_GetSysClockFreq+0x108>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	091b      	lsrs	r3, r3, #4
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022e4:	4a2b      	ldr	r2, [pc, #172]	; (8002394 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10d      	bne.n	8002310 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022f8:	e00a      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d102      	bne.n	8002306 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002300:	4b25      	ldr	r3, [pc, #148]	; (8002398 <HAL_RCC_GetSysClockFreq+0x110>)
 8002302:	61bb      	str	r3, [r7, #24]
 8002304:	e004      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	2b08      	cmp	r3, #8
 800230a:	d101      	bne.n	8002310 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800230c:	4b23      	ldr	r3, [pc, #140]	; (800239c <HAL_RCC_GetSysClockFreq+0x114>)
 800230e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	2b0c      	cmp	r3, #12
 8002314:	d134      	bne.n	8002380 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002316:	4b1e      	ldr	r3, [pc, #120]	; (8002390 <HAL_RCC_GetSysClockFreq+0x108>)
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d003      	beq.n	800232e <HAL_RCC_GetSysClockFreq+0xa6>
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b03      	cmp	r3, #3
 800232a:	d003      	beq.n	8002334 <HAL_RCC_GetSysClockFreq+0xac>
 800232c:	e005      	b.n	800233a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800232e:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <HAL_RCC_GetSysClockFreq+0x110>)
 8002330:	617b      	str	r3, [r7, #20]
      break;
 8002332:	e005      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002334:	4b19      	ldr	r3, [pc, #100]	; (800239c <HAL_RCC_GetSysClockFreq+0x114>)
 8002336:	617b      	str	r3, [r7, #20]
      break;
 8002338:	e002      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	617b      	str	r3, [r7, #20]
      break;
 800233e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002340:	4b13      	ldr	r3, [pc, #76]	; (8002390 <HAL_RCC_GetSysClockFreq+0x108>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	091b      	lsrs	r3, r3, #4
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	3301      	adds	r3, #1
 800234c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <HAL_RCC_GetSysClockFreq+0x108>)
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	fb03 f202 	mul.w	r2, r3, r2
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	fbb2 f3f3 	udiv	r3, r2, r3
 8002364:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002366:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <HAL_RCC_GetSysClockFreq+0x108>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	0e5b      	lsrs	r3, r3, #25
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	3301      	adds	r3, #1
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	fbb2 f3f3 	udiv	r3, r2, r3
 800237e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002380:	69bb      	ldr	r3, [r7, #24]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3724      	adds	r7, #36	; 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40021000 	.word	0x40021000
 8002394:	080048c8 	.word	0x080048c8
 8002398:	00f42400 	.word	0x00f42400
 800239c:	007a1200 	.word	0x007a1200

080023a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023a4:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023a6:	681b      	ldr	r3, [r3, #0]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20000004 	.word	0x20000004

080023b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023bc:	f7ff fff0 	bl	80023a0 <HAL_RCC_GetHCLKFreq>
 80023c0:	4602      	mov	r2, r0
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	0a1b      	lsrs	r3, r3, #8
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	4904      	ldr	r1, [pc, #16]	; (80023e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023ce:	5ccb      	ldrb	r3, [r1, r3]
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d8:	4618      	mov	r0, r3
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40021000 	.word	0x40021000
 80023e0:	080048c0 	.word	0x080048c0

080023e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023e8:	f7ff ffda 	bl	80023a0 <HAL_RCC_GetHCLKFreq>
 80023ec:	4602      	mov	r2, r0
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	0adb      	lsrs	r3, r3, #11
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	4904      	ldr	r1, [pc, #16]	; (800240c <HAL_RCC_GetPCLK2Freq+0x28>)
 80023fa:	5ccb      	ldrb	r3, [r1, r3]
 80023fc:	f003 031f 	and.w	r3, r3, #31
 8002400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002404:	4618      	mov	r0, r3
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40021000 	.word	0x40021000
 800240c:	080048c0 	.word	0x080048c0

08002410 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002418:	2300      	movs	r3, #0
 800241a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800241c:	4b2a      	ldr	r3, [pc, #168]	; (80024c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800241e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002428:	f7ff f9ee 	bl	8001808 <HAL_PWREx_GetVoltageRange>
 800242c:	6178      	str	r0, [r7, #20]
 800242e:	e014      	b.n	800245a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002430:	4b25      	ldr	r3, [pc, #148]	; (80024c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002434:	4a24      	ldr	r2, [pc, #144]	; (80024c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243a:	6593      	str	r3, [r2, #88]	; 0x58
 800243c:	4b22      	ldr	r3, [pc, #136]	; (80024c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002448:	f7ff f9de 	bl	8001808 <HAL_PWREx_GetVoltageRange>
 800244c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800244e:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002452:	4a1d      	ldr	r2, [pc, #116]	; (80024c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002458:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002460:	d10b      	bne.n	800247a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b80      	cmp	r3, #128	; 0x80
 8002466:	d919      	bls.n	800249c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2ba0      	cmp	r3, #160	; 0xa0
 800246c:	d902      	bls.n	8002474 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800246e:	2302      	movs	r3, #2
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	e013      	b.n	800249c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002474:	2301      	movs	r3, #1
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	e010      	b.n	800249c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b80      	cmp	r3, #128	; 0x80
 800247e:	d902      	bls.n	8002486 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002480:	2303      	movs	r3, #3
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	e00a      	b.n	800249c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b80      	cmp	r3, #128	; 0x80
 800248a:	d102      	bne.n	8002492 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800248c:	2302      	movs	r3, #2
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	e004      	b.n	800249c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b70      	cmp	r3, #112	; 0x70
 8002496:	d101      	bne.n	800249c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002498:	2301      	movs	r3, #1
 800249a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f023 0207 	bic.w	r2, r3, #7
 80024a4:	4909      	ldr	r1, [pc, #36]	; (80024cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024ac:	4b07      	ldr	r3, [pc, #28]	; (80024cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d001      	beq.n	80024be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40022000 	.word	0x40022000

080024d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024d8:	2300      	movs	r3, #0
 80024da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024dc:	2300      	movs	r3, #0
 80024de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d041      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024f4:	d02a      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80024f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024fa:	d824      	bhi.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002500:	d008      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002502:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002506:	d81e      	bhi.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00a      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800250c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002510:	d010      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002512:	e018      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002514:	4b86      	ldr	r3, [pc, #536]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4a85      	ldr	r2, [pc, #532]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002520:	e015      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3304      	adds	r3, #4
 8002526:	2100      	movs	r1, #0
 8002528:	4618      	mov	r0, r3
 800252a:	f000 fabb 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
 800252e:	4603      	mov	r3, r0
 8002530:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002532:	e00c      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3320      	adds	r3, #32
 8002538:	2100      	movs	r1, #0
 800253a:	4618      	mov	r0, r3
 800253c:	f000 fba6 	bl	8002c8c <RCCEx_PLLSAI2_Config>
 8002540:	4603      	mov	r3, r0
 8002542:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002544:	e003      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	74fb      	strb	r3, [r7, #19]
      break;
 800254a:	e000      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800254c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800254e:	7cfb      	ldrb	r3, [r7, #19]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10b      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002554:	4b76      	ldr	r3, [pc, #472]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002562:	4973      	ldr	r1, [pc, #460]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800256a:	e001      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800256c:	7cfb      	ldrb	r3, [r7, #19]
 800256e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d041      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002580:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002584:	d02a      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002586:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800258a:	d824      	bhi.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800258c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002590:	d008      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002592:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002596:	d81e      	bhi.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00a      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800259c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025a0:	d010      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025a2:	e018      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025a4:	4b62      	ldr	r3, [pc, #392]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	4a61      	ldr	r2, [pc, #388]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025b0:	e015      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3304      	adds	r3, #4
 80025b6:	2100      	movs	r1, #0
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 fa73 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
 80025be:	4603      	mov	r3, r0
 80025c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025c2:	e00c      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3320      	adds	r3, #32
 80025c8:	2100      	movs	r1, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 fb5e 	bl	8002c8c <RCCEx_PLLSAI2_Config>
 80025d0:	4603      	mov	r3, r0
 80025d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025d4:	e003      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	74fb      	strb	r3, [r7, #19]
      break;
 80025da:	e000      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80025dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025de:	7cfb      	ldrb	r3, [r7, #19]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10b      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025e4:	4b52      	ldr	r3, [pc, #328]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025f2:	494f      	ldr	r1, [pc, #316]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025fa:	e001      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025fc:	7cfb      	ldrb	r3, [r7, #19]
 80025fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80a0 	beq.w	800274e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800260e:	2300      	movs	r3, #0
 8002610:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002612:	4b47      	ldr	r3, [pc, #284]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002622:	2300      	movs	r3, #0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00d      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002628:	4b41      	ldr	r3, [pc, #260]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262c:	4a40      	ldr	r2, [pc, #256]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002632:	6593      	str	r3, [r2, #88]	; 0x58
 8002634:	4b3e      	ldr	r3, [pc, #248]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002640:	2301      	movs	r3, #1
 8002642:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002644:	4b3b      	ldr	r3, [pc, #236]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a3a      	ldr	r2, [pc, #232]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800264a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002650:	f7fe fd8c 	bl	800116c <HAL_GetTick>
 8002654:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002656:	e009      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002658:	f7fe fd88 	bl	800116c <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d902      	bls.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	74fb      	strb	r3, [r7, #19]
        break;
 800266a:	e005      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800266c:	4b31      	ldr	r3, [pc, #196]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0ef      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002678:	7cfb      	ldrb	r3, [r7, #19]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d15c      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800267e:	4b2c      	ldr	r3, [pc, #176]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002688:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d01f      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	429a      	cmp	r2, r3
 800269a:	d019      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800269c:	4b24      	ldr	r3, [pc, #144]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026a8:	4b21      	ldr	r3, [pc, #132]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ae:	4a20      	ldr	r2, [pc, #128]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026b8:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026be:	4a1c      	ldr	r2, [pc, #112]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026c8:	4a19      	ldr	r2, [pc, #100]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d016      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026da:	f7fe fd47 	bl	800116c <HAL_GetTick>
 80026de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e0:	e00b      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e2:	f7fe fd43 	bl	800116c <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d902      	bls.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	74fb      	strb	r3, [r7, #19]
            break;
 80026f8:	e006      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026fa:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0ec      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10c      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002714:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800271e:	4904      	ldr	r1, [pc, #16]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002726:	e009      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002728:	7cfb      	ldrb	r3, [r7, #19]
 800272a:	74bb      	strb	r3, [r7, #18]
 800272c:	e006      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800272e:	bf00      	nop
 8002730:	40021000 	.word	0x40021000
 8002734:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002738:	7cfb      	ldrb	r3, [r7, #19]
 800273a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800273c:	7c7b      	ldrb	r3, [r7, #17]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d105      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002742:	4b9e      	ldr	r3, [pc, #632]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	4a9d      	ldr	r2, [pc, #628]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800274c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800275a:	4b98      	ldr	r3, [pc, #608]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002760:	f023 0203 	bic.w	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002768:	4994      	ldr	r1, [pc, #592]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00a      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800277c:	4b8f      	ldr	r3, [pc, #572]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002782:	f023 020c 	bic.w	r2, r3, #12
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278a:	498c      	ldr	r1, [pc, #560]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800279e:	4b87      	ldr	r3, [pc, #540]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	4983      	ldr	r1, [pc, #524]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00a      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027c0:	4b7e      	ldr	r3, [pc, #504]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	497b      	ldr	r1, [pc, #492]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027e2:	4b76      	ldr	r3, [pc, #472]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f0:	4972      	ldr	r1, [pc, #456]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0320 	and.w	r3, r3, #32
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00a      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002804:	4b6d      	ldr	r3, [pc, #436]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002812:	496a      	ldr	r1, [pc, #424]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00a      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002826:	4b65      	ldr	r3, [pc, #404]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	4961      	ldr	r1, [pc, #388]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00a      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002848:	4b5c      	ldr	r3, [pc, #368]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002856:	4959      	ldr	r1, [pc, #356]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00a      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800286a:	4b54      	ldr	r3, [pc, #336]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002870:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002878:	4950      	ldr	r1, [pc, #320]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00a      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800288c:	4b4b      	ldr	r3, [pc, #300]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002892:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289a:	4948      	ldr	r1, [pc, #288]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028ae:	4b43      	ldr	r3, [pc, #268]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028bc:	493f      	ldr	r1, [pc, #252]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d028      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028d0:	4b3a      	ldr	r3, [pc, #232]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028de:	4937      	ldr	r1, [pc, #220]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028ee:	d106      	bne.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f0:	4b32      	ldr	r3, [pc, #200]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4a31      	ldr	r2, [pc, #196]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028fa:	60d3      	str	r3, [r2, #12]
 80028fc:	e011      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002902:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002906:	d10c      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3304      	adds	r3, #4
 800290c:	2101      	movs	r1, #1
 800290e:	4618      	mov	r0, r3
 8002910:	f000 f8c8 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
 8002914:	4603      	mov	r3, r0
 8002916:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002918:	7cfb      	ldrb	r3, [r7, #19]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800291e:	7cfb      	ldrb	r3, [r7, #19]
 8002920:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d028      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800292e:	4b23      	ldr	r3, [pc, #140]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002934:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293c:	491f      	ldr	r1, [pc, #124]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800294c:	d106      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800294e:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	4a1a      	ldr	r2, [pc, #104]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002954:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002958:	60d3      	str	r3, [r2, #12]
 800295a:	e011      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002960:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002964:	d10c      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3304      	adds	r3, #4
 800296a:	2101      	movs	r1, #1
 800296c:	4618      	mov	r0, r3
 800296e:	f000 f899 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
 8002972:	4603      	mov	r3, r0
 8002974:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002976:	7cfb      	ldrb	r3, [r7, #19]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800297c:	7cfb      	ldrb	r3, [r7, #19]
 800297e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d02b      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002992:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800299a:	4908      	ldr	r1, [pc, #32]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029aa:	d109      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ac:	4b03      	ldr	r3, [pc, #12]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4a02      	ldr	r2, [pc, #8]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029b6:	60d3      	str	r3, [r2, #12]
 80029b8:	e014      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029c8:	d10c      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3304      	adds	r3, #4
 80029ce:	2101      	movs	r1, #1
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 f867 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
 80029d6:	4603      	mov	r3, r0
 80029d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029da:	7cfb      	ldrb	r3, [r7, #19]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80029e0:	7cfb      	ldrb	r3, [r7, #19]
 80029e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d02f      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029f0:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029fe:	4928      	ldr	r1, [pc, #160]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a0e:	d10d      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3304      	adds	r3, #4
 8002a14:	2102      	movs	r1, #2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 f844 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a20:	7cfb      	ldrb	r3, [r7, #19]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d014      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a26:	7cfb      	ldrb	r3, [r7, #19]
 8002a28:	74bb      	strb	r3, [r7, #18]
 8002a2a:	e011      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3320      	adds	r3, #32
 8002a3a:	2102      	movs	r1, #2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 f925 	bl	8002c8c <RCCEx_PLLSAI2_Config>
 8002a42:	4603      	mov	r3, r0
 8002a44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a46:	7cfb      	ldrb	r3, [r7, #19]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a4c:	7cfb      	ldrb	r3, [r7, #19]
 8002a4e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00a      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a5c:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a62:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a6a:	490d      	ldr	r1, [pc, #52]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00b      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a7e:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a8e:	4904      	ldr	r1, [pc, #16]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a96:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40021000 	.word	0x40021000

08002aa4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ab2:	4b75      	ldr	r3, [pc, #468]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d018      	beq.n	8002af0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002abe:	4b72      	ldr	r3, [pc, #456]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f003 0203 	and.w	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d10d      	bne.n	8002aea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ad6:	4b6c      	ldr	r3, [pc, #432]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	091b      	lsrs	r3, r3, #4
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d047      	beq.n	8002b7a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	73fb      	strb	r3, [r7, #15]
 8002aee:	e044      	b.n	8002b7a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d018      	beq.n	8002b2a <RCCEx_PLLSAI1_Config+0x86>
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d825      	bhi.n	8002b48 <RCCEx_PLLSAI1_Config+0xa4>
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d002      	beq.n	8002b06 <RCCEx_PLLSAI1_Config+0x62>
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d009      	beq.n	8002b18 <RCCEx_PLLSAI1_Config+0x74>
 8002b04:	e020      	b.n	8002b48 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b06:	4b60      	ldr	r3, [pc, #384]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d11d      	bne.n	8002b4e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b16:	e01a      	b.n	8002b4e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b18:	4b5b      	ldr	r3, [pc, #364]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d116      	bne.n	8002b52 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b28:	e013      	b.n	8002b52 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b2a:	4b57      	ldr	r3, [pc, #348]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10f      	bne.n	8002b56 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b36:	4b54      	ldr	r3, [pc, #336]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d109      	bne.n	8002b56 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b46:	e006      	b.n	8002b56 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b4c:	e004      	b.n	8002b58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b4e:	bf00      	nop
 8002b50:	e002      	b.n	8002b58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b52:	bf00      	nop
 8002b54:	e000      	b.n	8002b58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b56:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10d      	bne.n	8002b7a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b5e:	4b4a      	ldr	r3, [pc, #296]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6819      	ldr	r1, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	430b      	orrs	r3, r1
 8002b74:	4944      	ldr	r1, [pc, #272]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d17d      	bne.n	8002c7c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b80:	4b41      	ldr	r3, [pc, #260]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a40      	ldr	r2, [pc, #256]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b8c:	f7fe faee 	bl	800116c <HAL_GetTick>
 8002b90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b92:	e009      	b.n	8002ba8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b94:	f7fe faea 	bl	800116c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d902      	bls.n	8002ba8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ba6:	e005      	b.n	8002bb4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ba8:	4b37      	ldr	r3, [pc, #220]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1ef      	bne.n	8002b94 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d160      	bne.n	8002c7c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d111      	bne.n	8002be4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bc0:	4b31      	ldr	r3, [pc, #196]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6892      	ldr	r2, [r2, #8]
 8002bd0:	0211      	lsls	r1, r2, #8
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	68d2      	ldr	r2, [r2, #12]
 8002bd6:	0912      	lsrs	r2, r2, #4
 8002bd8:	0452      	lsls	r2, r2, #17
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	492a      	ldr	r1, [pc, #168]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	610b      	str	r3, [r1, #16]
 8002be2:	e027      	b.n	8002c34 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d112      	bne.n	8002c10 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bea:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002bf2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6892      	ldr	r2, [r2, #8]
 8002bfa:	0211      	lsls	r1, r2, #8
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6912      	ldr	r2, [r2, #16]
 8002c00:	0852      	lsrs	r2, r2, #1
 8002c02:	3a01      	subs	r2, #1
 8002c04:	0552      	lsls	r2, r2, #21
 8002c06:	430a      	orrs	r2, r1
 8002c08:	491f      	ldr	r1, [pc, #124]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	610b      	str	r3, [r1, #16]
 8002c0e:	e011      	b.n	8002c34 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c10:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6892      	ldr	r2, [r2, #8]
 8002c20:	0211      	lsls	r1, r2, #8
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6952      	ldr	r2, [r2, #20]
 8002c26:	0852      	lsrs	r2, r2, #1
 8002c28:	3a01      	subs	r2, #1
 8002c2a:	0652      	lsls	r2, r2, #25
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	4916      	ldr	r1, [pc, #88]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c34:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a13      	ldr	r2, [pc, #76]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c40:	f7fe fa94 	bl	800116c <HAL_GetTick>
 8002c44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c46:	e009      	b.n	8002c5c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c48:	f7fe fa90 	bl	800116c <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d902      	bls.n	8002c5c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	73fb      	strb	r3, [r7, #15]
          break;
 8002c5a:	e005      	b.n	8002c68 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0ef      	beq.n	8002c48 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d106      	bne.n	8002c7c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c70:	691a      	ldr	r2, [r3, #16]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	4904      	ldr	r1, [pc, #16]	; (8002c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40021000 	.word	0x40021000

08002c8c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c9a:	4b6a      	ldr	r3, [pc, #424]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d018      	beq.n	8002cd8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ca6:	4b67      	ldr	r3, [pc, #412]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f003 0203 	and.w	r2, r3, #3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d10d      	bne.n	8002cd2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
       ||
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d009      	beq.n	8002cd2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002cbe:	4b61      	ldr	r3, [pc, #388]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	091b      	lsrs	r3, r3, #4
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
       ||
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d047      	beq.n	8002d62 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
 8002cd6:	e044      	b.n	8002d62 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d018      	beq.n	8002d12 <RCCEx_PLLSAI2_Config+0x86>
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d825      	bhi.n	8002d30 <RCCEx_PLLSAI2_Config+0xa4>
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d002      	beq.n	8002cee <RCCEx_PLLSAI2_Config+0x62>
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d009      	beq.n	8002d00 <RCCEx_PLLSAI2_Config+0x74>
 8002cec:	e020      	b.n	8002d30 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cee:	4b55      	ldr	r3, [pc, #340]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d11d      	bne.n	8002d36 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cfe:	e01a      	b.n	8002d36 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d00:	4b50      	ldr	r3, [pc, #320]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d116      	bne.n	8002d3a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d10:	e013      	b.n	8002d3a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d12:	4b4c      	ldr	r3, [pc, #304]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10f      	bne.n	8002d3e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d1e:	4b49      	ldr	r3, [pc, #292]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d2e:	e006      	b.n	8002d3e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
      break;
 8002d34:	e004      	b.n	8002d40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d36:	bf00      	nop
 8002d38:	e002      	b.n	8002d40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d3a:	bf00      	nop
 8002d3c:	e000      	b.n	8002d40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10d      	bne.n	8002d62 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d46:	4b3f      	ldr	r3, [pc, #252]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6819      	ldr	r1, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	430b      	orrs	r3, r1
 8002d5c:	4939      	ldr	r1, [pc, #228]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d167      	bne.n	8002e38 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d68:	4b36      	ldr	r3, [pc, #216]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a35      	ldr	r2, [pc, #212]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d74:	f7fe f9fa 	bl	800116c <HAL_GetTick>
 8002d78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d7a:	e009      	b.n	8002d90 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d7c:	f7fe f9f6 	bl	800116c <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d902      	bls.n	8002d90 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d8e:	e005      	b.n	8002d9c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d90:	4b2c      	ldr	r3, [pc, #176]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1ef      	bne.n	8002d7c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d14a      	bne.n	8002e38 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d111      	bne.n	8002dcc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002da8:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6892      	ldr	r2, [r2, #8]
 8002db8:	0211      	lsls	r1, r2, #8
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68d2      	ldr	r2, [r2, #12]
 8002dbe:	0912      	lsrs	r2, r2, #4
 8002dc0:	0452      	lsls	r2, r2, #17
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	491f      	ldr	r1, [pc, #124]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	614b      	str	r3, [r1, #20]
 8002dca:	e011      	b.n	8002df0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dcc:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002dd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6892      	ldr	r2, [r2, #8]
 8002ddc:	0211      	lsls	r1, r2, #8
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6912      	ldr	r2, [r2, #16]
 8002de2:	0852      	lsrs	r2, r2, #1
 8002de4:	3a01      	subs	r2, #1
 8002de6:	0652      	lsls	r2, r2, #25
 8002de8:	430a      	orrs	r2, r1
 8002dea:	4916      	ldr	r1, [pc, #88]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002df0:	4b14      	ldr	r3, [pc, #80]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a13      	ldr	r2, [pc, #76]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfc:	f7fe f9b6 	bl	800116c <HAL_GetTick>
 8002e00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e02:	e009      	b.n	8002e18 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e04:	f7fe f9b2 	bl	800116c <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d902      	bls.n	8002e18 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	73fb      	strb	r3, [r7, #15]
          break;
 8002e16:	e005      	b.n	8002e24 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e18:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0ef      	beq.n	8002e04 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d106      	bne.n	8002e38 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e2a:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	4904      	ldr	r1, [pc, #16]	; (8002e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40021000 	.word	0x40021000

08002e48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e040      	b.n	8002edc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fd ff86 	bl	8000d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2224      	movs	r2, #36	; 0x24
 8002e74:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0201 	bic.w	r2, r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f8c0 	bl	800300c <UART_SetConfig>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e022      	b.n	8002edc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fb6c 	bl	800357c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ec2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 fbf3 	bl	80036c0 <UART_CheckIdleState>
 8002eda:	4603      	mov	r3, r0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	; 0x28
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	f040 8082 	bne.w	8003002 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <HAL_UART_Transmit+0x26>
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e07a      	b.n	8003004 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_UART_Transmit+0x38>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e073      	b.n	8003004 <HAL_UART_Transmit+0x120>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2221      	movs	r2, #33	; 0x21
 8002f30:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f32:	f7fe f91b 	bl	800116c <HAL_GetTick>
 8002f36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	88fa      	ldrh	r2, [r7, #6]
 8002f3c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	88fa      	ldrh	r2, [r7, #6]
 8002f44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f50:	d108      	bne.n	8002f64 <HAL_UART_Transmit+0x80>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d104      	bne.n	8002f64 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	e003      	b.n	8002f6c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002f74:	e02d      	b.n	8002fd2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	2180      	movs	r1, #128	; 0x80
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 fbe6 	bl	8003752 <UART_WaitOnFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e039      	b.n	8003004 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10b      	bne.n	8002fae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	881a      	ldrh	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fa2:	b292      	uxth	r2, r2
 8002fa4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	3302      	adds	r3, #2
 8002faa:	61bb      	str	r3, [r7, #24]
 8002fac:	e008      	b.n	8002fc0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	781a      	ldrb	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	b292      	uxth	r2, r2
 8002fb8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1cb      	bne.n	8002f76 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2140      	movs	r1, #64	; 0x40
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 fbb2 	bl	8003752 <UART_WaitOnFlagUntilTimeout>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e005      	b.n	8003004 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	e000      	b.n	8003004 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003002:	2302      	movs	r3, #2
  }
}
 8003004:	4618      	mov	r0, r3
 8003006:	3720      	adds	r7, #32
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800300c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003010:	b08a      	sub	sp, #40	; 0x28
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	431a      	orrs	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	431a      	orrs	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	4313      	orrs	r3, r2
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	4ba4      	ldr	r3, [pc, #656]	; (80032cc <UART_SetConfig+0x2c0>)
 800303c:	4013      	ands	r3, r2
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	6812      	ldr	r2, [r2, #0]
 8003042:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003044:	430b      	orrs	r3, r1
 8003046:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a99      	ldr	r2, [pc, #612]	; (80032d0 <UART_SetConfig+0x2c4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d004      	beq.n	8003078 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003074:	4313      	orrs	r3, r2
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003088:	430a      	orrs	r2, r1
 800308a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a90      	ldr	r2, [pc, #576]	; (80032d4 <UART_SetConfig+0x2c8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d126      	bne.n	80030e4 <UART_SetConfig+0xd8>
 8003096:	4b90      	ldr	r3, [pc, #576]	; (80032d8 <UART_SetConfig+0x2cc>)
 8003098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d81b      	bhi.n	80030dc <UART_SetConfig+0xd0>
 80030a4:	a201      	add	r2, pc, #4	; (adr r2, 80030ac <UART_SetConfig+0xa0>)
 80030a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030aa:	bf00      	nop
 80030ac:	080030bd 	.word	0x080030bd
 80030b0:	080030cd 	.word	0x080030cd
 80030b4:	080030c5 	.word	0x080030c5
 80030b8:	080030d5 	.word	0x080030d5
 80030bc:	2301      	movs	r3, #1
 80030be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030c2:	e116      	b.n	80032f2 <UART_SetConfig+0x2e6>
 80030c4:	2302      	movs	r3, #2
 80030c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ca:	e112      	b.n	80032f2 <UART_SetConfig+0x2e6>
 80030cc:	2304      	movs	r3, #4
 80030ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030d2:	e10e      	b.n	80032f2 <UART_SetConfig+0x2e6>
 80030d4:	2308      	movs	r3, #8
 80030d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030da:	e10a      	b.n	80032f2 <UART_SetConfig+0x2e6>
 80030dc:	2310      	movs	r3, #16
 80030de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030e2:	e106      	b.n	80032f2 <UART_SetConfig+0x2e6>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a7c      	ldr	r2, [pc, #496]	; (80032dc <UART_SetConfig+0x2d0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d138      	bne.n	8003160 <UART_SetConfig+0x154>
 80030ee:	4b7a      	ldr	r3, [pc, #488]	; (80032d8 <UART_SetConfig+0x2cc>)
 80030f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f4:	f003 030c 	and.w	r3, r3, #12
 80030f8:	2b0c      	cmp	r3, #12
 80030fa:	d82d      	bhi.n	8003158 <UART_SetConfig+0x14c>
 80030fc:	a201      	add	r2, pc, #4	; (adr r2, 8003104 <UART_SetConfig+0xf8>)
 80030fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003102:	bf00      	nop
 8003104:	08003139 	.word	0x08003139
 8003108:	08003159 	.word	0x08003159
 800310c:	08003159 	.word	0x08003159
 8003110:	08003159 	.word	0x08003159
 8003114:	08003149 	.word	0x08003149
 8003118:	08003159 	.word	0x08003159
 800311c:	08003159 	.word	0x08003159
 8003120:	08003159 	.word	0x08003159
 8003124:	08003141 	.word	0x08003141
 8003128:	08003159 	.word	0x08003159
 800312c:	08003159 	.word	0x08003159
 8003130:	08003159 	.word	0x08003159
 8003134:	08003151 	.word	0x08003151
 8003138:	2300      	movs	r3, #0
 800313a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800313e:	e0d8      	b.n	80032f2 <UART_SetConfig+0x2e6>
 8003140:	2302      	movs	r3, #2
 8003142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003146:	e0d4      	b.n	80032f2 <UART_SetConfig+0x2e6>
 8003148:	2304      	movs	r3, #4
 800314a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800314e:	e0d0      	b.n	80032f2 <UART_SetConfig+0x2e6>
 8003150:	2308      	movs	r3, #8
 8003152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003156:	e0cc      	b.n	80032f2 <UART_SetConfig+0x2e6>
 8003158:	2310      	movs	r3, #16
 800315a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800315e:	e0c8      	b.n	80032f2 <UART_SetConfig+0x2e6>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a5e      	ldr	r2, [pc, #376]	; (80032e0 <UART_SetConfig+0x2d4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d125      	bne.n	80031b6 <UART_SetConfig+0x1aa>
 800316a:	4b5b      	ldr	r3, [pc, #364]	; (80032d8 <UART_SetConfig+0x2cc>)
 800316c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003170:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003174:	2b30      	cmp	r3, #48	; 0x30
 8003176:	d016      	beq.n	80031a6 <UART_SetConfig+0x19a>
 8003178:	2b30      	cmp	r3, #48	; 0x30
 800317a:	d818      	bhi.n	80031ae <UART_SetConfig+0x1a2>
 800317c:	2b20      	cmp	r3, #32
 800317e:	d00a      	beq.n	8003196 <UART_SetConfig+0x18a>
 8003180:	2b20      	cmp	r3, #32
 8003182:	d814      	bhi.n	80031ae <UART_SetConfig+0x1a2>
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <UART_SetConfig+0x182>
 8003188:	2b10      	cmp	r3, #16
 800318a:	d008      	beq.n	800319e <UART_SetConfig+0x192>
 800318c:	e00f      	b.n	80031ae <UART_SetConfig+0x1a2>
 800318e:	2300      	movs	r3, #0
 8003190:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003194:	e0ad      	b.n	80032f2 <UART_SetConfig+0x2e6>
 8003196:	2302      	movs	r3, #2
 8003198:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800319c:	e0a9      	b.n	80032f2 <UART_SetConfig+0x2e6>
 800319e:	2304      	movs	r3, #4
 80031a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031a4:	e0a5      	b.n	80032f2 <UART_SetConfig+0x2e6>
 80031a6:	2308      	movs	r3, #8
 80031a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ac:	e0a1      	b.n	80032f2 <UART_SetConfig+0x2e6>
 80031ae:	2310      	movs	r3, #16
 80031b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b4:	e09d      	b.n	80032f2 <UART_SetConfig+0x2e6>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a4a      	ldr	r2, [pc, #296]	; (80032e4 <UART_SetConfig+0x2d8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d125      	bne.n	800320c <UART_SetConfig+0x200>
 80031c0:	4b45      	ldr	r3, [pc, #276]	; (80032d8 <UART_SetConfig+0x2cc>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031ca:	2bc0      	cmp	r3, #192	; 0xc0
 80031cc:	d016      	beq.n	80031fc <UART_SetConfig+0x1f0>
 80031ce:	2bc0      	cmp	r3, #192	; 0xc0
 80031d0:	d818      	bhi.n	8003204 <UART_SetConfig+0x1f8>
 80031d2:	2b80      	cmp	r3, #128	; 0x80
 80031d4:	d00a      	beq.n	80031ec <UART_SetConfig+0x1e0>
 80031d6:	2b80      	cmp	r3, #128	; 0x80
 80031d8:	d814      	bhi.n	8003204 <UART_SetConfig+0x1f8>
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <UART_SetConfig+0x1d8>
 80031de:	2b40      	cmp	r3, #64	; 0x40
 80031e0:	d008      	beq.n	80031f4 <UART_SetConfig+0x1e8>
 80031e2:	e00f      	b.n	8003204 <UART_SetConfig+0x1f8>
 80031e4:	2300      	movs	r3, #0
 80031e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ea:	e082      	b.n	80032f2 <UART_SetConfig+0x2e6>
 80031ec:	2302      	movs	r3, #2
 80031ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f2:	e07e      	b.n	80032f2 <UART_SetConfig+0x2e6>
 80031f4:	2304      	movs	r3, #4
 80031f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031fa:	e07a      	b.n	80032f2 <UART_SetConfig+0x2e6>
 80031fc:	2308      	movs	r3, #8
 80031fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003202:	e076      	b.n	80032f2 <UART_SetConfig+0x2e6>
 8003204:	2310      	movs	r3, #16
 8003206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800320a:	e072      	b.n	80032f2 <UART_SetConfig+0x2e6>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a35      	ldr	r2, [pc, #212]	; (80032e8 <UART_SetConfig+0x2dc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d12a      	bne.n	800326c <UART_SetConfig+0x260>
 8003216:	4b30      	ldr	r3, [pc, #192]	; (80032d8 <UART_SetConfig+0x2cc>)
 8003218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003220:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003224:	d01a      	beq.n	800325c <UART_SetConfig+0x250>
 8003226:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800322a:	d81b      	bhi.n	8003264 <UART_SetConfig+0x258>
 800322c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003230:	d00c      	beq.n	800324c <UART_SetConfig+0x240>
 8003232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003236:	d815      	bhi.n	8003264 <UART_SetConfig+0x258>
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <UART_SetConfig+0x238>
 800323c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003240:	d008      	beq.n	8003254 <UART_SetConfig+0x248>
 8003242:	e00f      	b.n	8003264 <UART_SetConfig+0x258>
 8003244:	2300      	movs	r3, #0
 8003246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800324a:	e052      	b.n	80032f2 <UART_SetConfig+0x2e6>
 800324c:	2302      	movs	r3, #2
 800324e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003252:	e04e      	b.n	80032f2 <UART_SetConfig+0x2e6>
 8003254:	2304      	movs	r3, #4
 8003256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800325a:	e04a      	b.n	80032f2 <UART_SetConfig+0x2e6>
 800325c:	2308      	movs	r3, #8
 800325e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003262:	e046      	b.n	80032f2 <UART_SetConfig+0x2e6>
 8003264:	2310      	movs	r3, #16
 8003266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800326a:	e042      	b.n	80032f2 <UART_SetConfig+0x2e6>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a17      	ldr	r2, [pc, #92]	; (80032d0 <UART_SetConfig+0x2c4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d13a      	bne.n	80032ec <UART_SetConfig+0x2e0>
 8003276:	4b18      	ldr	r3, [pc, #96]	; (80032d8 <UART_SetConfig+0x2cc>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003280:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003284:	d01a      	beq.n	80032bc <UART_SetConfig+0x2b0>
 8003286:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800328a:	d81b      	bhi.n	80032c4 <UART_SetConfig+0x2b8>
 800328c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003290:	d00c      	beq.n	80032ac <UART_SetConfig+0x2a0>
 8003292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003296:	d815      	bhi.n	80032c4 <UART_SetConfig+0x2b8>
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <UART_SetConfig+0x298>
 800329c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a0:	d008      	beq.n	80032b4 <UART_SetConfig+0x2a8>
 80032a2:	e00f      	b.n	80032c4 <UART_SetConfig+0x2b8>
 80032a4:	2300      	movs	r3, #0
 80032a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032aa:	e022      	b.n	80032f2 <UART_SetConfig+0x2e6>
 80032ac:	2302      	movs	r3, #2
 80032ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032b2:	e01e      	b.n	80032f2 <UART_SetConfig+0x2e6>
 80032b4:	2304      	movs	r3, #4
 80032b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ba:	e01a      	b.n	80032f2 <UART_SetConfig+0x2e6>
 80032bc:	2308      	movs	r3, #8
 80032be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c2:	e016      	b.n	80032f2 <UART_SetConfig+0x2e6>
 80032c4:	2310      	movs	r3, #16
 80032c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ca:	e012      	b.n	80032f2 <UART_SetConfig+0x2e6>
 80032cc:	efff69f3 	.word	0xefff69f3
 80032d0:	40008000 	.word	0x40008000
 80032d4:	40013800 	.word	0x40013800
 80032d8:	40021000 	.word	0x40021000
 80032dc:	40004400 	.word	0x40004400
 80032e0:	40004800 	.word	0x40004800
 80032e4:	40004c00 	.word	0x40004c00
 80032e8:	40005000 	.word	0x40005000
 80032ec:	2310      	movs	r3, #16
 80032ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a9f      	ldr	r2, [pc, #636]	; (8003574 <UART_SetConfig+0x568>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d17a      	bne.n	80033f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003300:	2b08      	cmp	r3, #8
 8003302:	d824      	bhi.n	800334e <UART_SetConfig+0x342>
 8003304:	a201      	add	r2, pc, #4	; (adr r2, 800330c <UART_SetConfig+0x300>)
 8003306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330a:	bf00      	nop
 800330c:	08003331 	.word	0x08003331
 8003310:	0800334f 	.word	0x0800334f
 8003314:	08003339 	.word	0x08003339
 8003318:	0800334f 	.word	0x0800334f
 800331c:	0800333f 	.word	0x0800333f
 8003320:	0800334f 	.word	0x0800334f
 8003324:	0800334f 	.word	0x0800334f
 8003328:	0800334f 	.word	0x0800334f
 800332c:	08003347 	.word	0x08003347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003330:	f7ff f842 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 8003334:	61f8      	str	r0, [r7, #28]
        break;
 8003336:	e010      	b.n	800335a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003338:	4b8f      	ldr	r3, [pc, #572]	; (8003578 <UART_SetConfig+0x56c>)
 800333a:	61fb      	str	r3, [r7, #28]
        break;
 800333c:	e00d      	b.n	800335a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800333e:	f7fe ffa3 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 8003342:	61f8      	str	r0, [r7, #28]
        break;
 8003344:	e009      	b.n	800335a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800334a:	61fb      	str	r3, [r7, #28]
        break;
 800334c:	e005      	b.n	800335a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003358:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80fb 	beq.w	8003558 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	4413      	add	r3, r2
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	429a      	cmp	r2, r3
 8003370:	d305      	bcc.n	800337e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003378:	69fa      	ldr	r2, [r7, #28]
 800337a:	429a      	cmp	r2, r3
 800337c:	d903      	bls.n	8003386 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003384:	e0e8      	b.n	8003558 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	2200      	movs	r2, #0
 800338a:	461c      	mov	r4, r3
 800338c:	4615      	mov	r5, r2
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	022b      	lsls	r3, r5, #8
 8003398:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800339c:	0222      	lsls	r2, r4, #8
 800339e:	68f9      	ldr	r1, [r7, #12]
 80033a0:	6849      	ldr	r1, [r1, #4]
 80033a2:	0849      	lsrs	r1, r1, #1
 80033a4:	2000      	movs	r0, #0
 80033a6:	4688      	mov	r8, r1
 80033a8:	4681      	mov	r9, r0
 80033aa:	eb12 0a08 	adds.w	sl, r2, r8
 80033ae:	eb43 0b09 	adc.w	fp, r3, r9
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	603b      	str	r3, [r7, #0]
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033c0:	4650      	mov	r0, sl
 80033c2:	4659      	mov	r1, fp
 80033c4:	f7fc ff54 	bl	8000270 <__aeabi_uldivmod>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4613      	mov	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033d6:	d308      	bcc.n	80033ea <UART_SetConfig+0x3de>
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033de:	d204      	bcs.n	80033ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	60da      	str	r2, [r3, #12]
 80033e8:	e0b6      	b.n	8003558 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033f0:	e0b2      	b.n	8003558 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033fa:	d15e      	bne.n	80034ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80033fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003400:	2b08      	cmp	r3, #8
 8003402:	d828      	bhi.n	8003456 <UART_SetConfig+0x44a>
 8003404:	a201      	add	r2, pc, #4	; (adr r2, 800340c <UART_SetConfig+0x400>)
 8003406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340a:	bf00      	nop
 800340c:	08003431 	.word	0x08003431
 8003410:	08003439 	.word	0x08003439
 8003414:	08003441 	.word	0x08003441
 8003418:	08003457 	.word	0x08003457
 800341c:	08003447 	.word	0x08003447
 8003420:	08003457 	.word	0x08003457
 8003424:	08003457 	.word	0x08003457
 8003428:	08003457 	.word	0x08003457
 800342c:	0800344f 	.word	0x0800344f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003430:	f7fe ffc2 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 8003434:	61f8      	str	r0, [r7, #28]
        break;
 8003436:	e014      	b.n	8003462 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003438:	f7fe ffd4 	bl	80023e4 <HAL_RCC_GetPCLK2Freq>
 800343c:	61f8      	str	r0, [r7, #28]
        break;
 800343e:	e010      	b.n	8003462 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003440:	4b4d      	ldr	r3, [pc, #308]	; (8003578 <UART_SetConfig+0x56c>)
 8003442:	61fb      	str	r3, [r7, #28]
        break;
 8003444:	e00d      	b.n	8003462 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003446:	f7fe ff1f 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 800344a:	61f8      	str	r0, [r7, #28]
        break;
 800344c:	e009      	b.n	8003462 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800344e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003452:	61fb      	str	r3, [r7, #28]
        break;
 8003454:	e005      	b.n	8003462 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003460:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d077      	beq.n	8003558 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	005a      	lsls	r2, r3, #1
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	085b      	lsrs	r3, r3, #1
 8003472:	441a      	add	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	fbb2 f3f3 	udiv	r3, r2, r3
 800347c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	2b0f      	cmp	r3, #15
 8003482:	d916      	bls.n	80034b2 <UART_SetConfig+0x4a6>
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800348a:	d212      	bcs.n	80034b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	b29b      	uxth	r3, r3
 8003490:	f023 030f 	bic.w	r3, r3, #15
 8003494:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	085b      	lsrs	r3, r3, #1
 800349a:	b29b      	uxth	r3, r3
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	8afb      	ldrh	r3, [r7, #22]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	8afa      	ldrh	r2, [r7, #22]
 80034ae:	60da      	str	r2, [r3, #12]
 80034b0:	e052      	b.n	8003558 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034b8:	e04e      	b.n	8003558 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d827      	bhi.n	8003512 <UART_SetConfig+0x506>
 80034c2:	a201      	add	r2, pc, #4	; (adr r2, 80034c8 <UART_SetConfig+0x4bc>)
 80034c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c8:	080034ed 	.word	0x080034ed
 80034cc:	080034f5 	.word	0x080034f5
 80034d0:	080034fd 	.word	0x080034fd
 80034d4:	08003513 	.word	0x08003513
 80034d8:	08003503 	.word	0x08003503
 80034dc:	08003513 	.word	0x08003513
 80034e0:	08003513 	.word	0x08003513
 80034e4:	08003513 	.word	0x08003513
 80034e8:	0800350b 	.word	0x0800350b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034ec:	f7fe ff64 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 80034f0:	61f8      	str	r0, [r7, #28]
        break;
 80034f2:	e014      	b.n	800351e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034f4:	f7fe ff76 	bl	80023e4 <HAL_RCC_GetPCLK2Freq>
 80034f8:	61f8      	str	r0, [r7, #28]
        break;
 80034fa:	e010      	b.n	800351e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034fc:	4b1e      	ldr	r3, [pc, #120]	; (8003578 <UART_SetConfig+0x56c>)
 80034fe:	61fb      	str	r3, [r7, #28]
        break;
 8003500:	e00d      	b.n	800351e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003502:	f7fe fec1 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 8003506:	61f8      	str	r0, [r7, #28]
        break;
 8003508:	e009      	b.n	800351e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800350a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800350e:	61fb      	str	r3, [r7, #28]
        break;
 8003510:	e005      	b.n	800351e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800351c:	bf00      	nop
    }

    if (pclk != 0U)
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d019      	beq.n	8003558 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	085a      	lsrs	r2, r3, #1
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	441a      	add	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	fbb2 f3f3 	udiv	r3, r2, r3
 8003536:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	2b0f      	cmp	r3, #15
 800353c:	d909      	bls.n	8003552 <UART_SetConfig+0x546>
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003544:	d205      	bcs.n	8003552 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60da      	str	r2, [r3, #12]
 8003550:	e002      	b.n	8003558 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003564:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003568:	4618      	mov	r0, r3
 800356a:	3728      	adds	r7, #40	; 0x28
 800356c:	46bd      	mov	sp, r7
 800356e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003572:	bf00      	nop
 8003574:	40008000 	.word	0x40008000
 8003578:	00f42400 	.word	0x00f42400

0800357c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01a      	beq.n	8003692 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800367a:	d10a      	bne.n	8003692 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	605a      	str	r2, [r3, #4]
  }
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af02      	add	r7, sp, #8
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036d0:	f7fd fd4c 	bl	800116c <HAL_GetTick>
 80036d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d10e      	bne.n	8003702 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f82d 	bl	8003752 <UART_WaitOnFlagUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e023      	b.n	800374a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b04      	cmp	r3, #4
 800370e:	d10e      	bne.n	800372e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003710:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f817 	bl	8003752 <UART_WaitOnFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e00d      	b.n	800374a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2220      	movs	r2, #32
 8003732:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b09c      	sub	sp, #112	; 0x70
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	603b      	str	r3, [r7, #0]
 800375e:	4613      	mov	r3, r2
 8003760:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003762:	e0a5      	b.n	80038b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003764:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376a:	f000 80a1 	beq.w	80038b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376e:	f7fd fcfd 	bl	800116c <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800377a:	429a      	cmp	r2, r3
 800377c:	d302      	bcc.n	8003784 <UART_WaitOnFlagUntilTimeout+0x32>
 800377e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003780:	2b00      	cmp	r3, #0
 8003782:	d13e      	bne.n	8003802 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800378c:	e853 3f00 	ldrex	r3, [r3]
 8003790:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003794:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003798:	667b      	str	r3, [r7, #100]	; 0x64
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80037a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037aa:	e841 2300 	strex	r3, r2, [r1]
 80037ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80037b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1e6      	bne.n	8003784 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3308      	adds	r3, #8
 80037bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037c0:	e853 3f00 	ldrex	r3, [r3]
 80037c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	663b      	str	r3, [r7, #96]	; 0x60
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3308      	adds	r3, #8
 80037d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80037d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80037dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037de:	e841 2300 	strex	r3, r2, [r1]
 80037e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80037e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1e5      	bne.n	80037b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2220      	movs	r2, #32
 80037ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e067      	b.n	80038d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d04f      	beq.n	80038b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800381a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800381e:	d147      	bne.n	80038b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003828:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	e853 3f00 	ldrex	r3, [r3]
 8003836:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800383e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	461a      	mov	r2, r3
 8003846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003848:	637b      	str	r3, [r7, #52]	; 0x34
 800384a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800384e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003850:	e841 2300 	strex	r3, r2, [r1]
 8003854:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e6      	bne.n	800382a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3308      	adds	r3, #8
 8003862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	e853 3f00 	ldrex	r3, [r3]
 800386a:	613b      	str	r3, [r7, #16]
   return(result);
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	66bb      	str	r3, [r7, #104]	; 0x68
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3308      	adds	r3, #8
 800387a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800387c:	623a      	str	r2, [r7, #32]
 800387e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003880:	69f9      	ldr	r1, [r7, #28]
 8003882:	6a3a      	ldr	r2, [r7, #32]
 8003884:	e841 2300 	strex	r3, r2, [r1]
 8003888:	61bb      	str	r3, [r7, #24]
   return(result);
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1e5      	bne.n	800385c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2220      	movs	r2, #32
 8003894:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2220      	movs	r2, #32
 800389a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e010      	b.n	80038d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69da      	ldr	r2, [r3, #28]
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	4013      	ands	r3, r2
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	429a      	cmp	r2, r3
 80038be:	bf0c      	ite	eq
 80038c0:	2301      	moveq	r3, #1
 80038c2:	2300      	movne	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	461a      	mov	r2, r3
 80038c8:	79fb      	ldrb	r3, [r7, #7]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	f43f af4a 	beq.w	8003764 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3770      	adds	r7, #112	; 0x70
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <__errno>:
 80038dc:	4b01      	ldr	r3, [pc, #4]	; (80038e4 <__errno+0x8>)
 80038de:	6818      	ldr	r0, [r3, #0]
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	20000010 	.word	0x20000010

080038e8 <__libc_init_array>:
 80038e8:	b570      	push	{r4, r5, r6, lr}
 80038ea:	4d0d      	ldr	r5, [pc, #52]	; (8003920 <__libc_init_array+0x38>)
 80038ec:	4c0d      	ldr	r4, [pc, #52]	; (8003924 <__libc_init_array+0x3c>)
 80038ee:	1b64      	subs	r4, r4, r5
 80038f0:	10a4      	asrs	r4, r4, #2
 80038f2:	2600      	movs	r6, #0
 80038f4:	42a6      	cmp	r6, r4
 80038f6:	d109      	bne.n	800390c <__libc_init_array+0x24>
 80038f8:	4d0b      	ldr	r5, [pc, #44]	; (8003928 <__libc_init_array+0x40>)
 80038fa:	4c0c      	ldr	r4, [pc, #48]	; (800392c <__libc_init_array+0x44>)
 80038fc:	f000 ffae 	bl	800485c <_init>
 8003900:	1b64      	subs	r4, r4, r5
 8003902:	10a4      	asrs	r4, r4, #2
 8003904:	2600      	movs	r6, #0
 8003906:	42a6      	cmp	r6, r4
 8003908:	d105      	bne.n	8003916 <__libc_init_array+0x2e>
 800390a:	bd70      	pop	{r4, r5, r6, pc}
 800390c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003910:	4798      	blx	r3
 8003912:	3601      	adds	r6, #1
 8003914:	e7ee      	b.n	80038f4 <__libc_init_array+0xc>
 8003916:	f855 3b04 	ldr.w	r3, [r5], #4
 800391a:	4798      	blx	r3
 800391c:	3601      	adds	r6, #1
 800391e:	e7f2      	b.n	8003906 <__libc_init_array+0x1e>
 8003920:	08004998 	.word	0x08004998
 8003924:	08004998 	.word	0x08004998
 8003928:	08004998 	.word	0x08004998
 800392c:	0800499c 	.word	0x0800499c

08003930 <memset>:
 8003930:	4402      	add	r2, r0
 8003932:	4603      	mov	r3, r0
 8003934:	4293      	cmp	r3, r2
 8003936:	d100      	bne.n	800393a <memset+0xa>
 8003938:	4770      	bx	lr
 800393a:	f803 1b01 	strb.w	r1, [r3], #1
 800393e:	e7f9      	b.n	8003934 <memset+0x4>

08003940 <iprintf>:
 8003940:	b40f      	push	{r0, r1, r2, r3}
 8003942:	4b0a      	ldr	r3, [pc, #40]	; (800396c <iprintf+0x2c>)
 8003944:	b513      	push	{r0, r1, r4, lr}
 8003946:	681c      	ldr	r4, [r3, #0]
 8003948:	b124      	cbz	r4, 8003954 <iprintf+0x14>
 800394a:	69a3      	ldr	r3, [r4, #24]
 800394c:	b913      	cbnz	r3, 8003954 <iprintf+0x14>
 800394e:	4620      	mov	r0, r4
 8003950:	f000 f866 	bl	8003a20 <__sinit>
 8003954:	ab05      	add	r3, sp, #20
 8003956:	9a04      	ldr	r2, [sp, #16]
 8003958:	68a1      	ldr	r1, [r4, #8]
 800395a:	9301      	str	r3, [sp, #4]
 800395c:	4620      	mov	r0, r4
 800395e:	f000 f9bd 	bl	8003cdc <_vfiprintf_r>
 8003962:	b002      	add	sp, #8
 8003964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003968:	b004      	add	sp, #16
 800396a:	4770      	bx	lr
 800396c:	20000010 	.word	0x20000010

08003970 <std>:
 8003970:	2300      	movs	r3, #0
 8003972:	b510      	push	{r4, lr}
 8003974:	4604      	mov	r4, r0
 8003976:	e9c0 3300 	strd	r3, r3, [r0]
 800397a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800397e:	6083      	str	r3, [r0, #8]
 8003980:	8181      	strh	r1, [r0, #12]
 8003982:	6643      	str	r3, [r0, #100]	; 0x64
 8003984:	81c2      	strh	r2, [r0, #14]
 8003986:	6183      	str	r3, [r0, #24]
 8003988:	4619      	mov	r1, r3
 800398a:	2208      	movs	r2, #8
 800398c:	305c      	adds	r0, #92	; 0x5c
 800398e:	f7ff ffcf 	bl	8003930 <memset>
 8003992:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <std+0x38>)
 8003994:	6263      	str	r3, [r4, #36]	; 0x24
 8003996:	4b05      	ldr	r3, [pc, #20]	; (80039ac <std+0x3c>)
 8003998:	62a3      	str	r3, [r4, #40]	; 0x28
 800399a:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <std+0x40>)
 800399c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800399e:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <std+0x44>)
 80039a0:	6224      	str	r4, [r4, #32]
 80039a2:	6323      	str	r3, [r4, #48]	; 0x30
 80039a4:	bd10      	pop	{r4, pc}
 80039a6:	bf00      	nop
 80039a8:	08004285 	.word	0x08004285
 80039ac:	080042a7 	.word	0x080042a7
 80039b0:	080042df 	.word	0x080042df
 80039b4:	08004303 	.word	0x08004303

080039b8 <_cleanup_r>:
 80039b8:	4901      	ldr	r1, [pc, #4]	; (80039c0 <_cleanup_r+0x8>)
 80039ba:	f000 b8af 	b.w	8003b1c <_fwalk_reent>
 80039be:	bf00      	nop
 80039c0:	080045dd 	.word	0x080045dd

080039c4 <__sfmoreglue>:
 80039c4:	b570      	push	{r4, r5, r6, lr}
 80039c6:	2268      	movs	r2, #104	; 0x68
 80039c8:	1e4d      	subs	r5, r1, #1
 80039ca:	4355      	muls	r5, r2
 80039cc:	460e      	mov	r6, r1
 80039ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80039d2:	f000 f8e5 	bl	8003ba0 <_malloc_r>
 80039d6:	4604      	mov	r4, r0
 80039d8:	b140      	cbz	r0, 80039ec <__sfmoreglue+0x28>
 80039da:	2100      	movs	r1, #0
 80039dc:	e9c0 1600 	strd	r1, r6, [r0]
 80039e0:	300c      	adds	r0, #12
 80039e2:	60a0      	str	r0, [r4, #8]
 80039e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80039e8:	f7ff ffa2 	bl	8003930 <memset>
 80039ec:	4620      	mov	r0, r4
 80039ee:	bd70      	pop	{r4, r5, r6, pc}

080039f0 <__sfp_lock_acquire>:
 80039f0:	4801      	ldr	r0, [pc, #4]	; (80039f8 <__sfp_lock_acquire+0x8>)
 80039f2:	f000 b8b3 	b.w	8003b5c <__retarget_lock_acquire_recursive>
 80039f6:	bf00      	nop
 80039f8:	20000121 	.word	0x20000121

080039fc <__sfp_lock_release>:
 80039fc:	4801      	ldr	r0, [pc, #4]	; (8003a04 <__sfp_lock_release+0x8>)
 80039fe:	f000 b8ae 	b.w	8003b5e <__retarget_lock_release_recursive>
 8003a02:	bf00      	nop
 8003a04:	20000121 	.word	0x20000121

08003a08 <__sinit_lock_acquire>:
 8003a08:	4801      	ldr	r0, [pc, #4]	; (8003a10 <__sinit_lock_acquire+0x8>)
 8003a0a:	f000 b8a7 	b.w	8003b5c <__retarget_lock_acquire_recursive>
 8003a0e:	bf00      	nop
 8003a10:	20000122 	.word	0x20000122

08003a14 <__sinit_lock_release>:
 8003a14:	4801      	ldr	r0, [pc, #4]	; (8003a1c <__sinit_lock_release+0x8>)
 8003a16:	f000 b8a2 	b.w	8003b5e <__retarget_lock_release_recursive>
 8003a1a:	bf00      	nop
 8003a1c:	20000122 	.word	0x20000122

08003a20 <__sinit>:
 8003a20:	b510      	push	{r4, lr}
 8003a22:	4604      	mov	r4, r0
 8003a24:	f7ff fff0 	bl	8003a08 <__sinit_lock_acquire>
 8003a28:	69a3      	ldr	r3, [r4, #24]
 8003a2a:	b11b      	cbz	r3, 8003a34 <__sinit+0x14>
 8003a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a30:	f7ff bff0 	b.w	8003a14 <__sinit_lock_release>
 8003a34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003a38:	6523      	str	r3, [r4, #80]	; 0x50
 8003a3a:	4b13      	ldr	r3, [pc, #76]	; (8003a88 <__sinit+0x68>)
 8003a3c:	4a13      	ldr	r2, [pc, #76]	; (8003a8c <__sinit+0x6c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	62a2      	str	r2, [r4, #40]	; 0x28
 8003a42:	42a3      	cmp	r3, r4
 8003a44:	bf04      	itt	eq
 8003a46:	2301      	moveq	r3, #1
 8003a48:	61a3      	streq	r3, [r4, #24]
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	f000 f820 	bl	8003a90 <__sfp>
 8003a50:	6060      	str	r0, [r4, #4]
 8003a52:	4620      	mov	r0, r4
 8003a54:	f000 f81c 	bl	8003a90 <__sfp>
 8003a58:	60a0      	str	r0, [r4, #8]
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	f000 f818 	bl	8003a90 <__sfp>
 8003a60:	2200      	movs	r2, #0
 8003a62:	60e0      	str	r0, [r4, #12]
 8003a64:	2104      	movs	r1, #4
 8003a66:	6860      	ldr	r0, [r4, #4]
 8003a68:	f7ff ff82 	bl	8003970 <std>
 8003a6c:	68a0      	ldr	r0, [r4, #8]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	2109      	movs	r1, #9
 8003a72:	f7ff ff7d 	bl	8003970 <std>
 8003a76:	68e0      	ldr	r0, [r4, #12]
 8003a78:	2202      	movs	r2, #2
 8003a7a:	2112      	movs	r1, #18
 8003a7c:	f7ff ff78 	bl	8003970 <std>
 8003a80:	2301      	movs	r3, #1
 8003a82:	61a3      	str	r3, [r4, #24]
 8003a84:	e7d2      	b.n	8003a2c <__sinit+0xc>
 8003a86:	bf00      	nop
 8003a88:	080048f8 	.word	0x080048f8
 8003a8c:	080039b9 	.word	0x080039b9

08003a90 <__sfp>:
 8003a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a92:	4607      	mov	r7, r0
 8003a94:	f7ff ffac 	bl	80039f0 <__sfp_lock_acquire>
 8003a98:	4b1e      	ldr	r3, [pc, #120]	; (8003b14 <__sfp+0x84>)
 8003a9a:	681e      	ldr	r6, [r3, #0]
 8003a9c:	69b3      	ldr	r3, [r6, #24]
 8003a9e:	b913      	cbnz	r3, 8003aa6 <__sfp+0x16>
 8003aa0:	4630      	mov	r0, r6
 8003aa2:	f7ff ffbd 	bl	8003a20 <__sinit>
 8003aa6:	3648      	adds	r6, #72	; 0x48
 8003aa8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003aac:	3b01      	subs	r3, #1
 8003aae:	d503      	bpl.n	8003ab8 <__sfp+0x28>
 8003ab0:	6833      	ldr	r3, [r6, #0]
 8003ab2:	b30b      	cbz	r3, 8003af8 <__sfp+0x68>
 8003ab4:	6836      	ldr	r6, [r6, #0]
 8003ab6:	e7f7      	b.n	8003aa8 <__sfp+0x18>
 8003ab8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003abc:	b9d5      	cbnz	r5, 8003af4 <__sfp+0x64>
 8003abe:	4b16      	ldr	r3, [pc, #88]	; (8003b18 <__sfp+0x88>)
 8003ac0:	60e3      	str	r3, [r4, #12]
 8003ac2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ac6:	6665      	str	r5, [r4, #100]	; 0x64
 8003ac8:	f000 f847 	bl	8003b5a <__retarget_lock_init_recursive>
 8003acc:	f7ff ff96 	bl	80039fc <__sfp_lock_release>
 8003ad0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003ad4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003ad8:	6025      	str	r5, [r4, #0]
 8003ada:	61a5      	str	r5, [r4, #24]
 8003adc:	2208      	movs	r2, #8
 8003ade:	4629      	mov	r1, r5
 8003ae0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ae4:	f7ff ff24 	bl	8003930 <memset>
 8003ae8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003aec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003af0:	4620      	mov	r0, r4
 8003af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003af4:	3468      	adds	r4, #104	; 0x68
 8003af6:	e7d9      	b.n	8003aac <__sfp+0x1c>
 8003af8:	2104      	movs	r1, #4
 8003afa:	4638      	mov	r0, r7
 8003afc:	f7ff ff62 	bl	80039c4 <__sfmoreglue>
 8003b00:	4604      	mov	r4, r0
 8003b02:	6030      	str	r0, [r6, #0]
 8003b04:	2800      	cmp	r0, #0
 8003b06:	d1d5      	bne.n	8003ab4 <__sfp+0x24>
 8003b08:	f7ff ff78 	bl	80039fc <__sfp_lock_release>
 8003b0c:	230c      	movs	r3, #12
 8003b0e:	603b      	str	r3, [r7, #0]
 8003b10:	e7ee      	b.n	8003af0 <__sfp+0x60>
 8003b12:	bf00      	nop
 8003b14:	080048f8 	.word	0x080048f8
 8003b18:	ffff0001 	.word	0xffff0001

08003b1c <_fwalk_reent>:
 8003b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b20:	4606      	mov	r6, r0
 8003b22:	4688      	mov	r8, r1
 8003b24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003b28:	2700      	movs	r7, #0
 8003b2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b2e:	f1b9 0901 	subs.w	r9, r9, #1
 8003b32:	d505      	bpl.n	8003b40 <_fwalk_reent+0x24>
 8003b34:	6824      	ldr	r4, [r4, #0]
 8003b36:	2c00      	cmp	r4, #0
 8003b38:	d1f7      	bne.n	8003b2a <_fwalk_reent+0xe>
 8003b3a:	4638      	mov	r0, r7
 8003b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b40:	89ab      	ldrh	r3, [r5, #12]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d907      	bls.n	8003b56 <_fwalk_reent+0x3a>
 8003b46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	d003      	beq.n	8003b56 <_fwalk_reent+0x3a>
 8003b4e:	4629      	mov	r1, r5
 8003b50:	4630      	mov	r0, r6
 8003b52:	47c0      	blx	r8
 8003b54:	4307      	orrs	r7, r0
 8003b56:	3568      	adds	r5, #104	; 0x68
 8003b58:	e7e9      	b.n	8003b2e <_fwalk_reent+0x12>

08003b5a <__retarget_lock_init_recursive>:
 8003b5a:	4770      	bx	lr

08003b5c <__retarget_lock_acquire_recursive>:
 8003b5c:	4770      	bx	lr

08003b5e <__retarget_lock_release_recursive>:
 8003b5e:	4770      	bx	lr

08003b60 <sbrk_aligned>:
 8003b60:	b570      	push	{r4, r5, r6, lr}
 8003b62:	4e0e      	ldr	r6, [pc, #56]	; (8003b9c <sbrk_aligned+0x3c>)
 8003b64:	460c      	mov	r4, r1
 8003b66:	6831      	ldr	r1, [r6, #0]
 8003b68:	4605      	mov	r5, r0
 8003b6a:	b911      	cbnz	r1, 8003b72 <sbrk_aligned+0x12>
 8003b6c:	f000 fb7a 	bl	8004264 <_sbrk_r>
 8003b70:	6030      	str	r0, [r6, #0]
 8003b72:	4621      	mov	r1, r4
 8003b74:	4628      	mov	r0, r5
 8003b76:	f000 fb75 	bl	8004264 <_sbrk_r>
 8003b7a:	1c43      	adds	r3, r0, #1
 8003b7c:	d00a      	beq.n	8003b94 <sbrk_aligned+0x34>
 8003b7e:	1cc4      	adds	r4, r0, #3
 8003b80:	f024 0403 	bic.w	r4, r4, #3
 8003b84:	42a0      	cmp	r0, r4
 8003b86:	d007      	beq.n	8003b98 <sbrk_aligned+0x38>
 8003b88:	1a21      	subs	r1, r4, r0
 8003b8a:	4628      	mov	r0, r5
 8003b8c:	f000 fb6a 	bl	8004264 <_sbrk_r>
 8003b90:	3001      	adds	r0, #1
 8003b92:	d101      	bne.n	8003b98 <sbrk_aligned+0x38>
 8003b94:	f04f 34ff 	mov.w	r4, #4294967295
 8003b98:	4620      	mov	r0, r4
 8003b9a:	bd70      	pop	{r4, r5, r6, pc}
 8003b9c:	20000128 	.word	0x20000128

08003ba0 <_malloc_r>:
 8003ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ba4:	1ccd      	adds	r5, r1, #3
 8003ba6:	f025 0503 	bic.w	r5, r5, #3
 8003baa:	3508      	adds	r5, #8
 8003bac:	2d0c      	cmp	r5, #12
 8003bae:	bf38      	it	cc
 8003bb0:	250c      	movcc	r5, #12
 8003bb2:	2d00      	cmp	r5, #0
 8003bb4:	4607      	mov	r7, r0
 8003bb6:	db01      	blt.n	8003bbc <_malloc_r+0x1c>
 8003bb8:	42a9      	cmp	r1, r5
 8003bba:	d905      	bls.n	8003bc8 <_malloc_r+0x28>
 8003bbc:	230c      	movs	r3, #12
 8003bbe:	603b      	str	r3, [r7, #0]
 8003bc0:	2600      	movs	r6, #0
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bc8:	4e2e      	ldr	r6, [pc, #184]	; (8003c84 <_malloc_r+0xe4>)
 8003bca:	f000 fdbb 	bl	8004744 <__malloc_lock>
 8003bce:	6833      	ldr	r3, [r6, #0]
 8003bd0:	461c      	mov	r4, r3
 8003bd2:	bb34      	cbnz	r4, 8003c22 <_malloc_r+0x82>
 8003bd4:	4629      	mov	r1, r5
 8003bd6:	4638      	mov	r0, r7
 8003bd8:	f7ff ffc2 	bl	8003b60 <sbrk_aligned>
 8003bdc:	1c43      	adds	r3, r0, #1
 8003bde:	4604      	mov	r4, r0
 8003be0:	d14d      	bne.n	8003c7e <_malloc_r+0xde>
 8003be2:	6834      	ldr	r4, [r6, #0]
 8003be4:	4626      	mov	r6, r4
 8003be6:	2e00      	cmp	r6, #0
 8003be8:	d140      	bne.n	8003c6c <_malloc_r+0xcc>
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	4631      	mov	r1, r6
 8003bee:	4638      	mov	r0, r7
 8003bf0:	eb04 0803 	add.w	r8, r4, r3
 8003bf4:	f000 fb36 	bl	8004264 <_sbrk_r>
 8003bf8:	4580      	cmp	r8, r0
 8003bfa:	d13a      	bne.n	8003c72 <_malloc_r+0xd2>
 8003bfc:	6821      	ldr	r1, [r4, #0]
 8003bfe:	3503      	adds	r5, #3
 8003c00:	1a6d      	subs	r5, r5, r1
 8003c02:	f025 0503 	bic.w	r5, r5, #3
 8003c06:	3508      	adds	r5, #8
 8003c08:	2d0c      	cmp	r5, #12
 8003c0a:	bf38      	it	cc
 8003c0c:	250c      	movcc	r5, #12
 8003c0e:	4629      	mov	r1, r5
 8003c10:	4638      	mov	r0, r7
 8003c12:	f7ff ffa5 	bl	8003b60 <sbrk_aligned>
 8003c16:	3001      	adds	r0, #1
 8003c18:	d02b      	beq.n	8003c72 <_malloc_r+0xd2>
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	442b      	add	r3, r5
 8003c1e:	6023      	str	r3, [r4, #0]
 8003c20:	e00e      	b.n	8003c40 <_malloc_r+0xa0>
 8003c22:	6822      	ldr	r2, [r4, #0]
 8003c24:	1b52      	subs	r2, r2, r5
 8003c26:	d41e      	bmi.n	8003c66 <_malloc_r+0xc6>
 8003c28:	2a0b      	cmp	r2, #11
 8003c2a:	d916      	bls.n	8003c5a <_malloc_r+0xba>
 8003c2c:	1961      	adds	r1, r4, r5
 8003c2e:	42a3      	cmp	r3, r4
 8003c30:	6025      	str	r5, [r4, #0]
 8003c32:	bf18      	it	ne
 8003c34:	6059      	strne	r1, [r3, #4]
 8003c36:	6863      	ldr	r3, [r4, #4]
 8003c38:	bf08      	it	eq
 8003c3a:	6031      	streq	r1, [r6, #0]
 8003c3c:	5162      	str	r2, [r4, r5]
 8003c3e:	604b      	str	r3, [r1, #4]
 8003c40:	4638      	mov	r0, r7
 8003c42:	f104 060b 	add.w	r6, r4, #11
 8003c46:	f000 fd83 	bl	8004750 <__malloc_unlock>
 8003c4a:	f026 0607 	bic.w	r6, r6, #7
 8003c4e:	1d23      	adds	r3, r4, #4
 8003c50:	1af2      	subs	r2, r6, r3
 8003c52:	d0b6      	beq.n	8003bc2 <_malloc_r+0x22>
 8003c54:	1b9b      	subs	r3, r3, r6
 8003c56:	50a3      	str	r3, [r4, r2]
 8003c58:	e7b3      	b.n	8003bc2 <_malloc_r+0x22>
 8003c5a:	6862      	ldr	r2, [r4, #4]
 8003c5c:	42a3      	cmp	r3, r4
 8003c5e:	bf0c      	ite	eq
 8003c60:	6032      	streq	r2, [r6, #0]
 8003c62:	605a      	strne	r2, [r3, #4]
 8003c64:	e7ec      	b.n	8003c40 <_malloc_r+0xa0>
 8003c66:	4623      	mov	r3, r4
 8003c68:	6864      	ldr	r4, [r4, #4]
 8003c6a:	e7b2      	b.n	8003bd2 <_malloc_r+0x32>
 8003c6c:	4634      	mov	r4, r6
 8003c6e:	6876      	ldr	r6, [r6, #4]
 8003c70:	e7b9      	b.n	8003be6 <_malloc_r+0x46>
 8003c72:	230c      	movs	r3, #12
 8003c74:	603b      	str	r3, [r7, #0]
 8003c76:	4638      	mov	r0, r7
 8003c78:	f000 fd6a 	bl	8004750 <__malloc_unlock>
 8003c7c:	e7a1      	b.n	8003bc2 <_malloc_r+0x22>
 8003c7e:	6025      	str	r5, [r4, #0]
 8003c80:	e7de      	b.n	8003c40 <_malloc_r+0xa0>
 8003c82:	bf00      	nop
 8003c84:	20000124 	.word	0x20000124

08003c88 <__sfputc_r>:
 8003c88:	6893      	ldr	r3, [r2, #8]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	b410      	push	{r4}
 8003c90:	6093      	str	r3, [r2, #8]
 8003c92:	da08      	bge.n	8003ca6 <__sfputc_r+0x1e>
 8003c94:	6994      	ldr	r4, [r2, #24]
 8003c96:	42a3      	cmp	r3, r4
 8003c98:	db01      	blt.n	8003c9e <__sfputc_r+0x16>
 8003c9a:	290a      	cmp	r1, #10
 8003c9c:	d103      	bne.n	8003ca6 <__sfputc_r+0x1e>
 8003c9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ca2:	f000 bb33 	b.w	800430c <__swbuf_r>
 8003ca6:	6813      	ldr	r3, [r2, #0]
 8003ca8:	1c58      	adds	r0, r3, #1
 8003caa:	6010      	str	r0, [r2, #0]
 8003cac:	7019      	strb	r1, [r3, #0]
 8003cae:	4608      	mov	r0, r1
 8003cb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <__sfputs_r>:
 8003cb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb8:	4606      	mov	r6, r0
 8003cba:	460f      	mov	r7, r1
 8003cbc:	4614      	mov	r4, r2
 8003cbe:	18d5      	adds	r5, r2, r3
 8003cc0:	42ac      	cmp	r4, r5
 8003cc2:	d101      	bne.n	8003cc8 <__sfputs_r+0x12>
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	e007      	b.n	8003cd8 <__sfputs_r+0x22>
 8003cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ccc:	463a      	mov	r2, r7
 8003cce:	4630      	mov	r0, r6
 8003cd0:	f7ff ffda 	bl	8003c88 <__sfputc_r>
 8003cd4:	1c43      	adds	r3, r0, #1
 8003cd6:	d1f3      	bne.n	8003cc0 <__sfputs_r+0xa>
 8003cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003cdc <_vfiprintf_r>:
 8003cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce0:	460d      	mov	r5, r1
 8003ce2:	b09d      	sub	sp, #116	; 0x74
 8003ce4:	4614      	mov	r4, r2
 8003ce6:	4698      	mov	r8, r3
 8003ce8:	4606      	mov	r6, r0
 8003cea:	b118      	cbz	r0, 8003cf4 <_vfiprintf_r+0x18>
 8003cec:	6983      	ldr	r3, [r0, #24]
 8003cee:	b90b      	cbnz	r3, 8003cf4 <_vfiprintf_r+0x18>
 8003cf0:	f7ff fe96 	bl	8003a20 <__sinit>
 8003cf4:	4b89      	ldr	r3, [pc, #548]	; (8003f1c <_vfiprintf_r+0x240>)
 8003cf6:	429d      	cmp	r5, r3
 8003cf8:	d11b      	bne.n	8003d32 <_vfiprintf_r+0x56>
 8003cfa:	6875      	ldr	r5, [r6, #4]
 8003cfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cfe:	07d9      	lsls	r1, r3, #31
 8003d00:	d405      	bmi.n	8003d0e <_vfiprintf_r+0x32>
 8003d02:	89ab      	ldrh	r3, [r5, #12]
 8003d04:	059a      	lsls	r2, r3, #22
 8003d06:	d402      	bmi.n	8003d0e <_vfiprintf_r+0x32>
 8003d08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d0a:	f7ff ff27 	bl	8003b5c <__retarget_lock_acquire_recursive>
 8003d0e:	89ab      	ldrh	r3, [r5, #12]
 8003d10:	071b      	lsls	r3, r3, #28
 8003d12:	d501      	bpl.n	8003d18 <_vfiprintf_r+0x3c>
 8003d14:	692b      	ldr	r3, [r5, #16]
 8003d16:	b9eb      	cbnz	r3, 8003d54 <_vfiprintf_r+0x78>
 8003d18:	4629      	mov	r1, r5
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	f000 fb5a 	bl	80043d4 <__swsetup_r>
 8003d20:	b1c0      	cbz	r0, 8003d54 <_vfiprintf_r+0x78>
 8003d22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d24:	07dc      	lsls	r4, r3, #31
 8003d26:	d50e      	bpl.n	8003d46 <_vfiprintf_r+0x6a>
 8003d28:	f04f 30ff 	mov.w	r0, #4294967295
 8003d2c:	b01d      	add	sp, #116	; 0x74
 8003d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d32:	4b7b      	ldr	r3, [pc, #492]	; (8003f20 <_vfiprintf_r+0x244>)
 8003d34:	429d      	cmp	r5, r3
 8003d36:	d101      	bne.n	8003d3c <_vfiprintf_r+0x60>
 8003d38:	68b5      	ldr	r5, [r6, #8]
 8003d3a:	e7df      	b.n	8003cfc <_vfiprintf_r+0x20>
 8003d3c:	4b79      	ldr	r3, [pc, #484]	; (8003f24 <_vfiprintf_r+0x248>)
 8003d3e:	429d      	cmp	r5, r3
 8003d40:	bf08      	it	eq
 8003d42:	68f5      	ldreq	r5, [r6, #12]
 8003d44:	e7da      	b.n	8003cfc <_vfiprintf_r+0x20>
 8003d46:	89ab      	ldrh	r3, [r5, #12]
 8003d48:	0598      	lsls	r0, r3, #22
 8003d4a:	d4ed      	bmi.n	8003d28 <_vfiprintf_r+0x4c>
 8003d4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d4e:	f7ff ff06 	bl	8003b5e <__retarget_lock_release_recursive>
 8003d52:	e7e9      	b.n	8003d28 <_vfiprintf_r+0x4c>
 8003d54:	2300      	movs	r3, #0
 8003d56:	9309      	str	r3, [sp, #36]	; 0x24
 8003d58:	2320      	movs	r3, #32
 8003d5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d62:	2330      	movs	r3, #48	; 0x30
 8003d64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003f28 <_vfiprintf_r+0x24c>
 8003d68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d6c:	f04f 0901 	mov.w	r9, #1
 8003d70:	4623      	mov	r3, r4
 8003d72:	469a      	mov	sl, r3
 8003d74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d78:	b10a      	cbz	r2, 8003d7e <_vfiprintf_r+0xa2>
 8003d7a:	2a25      	cmp	r2, #37	; 0x25
 8003d7c:	d1f9      	bne.n	8003d72 <_vfiprintf_r+0x96>
 8003d7e:	ebba 0b04 	subs.w	fp, sl, r4
 8003d82:	d00b      	beq.n	8003d9c <_vfiprintf_r+0xc0>
 8003d84:	465b      	mov	r3, fp
 8003d86:	4622      	mov	r2, r4
 8003d88:	4629      	mov	r1, r5
 8003d8a:	4630      	mov	r0, r6
 8003d8c:	f7ff ff93 	bl	8003cb6 <__sfputs_r>
 8003d90:	3001      	adds	r0, #1
 8003d92:	f000 80aa 	beq.w	8003eea <_vfiprintf_r+0x20e>
 8003d96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d98:	445a      	add	r2, fp
 8003d9a:	9209      	str	r2, [sp, #36]	; 0x24
 8003d9c:	f89a 3000 	ldrb.w	r3, [sl]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 80a2 	beq.w	8003eea <_vfiprintf_r+0x20e>
 8003da6:	2300      	movs	r3, #0
 8003da8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003db0:	f10a 0a01 	add.w	sl, sl, #1
 8003db4:	9304      	str	r3, [sp, #16]
 8003db6:	9307      	str	r3, [sp, #28]
 8003db8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dbc:	931a      	str	r3, [sp, #104]	; 0x68
 8003dbe:	4654      	mov	r4, sl
 8003dc0:	2205      	movs	r2, #5
 8003dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dc6:	4858      	ldr	r0, [pc, #352]	; (8003f28 <_vfiprintf_r+0x24c>)
 8003dc8:	f7fc fa02 	bl	80001d0 <memchr>
 8003dcc:	9a04      	ldr	r2, [sp, #16]
 8003dce:	b9d8      	cbnz	r0, 8003e08 <_vfiprintf_r+0x12c>
 8003dd0:	06d1      	lsls	r1, r2, #27
 8003dd2:	bf44      	itt	mi
 8003dd4:	2320      	movmi	r3, #32
 8003dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dda:	0713      	lsls	r3, r2, #28
 8003ddc:	bf44      	itt	mi
 8003dde:	232b      	movmi	r3, #43	; 0x2b
 8003de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003de4:	f89a 3000 	ldrb.w	r3, [sl]
 8003de8:	2b2a      	cmp	r3, #42	; 0x2a
 8003dea:	d015      	beq.n	8003e18 <_vfiprintf_r+0x13c>
 8003dec:	9a07      	ldr	r2, [sp, #28]
 8003dee:	4654      	mov	r4, sl
 8003df0:	2000      	movs	r0, #0
 8003df2:	f04f 0c0a 	mov.w	ip, #10
 8003df6:	4621      	mov	r1, r4
 8003df8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dfc:	3b30      	subs	r3, #48	; 0x30
 8003dfe:	2b09      	cmp	r3, #9
 8003e00:	d94e      	bls.n	8003ea0 <_vfiprintf_r+0x1c4>
 8003e02:	b1b0      	cbz	r0, 8003e32 <_vfiprintf_r+0x156>
 8003e04:	9207      	str	r2, [sp, #28]
 8003e06:	e014      	b.n	8003e32 <_vfiprintf_r+0x156>
 8003e08:	eba0 0308 	sub.w	r3, r0, r8
 8003e0c:	fa09 f303 	lsl.w	r3, r9, r3
 8003e10:	4313      	orrs	r3, r2
 8003e12:	9304      	str	r3, [sp, #16]
 8003e14:	46a2      	mov	sl, r4
 8003e16:	e7d2      	b.n	8003dbe <_vfiprintf_r+0xe2>
 8003e18:	9b03      	ldr	r3, [sp, #12]
 8003e1a:	1d19      	adds	r1, r3, #4
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	9103      	str	r1, [sp, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	bfbb      	ittet	lt
 8003e24:	425b      	neglt	r3, r3
 8003e26:	f042 0202 	orrlt.w	r2, r2, #2
 8003e2a:	9307      	strge	r3, [sp, #28]
 8003e2c:	9307      	strlt	r3, [sp, #28]
 8003e2e:	bfb8      	it	lt
 8003e30:	9204      	strlt	r2, [sp, #16]
 8003e32:	7823      	ldrb	r3, [r4, #0]
 8003e34:	2b2e      	cmp	r3, #46	; 0x2e
 8003e36:	d10c      	bne.n	8003e52 <_vfiprintf_r+0x176>
 8003e38:	7863      	ldrb	r3, [r4, #1]
 8003e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8003e3c:	d135      	bne.n	8003eaa <_vfiprintf_r+0x1ce>
 8003e3e:	9b03      	ldr	r3, [sp, #12]
 8003e40:	1d1a      	adds	r2, r3, #4
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	9203      	str	r2, [sp, #12]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	bfb8      	it	lt
 8003e4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e4e:	3402      	adds	r4, #2
 8003e50:	9305      	str	r3, [sp, #20]
 8003e52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003f38 <_vfiprintf_r+0x25c>
 8003e56:	7821      	ldrb	r1, [r4, #0]
 8003e58:	2203      	movs	r2, #3
 8003e5a:	4650      	mov	r0, sl
 8003e5c:	f7fc f9b8 	bl	80001d0 <memchr>
 8003e60:	b140      	cbz	r0, 8003e74 <_vfiprintf_r+0x198>
 8003e62:	2340      	movs	r3, #64	; 0x40
 8003e64:	eba0 000a 	sub.w	r0, r0, sl
 8003e68:	fa03 f000 	lsl.w	r0, r3, r0
 8003e6c:	9b04      	ldr	r3, [sp, #16]
 8003e6e:	4303      	orrs	r3, r0
 8003e70:	3401      	adds	r4, #1
 8003e72:	9304      	str	r3, [sp, #16]
 8003e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e78:	482c      	ldr	r0, [pc, #176]	; (8003f2c <_vfiprintf_r+0x250>)
 8003e7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e7e:	2206      	movs	r2, #6
 8003e80:	f7fc f9a6 	bl	80001d0 <memchr>
 8003e84:	2800      	cmp	r0, #0
 8003e86:	d03f      	beq.n	8003f08 <_vfiprintf_r+0x22c>
 8003e88:	4b29      	ldr	r3, [pc, #164]	; (8003f30 <_vfiprintf_r+0x254>)
 8003e8a:	bb1b      	cbnz	r3, 8003ed4 <_vfiprintf_r+0x1f8>
 8003e8c:	9b03      	ldr	r3, [sp, #12]
 8003e8e:	3307      	adds	r3, #7
 8003e90:	f023 0307 	bic.w	r3, r3, #7
 8003e94:	3308      	adds	r3, #8
 8003e96:	9303      	str	r3, [sp, #12]
 8003e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e9a:	443b      	add	r3, r7
 8003e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e9e:	e767      	b.n	8003d70 <_vfiprintf_r+0x94>
 8003ea0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ea4:	460c      	mov	r4, r1
 8003ea6:	2001      	movs	r0, #1
 8003ea8:	e7a5      	b.n	8003df6 <_vfiprintf_r+0x11a>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	3401      	adds	r4, #1
 8003eae:	9305      	str	r3, [sp, #20]
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	f04f 0c0a 	mov.w	ip, #10
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ebc:	3a30      	subs	r2, #48	; 0x30
 8003ebe:	2a09      	cmp	r2, #9
 8003ec0:	d903      	bls.n	8003eca <_vfiprintf_r+0x1ee>
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0c5      	beq.n	8003e52 <_vfiprintf_r+0x176>
 8003ec6:	9105      	str	r1, [sp, #20]
 8003ec8:	e7c3      	b.n	8003e52 <_vfiprintf_r+0x176>
 8003eca:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ece:	4604      	mov	r4, r0
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e7f0      	b.n	8003eb6 <_vfiprintf_r+0x1da>
 8003ed4:	ab03      	add	r3, sp, #12
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	462a      	mov	r2, r5
 8003eda:	4b16      	ldr	r3, [pc, #88]	; (8003f34 <_vfiprintf_r+0x258>)
 8003edc:	a904      	add	r1, sp, #16
 8003ede:	4630      	mov	r0, r6
 8003ee0:	f3af 8000 	nop.w
 8003ee4:	4607      	mov	r7, r0
 8003ee6:	1c78      	adds	r0, r7, #1
 8003ee8:	d1d6      	bne.n	8003e98 <_vfiprintf_r+0x1bc>
 8003eea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003eec:	07d9      	lsls	r1, r3, #31
 8003eee:	d405      	bmi.n	8003efc <_vfiprintf_r+0x220>
 8003ef0:	89ab      	ldrh	r3, [r5, #12]
 8003ef2:	059a      	lsls	r2, r3, #22
 8003ef4:	d402      	bmi.n	8003efc <_vfiprintf_r+0x220>
 8003ef6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ef8:	f7ff fe31 	bl	8003b5e <__retarget_lock_release_recursive>
 8003efc:	89ab      	ldrh	r3, [r5, #12]
 8003efe:	065b      	lsls	r3, r3, #25
 8003f00:	f53f af12 	bmi.w	8003d28 <_vfiprintf_r+0x4c>
 8003f04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f06:	e711      	b.n	8003d2c <_vfiprintf_r+0x50>
 8003f08:	ab03      	add	r3, sp, #12
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	462a      	mov	r2, r5
 8003f0e:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <_vfiprintf_r+0x258>)
 8003f10:	a904      	add	r1, sp, #16
 8003f12:	4630      	mov	r0, r6
 8003f14:	f000 f880 	bl	8004018 <_printf_i>
 8003f18:	e7e4      	b.n	8003ee4 <_vfiprintf_r+0x208>
 8003f1a:	bf00      	nop
 8003f1c:	0800491c 	.word	0x0800491c
 8003f20:	0800493c 	.word	0x0800493c
 8003f24:	080048fc 	.word	0x080048fc
 8003f28:	0800495c 	.word	0x0800495c
 8003f2c:	08004966 	.word	0x08004966
 8003f30:	00000000 	.word	0x00000000
 8003f34:	08003cb7 	.word	0x08003cb7
 8003f38:	08004962 	.word	0x08004962

08003f3c <_printf_common>:
 8003f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f40:	4616      	mov	r6, r2
 8003f42:	4699      	mov	r9, r3
 8003f44:	688a      	ldr	r2, [r1, #8]
 8003f46:	690b      	ldr	r3, [r1, #16]
 8003f48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	bfb8      	it	lt
 8003f50:	4613      	movlt	r3, r2
 8003f52:	6033      	str	r3, [r6, #0]
 8003f54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f58:	4607      	mov	r7, r0
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	b10a      	cbz	r2, 8003f62 <_printf_common+0x26>
 8003f5e:	3301      	adds	r3, #1
 8003f60:	6033      	str	r3, [r6, #0]
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	0699      	lsls	r1, r3, #26
 8003f66:	bf42      	ittt	mi
 8003f68:	6833      	ldrmi	r3, [r6, #0]
 8003f6a:	3302      	addmi	r3, #2
 8003f6c:	6033      	strmi	r3, [r6, #0]
 8003f6e:	6825      	ldr	r5, [r4, #0]
 8003f70:	f015 0506 	ands.w	r5, r5, #6
 8003f74:	d106      	bne.n	8003f84 <_printf_common+0x48>
 8003f76:	f104 0a19 	add.w	sl, r4, #25
 8003f7a:	68e3      	ldr	r3, [r4, #12]
 8003f7c:	6832      	ldr	r2, [r6, #0]
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	42ab      	cmp	r3, r5
 8003f82:	dc26      	bgt.n	8003fd2 <_printf_common+0x96>
 8003f84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f88:	1e13      	subs	r3, r2, #0
 8003f8a:	6822      	ldr	r2, [r4, #0]
 8003f8c:	bf18      	it	ne
 8003f8e:	2301      	movne	r3, #1
 8003f90:	0692      	lsls	r2, r2, #26
 8003f92:	d42b      	bmi.n	8003fec <_printf_common+0xb0>
 8003f94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f98:	4649      	mov	r1, r9
 8003f9a:	4638      	mov	r0, r7
 8003f9c:	47c0      	blx	r8
 8003f9e:	3001      	adds	r0, #1
 8003fa0:	d01e      	beq.n	8003fe0 <_printf_common+0xa4>
 8003fa2:	6823      	ldr	r3, [r4, #0]
 8003fa4:	68e5      	ldr	r5, [r4, #12]
 8003fa6:	6832      	ldr	r2, [r6, #0]
 8003fa8:	f003 0306 	and.w	r3, r3, #6
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	bf08      	it	eq
 8003fb0:	1aad      	subeq	r5, r5, r2
 8003fb2:	68a3      	ldr	r3, [r4, #8]
 8003fb4:	6922      	ldr	r2, [r4, #16]
 8003fb6:	bf0c      	ite	eq
 8003fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fbc:	2500      	movne	r5, #0
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	bfc4      	itt	gt
 8003fc2:	1a9b      	subgt	r3, r3, r2
 8003fc4:	18ed      	addgt	r5, r5, r3
 8003fc6:	2600      	movs	r6, #0
 8003fc8:	341a      	adds	r4, #26
 8003fca:	42b5      	cmp	r5, r6
 8003fcc:	d11a      	bne.n	8004004 <_printf_common+0xc8>
 8003fce:	2000      	movs	r0, #0
 8003fd0:	e008      	b.n	8003fe4 <_printf_common+0xa8>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	4652      	mov	r2, sl
 8003fd6:	4649      	mov	r1, r9
 8003fd8:	4638      	mov	r0, r7
 8003fda:	47c0      	blx	r8
 8003fdc:	3001      	adds	r0, #1
 8003fde:	d103      	bne.n	8003fe8 <_printf_common+0xac>
 8003fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe8:	3501      	adds	r5, #1
 8003fea:	e7c6      	b.n	8003f7a <_printf_common+0x3e>
 8003fec:	18e1      	adds	r1, r4, r3
 8003fee:	1c5a      	adds	r2, r3, #1
 8003ff0:	2030      	movs	r0, #48	; 0x30
 8003ff2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ff6:	4422      	add	r2, r4
 8003ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ffc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004000:	3302      	adds	r3, #2
 8004002:	e7c7      	b.n	8003f94 <_printf_common+0x58>
 8004004:	2301      	movs	r3, #1
 8004006:	4622      	mov	r2, r4
 8004008:	4649      	mov	r1, r9
 800400a:	4638      	mov	r0, r7
 800400c:	47c0      	blx	r8
 800400e:	3001      	adds	r0, #1
 8004010:	d0e6      	beq.n	8003fe0 <_printf_common+0xa4>
 8004012:	3601      	adds	r6, #1
 8004014:	e7d9      	b.n	8003fca <_printf_common+0x8e>
	...

08004018 <_printf_i>:
 8004018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800401c:	7e0f      	ldrb	r7, [r1, #24]
 800401e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004020:	2f78      	cmp	r7, #120	; 0x78
 8004022:	4691      	mov	r9, r2
 8004024:	4680      	mov	r8, r0
 8004026:	460c      	mov	r4, r1
 8004028:	469a      	mov	sl, r3
 800402a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800402e:	d807      	bhi.n	8004040 <_printf_i+0x28>
 8004030:	2f62      	cmp	r7, #98	; 0x62
 8004032:	d80a      	bhi.n	800404a <_printf_i+0x32>
 8004034:	2f00      	cmp	r7, #0
 8004036:	f000 80d8 	beq.w	80041ea <_printf_i+0x1d2>
 800403a:	2f58      	cmp	r7, #88	; 0x58
 800403c:	f000 80a3 	beq.w	8004186 <_printf_i+0x16e>
 8004040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004044:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004048:	e03a      	b.n	80040c0 <_printf_i+0xa8>
 800404a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800404e:	2b15      	cmp	r3, #21
 8004050:	d8f6      	bhi.n	8004040 <_printf_i+0x28>
 8004052:	a101      	add	r1, pc, #4	; (adr r1, 8004058 <_printf_i+0x40>)
 8004054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004058:	080040b1 	.word	0x080040b1
 800405c:	080040c5 	.word	0x080040c5
 8004060:	08004041 	.word	0x08004041
 8004064:	08004041 	.word	0x08004041
 8004068:	08004041 	.word	0x08004041
 800406c:	08004041 	.word	0x08004041
 8004070:	080040c5 	.word	0x080040c5
 8004074:	08004041 	.word	0x08004041
 8004078:	08004041 	.word	0x08004041
 800407c:	08004041 	.word	0x08004041
 8004080:	08004041 	.word	0x08004041
 8004084:	080041d1 	.word	0x080041d1
 8004088:	080040f5 	.word	0x080040f5
 800408c:	080041b3 	.word	0x080041b3
 8004090:	08004041 	.word	0x08004041
 8004094:	08004041 	.word	0x08004041
 8004098:	080041f3 	.word	0x080041f3
 800409c:	08004041 	.word	0x08004041
 80040a0:	080040f5 	.word	0x080040f5
 80040a4:	08004041 	.word	0x08004041
 80040a8:	08004041 	.word	0x08004041
 80040ac:	080041bb 	.word	0x080041bb
 80040b0:	682b      	ldr	r3, [r5, #0]
 80040b2:	1d1a      	adds	r2, r3, #4
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	602a      	str	r2, [r5, #0]
 80040b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0a3      	b.n	800420c <_printf_i+0x1f4>
 80040c4:	6820      	ldr	r0, [r4, #0]
 80040c6:	6829      	ldr	r1, [r5, #0]
 80040c8:	0606      	lsls	r6, r0, #24
 80040ca:	f101 0304 	add.w	r3, r1, #4
 80040ce:	d50a      	bpl.n	80040e6 <_printf_i+0xce>
 80040d0:	680e      	ldr	r6, [r1, #0]
 80040d2:	602b      	str	r3, [r5, #0]
 80040d4:	2e00      	cmp	r6, #0
 80040d6:	da03      	bge.n	80040e0 <_printf_i+0xc8>
 80040d8:	232d      	movs	r3, #45	; 0x2d
 80040da:	4276      	negs	r6, r6
 80040dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040e0:	485e      	ldr	r0, [pc, #376]	; (800425c <_printf_i+0x244>)
 80040e2:	230a      	movs	r3, #10
 80040e4:	e019      	b.n	800411a <_printf_i+0x102>
 80040e6:	680e      	ldr	r6, [r1, #0]
 80040e8:	602b      	str	r3, [r5, #0]
 80040ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040ee:	bf18      	it	ne
 80040f0:	b236      	sxthne	r6, r6
 80040f2:	e7ef      	b.n	80040d4 <_printf_i+0xbc>
 80040f4:	682b      	ldr	r3, [r5, #0]
 80040f6:	6820      	ldr	r0, [r4, #0]
 80040f8:	1d19      	adds	r1, r3, #4
 80040fa:	6029      	str	r1, [r5, #0]
 80040fc:	0601      	lsls	r1, r0, #24
 80040fe:	d501      	bpl.n	8004104 <_printf_i+0xec>
 8004100:	681e      	ldr	r6, [r3, #0]
 8004102:	e002      	b.n	800410a <_printf_i+0xf2>
 8004104:	0646      	lsls	r6, r0, #25
 8004106:	d5fb      	bpl.n	8004100 <_printf_i+0xe8>
 8004108:	881e      	ldrh	r6, [r3, #0]
 800410a:	4854      	ldr	r0, [pc, #336]	; (800425c <_printf_i+0x244>)
 800410c:	2f6f      	cmp	r7, #111	; 0x6f
 800410e:	bf0c      	ite	eq
 8004110:	2308      	moveq	r3, #8
 8004112:	230a      	movne	r3, #10
 8004114:	2100      	movs	r1, #0
 8004116:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800411a:	6865      	ldr	r5, [r4, #4]
 800411c:	60a5      	str	r5, [r4, #8]
 800411e:	2d00      	cmp	r5, #0
 8004120:	bfa2      	ittt	ge
 8004122:	6821      	ldrge	r1, [r4, #0]
 8004124:	f021 0104 	bicge.w	r1, r1, #4
 8004128:	6021      	strge	r1, [r4, #0]
 800412a:	b90e      	cbnz	r6, 8004130 <_printf_i+0x118>
 800412c:	2d00      	cmp	r5, #0
 800412e:	d04d      	beq.n	80041cc <_printf_i+0x1b4>
 8004130:	4615      	mov	r5, r2
 8004132:	fbb6 f1f3 	udiv	r1, r6, r3
 8004136:	fb03 6711 	mls	r7, r3, r1, r6
 800413a:	5dc7      	ldrb	r7, [r0, r7]
 800413c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004140:	4637      	mov	r7, r6
 8004142:	42bb      	cmp	r3, r7
 8004144:	460e      	mov	r6, r1
 8004146:	d9f4      	bls.n	8004132 <_printf_i+0x11a>
 8004148:	2b08      	cmp	r3, #8
 800414a:	d10b      	bne.n	8004164 <_printf_i+0x14c>
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	07de      	lsls	r6, r3, #31
 8004150:	d508      	bpl.n	8004164 <_printf_i+0x14c>
 8004152:	6923      	ldr	r3, [r4, #16]
 8004154:	6861      	ldr	r1, [r4, #4]
 8004156:	4299      	cmp	r1, r3
 8004158:	bfde      	ittt	le
 800415a:	2330      	movle	r3, #48	; 0x30
 800415c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004160:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004164:	1b52      	subs	r2, r2, r5
 8004166:	6122      	str	r2, [r4, #16]
 8004168:	f8cd a000 	str.w	sl, [sp]
 800416c:	464b      	mov	r3, r9
 800416e:	aa03      	add	r2, sp, #12
 8004170:	4621      	mov	r1, r4
 8004172:	4640      	mov	r0, r8
 8004174:	f7ff fee2 	bl	8003f3c <_printf_common>
 8004178:	3001      	adds	r0, #1
 800417a:	d14c      	bne.n	8004216 <_printf_i+0x1fe>
 800417c:	f04f 30ff 	mov.w	r0, #4294967295
 8004180:	b004      	add	sp, #16
 8004182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004186:	4835      	ldr	r0, [pc, #212]	; (800425c <_printf_i+0x244>)
 8004188:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800418c:	6829      	ldr	r1, [r5, #0]
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	f851 6b04 	ldr.w	r6, [r1], #4
 8004194:	6029      	str	r1, [r5, #0]
 8004196:	061d      	lsls	r5, r3, #24
 8004198:	d514      	bpl.n	80041c4 <_printf_i+0x1ac>
 800419a:	07df      	lsls	r7, r3, #31
 800419c:	bf44      	itt	mi
 800419e:	f043 0320 	orrmi.w	r3, r3, #32
 80041a2:	6023      	strmi	r3, [r4, #0]
 80041a4:	b91e      	cbnz	r6, 80041ae <_printf_i+0x196>
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	f023 0320 	bic.w	r3, r3, #32
 80041ac:	6023      	str	r3, [r4, #0]
 80041ae:	2310      	movs	r3, #16
 80041b0:	e7b0      	b.n	8004114 <_printf_i+0xfc>
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	f043 0320 	orr.w	r3, r3, #32
 80041b8:	6023      	str	r3, [r4, #0]
 80041ba:	2378      	movs	r3, #120	; 0x78
 80041bc:	4828      	ldr	r0, [pc, #160]	; (8004260 <_printf_i+0x248>)
 80041be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041c2:	e7e3      	b.n	800418c <_printf_i+0x174>
 80041c4:	0659      	lsls	r1, r3, #25
 80041c6:	bf48      	it	mi
 80041c8:	b2b6      	uxthmi	r6, r6
 80041ca:	e7e6      	b.n	800419a <_printf_i+0x182>
 80041cc:	4615      	mov	r5, r2
 80041ce:	e7bb      	b.n	8004148 <_printf_i+0x130>
 80041d0:	682b      	ldr	r3, [r5, #0]
 80041d2:	6826      	ldr	r6, [r4, #0]
 80041d4:	6961      	ldr	r1, [r4, #20]
 80041d6:	1d18      	adds	r0, r3, #4
 80041d8:	6028      	str	r0, [r5, #0]
 80041da:	0635      	lsls	r5, r6, #24
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	d501      	bpl.n	80041e4 <_printf_i+0x1cc>
 80041e0:	6019      	str	r1, [r3, #0]
 80041e2:	e002      	b.n	80041ea <_printf_i+0x1d2>
 80041e4:	0670      	lsls	r0, r6, #25
 80041e6:	d5fb      	bpl.n	80041e0 <_printf_i+0x1c8>
 80041e8:	8019      	strh	r1, [r3, #0]
 80041ea:	2300      	movs	r3, #0
 80041ec:	6123      	str	r3, [r4, #16]
 80041ee:	4615      	mov	r5, r2
 80041f0:	e7ba      	b.n	8004168 <_printf_i+0x150>
 80041f2:	682b      	ldr	r3, [r5, #0]
 80041f4:	1d1a      	adds	r2, r3, #4
 80041f6:	602a      	str	r2, [r5, #0]
 80041f8:	681d      	ldr	r5, [r3, #0]
 80041fa:	6862      	ldr	r2, [r4, #4]
 80041fc:	2100      	movs	r1, #0
 80041fe:	4628      	mov	r0, r5
 8004200:	f7fb ffe6 	bl	80001d0 <memchr>
 8004204:	b108      	cbz	r0, 800420a <_printf_i+0x1f2>
 8004206:	1b40      	subs	r0, r0, r5
 8004208:	6060      	str	r0, [r4, #4]
 800420a:	6863      	ldr	r3, [r4, #4]
 800420c:	6123      	str	r3, [r4, #16]
 800420e:	2300      	movs	r3, #0
 8004210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004214:	e7a8      	b.n	8004168 <_printf_i+0x150>
 8004216:	6923      	ldr	r3, [r4, #16]
 8004218:	462a      	mov	r2, r5
 800421a:	4649      	mov	r1, r9
 800421c:	4640      	mov	r0, r8
 800421e:	47d0      	blx	sl
 8004220:	3001      	adds	r0, #1
 8004222:	d0ab      	beq.n	800417c <_printf_i+0x164>
 8004224:	6823      	ldr	r3, [r4, #0]
 8004226:	079b      	lsls	r3, r3, #30
 8004228:	d413      	bmi.n	8004252 <_printf_i+0x23a>
 800422a:	68e0      	ldr	r0, [r4, #12]
 800422c:	9b03      	ldr	r3, [sp, #12]
 800422e:	4298      	cmp	r0, r3
 8004230:	bfb8      	it	lt
 8004232:	4618      	movlt	r0, r3
 8004234:	e7a4      	b.n	8004180 <_printf_i+0x168>
 8004236:	2301      	movs	r3, #1
 8004238:	4632      	mov	r2, r6
 800423a:	4649      	mov	r1, r9
 800423c:	4640      	mov	r0, r8
 800423e:	47d0      	blx	sl
 8004240:	3001      	adds	r0, #1
 8004242:	d09b      	beq.n	800417c <_printf_i+0x164>
 8004244:	3501      	adds	r5, #1
 8004246:	68e3      	ldr	r3, [r4, #12]
 8004248:	9903      	ldr	r1, [sp, #12]
 800424a:	1a5b      	subs	r3, r3, r1
 800424c:	42ab      	cmp	r3, r5
 800424e:	dcf2      	bgt.n	8004236 <_printf_i+0x21e>
 8004250:	e7eb      	b.n	800422a <_printf_i+0x212>
 8004252:	2500      	movs	r5, #0
 8004254:	f104 0619 	add.w	r6, r4, #25
 8004258:	e7f5      	b.n	8004246 <_printf_i+0x22e>
 800425a:	bf00      	nop
 800425c:	0800496d 	.word	0x0800496d
 8004260:	0800497e 	.word	0x0800497e

08004264 <_sbrk_r>:
 8004264:	b538      	push	{r3, r4, r5, lr}
 8004266:	4d06      	ldr	r5, [pc, #24]	; (8004280 <_sbrk_r+0x1c>)
 8004268:	2300      	movs	r3, #0
 800426a:	4604      	mov	r4, r0
 800426c:	4608      	mov	r0, r1
 800426e:	602b      	str	r3, [r5, #0]
 8004270:	f7fc fea2 	bl	8000fb8 <_sbrk>
 8004274:	1c43      	adds	r3, r0, #1
 8004276:	d102      	bne.n	800427e <_sbrk_r+0x1a>
 8004278:	682b      	ldr	r3, [r5, #0]
 800427a:	b103      	cbz	r3, 800427e <_sbrk_r+0x1a>
 800427c:	6023      	str	r3, [r4, #0]
 800427e:	bd38      	pop	{r3, r4, r5, pc}
 8004280:	2000012c 	.word	0x2000012c

08004284 <__sread>:
 8004284:	b510      	push	{r4, lr}
 8004286:	460c      	mov	r4, r1
 8004288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800428c:	f000 fab2 	bl	80047f4 <_read_r>
 8004290:	2800      	cmp	r0, #0
 8004292:	bfab      	itete	ge
 8004294:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004296:	89a3      	ldrhlt	r3, [r4, #12]
 8004298:	181b      	addge	r3, r3, r0
 800429a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800429e:	bfac      	ite	ge
 80042a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80042a2:	81a3      	strhlt	r3, [r4, #12]
 80042a4:	bd10      	pop	{r4, pc}

080042a6 <__swrite>:
 80042a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042aa:	461f      	mov	r7, r3
 80042ac:	898b      	ldrh	r3, [r1, #12]
 80042ae:	05db      	lsls	r3, r3, #23
 80042b0:	4605      	mov	r5, r0
 80042b2:	460c      	mov	r4, r1
 80042b4:	4616      	mov	r6, r2
 80042b6:	d505      	bpl.n	80042c4 <__swrite+0x1e>
 80042b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042bc:	2302      	movs	r3, #2
 80042be:	2200      	movs	r2, #0
 80042c0:	f000 f9c8 	bl	8004654 <_lseek_r>
 80042c4:	89a3      	ldrh	r3, [r4, #12]
 80042c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042ce:	81a3      	strh	r3, [r4, #12]
 80042d0:	4632      	mov	r2, r6
 80042d2:	463b      	mov	r3, r7
 80042d4:	4628      	mov	r0, r5
 80042d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042da:	f000 b869 	b.w	80043b0 <_write_r>

080042de <__sseek>:
 80042de:	b510      	push	{r4, lr}
 80042e0:	460c      	mov	r4, r1
 80042e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042e6:	f000 f9b5 	bl	8004654 <_lseek_r>
 80042ea:	1c43      	adds	r3, r0, #1
 80042ec:	89a3      	ldrh	r3, [r4, #12]
 80042ee:	bf15      	itete	ne
 80042f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80042f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80042f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80042fa:	81a3      	strheq	r3, [r4, #12]
 80042fc:	bf18      	it	ne
 80042fe:	81a3      	strhne	r3, [r4, #12]
 8004300:	bd10      	pop	{r4, pc}

08004302 <__sclose>:
 8004302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004306:	f000 b8d3 	b.w	80044b0 <_close_r>
	...

0800430c <__swbuf_r>:
 800430c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430e:	460e      	mov	r6, r1
 8004310:	4614      	mov	r4, r2
 8004312:	4605      	mov	r5, r0
 8004314:	b118      	cbz	r0, 800431e <__swbuf_r+0x12>
 8004316:	6983      	ldr	r3, [r0, #24]
 8004318:	b90b      	cbnz	r3, 800431e <__swbuf_r+0x12>
 800431a:	f7ff fb81 	bl	8003a20 <__sinit>
 800431e:	4b21      	ldr	r3, [pc, #132]	; (80043a4 <__swbuf_r+0x98>)
 8004320:	429c      	cmp	r4, r3
 8004322:	d12b      	bne.n	800437c <__swbuf_r+0x70>
 8004324:	686c      	ldr	r4, [r5, #4]
 8004326:	69a3      	ldr	r3, [r4, #24]
 8004328:	60a3      	str	r3, [r4, #8]
 800432a:	89a3      	ldrh	r3, [r4, #12]
 800432c:	071a      	lsls	r2, r3, #28
 800432e:	d52f      	bpl.n	8004390 <__swbuf_r+0x84>
 8004330:	6923      	ldr	r3, [r4, #16]
 8004332:	b36b      	cbz	r3, 8004390 <__swbuf_r+0x84>
 8004334:	6923      	ldr	r3, [r4, #16]
 8004336:	6820      	ldr	r0, [r4, #0]
 8004338:	1ac0      	subs	r0, r0, r3
 800433a:	6963      	ldr	r3, [r4, #20]
 800433c:	b2f6      	uxtb	r6, r6
 800433e:	4283      	cmp	r3, r0
 8004340:	4637      	mov	r7, r6
 8004342:	dc04      	bgt.n	800434e <__swbuf_r+0x42>
 8004344:	4621      	mov	r1, r4
 8004346:	4628      	mov	r0, r5
 8004348:	f000 f948 	bl	80045dc <_fflush_r>
 800434c:	bb30      	cbnz	r0, 800439c <__swbuf_r+0x90>
 800434e:	68a3      	ldr	r3, [r4, #8]
 8004350:	3b01      	subs	r3, #1
 8004352:	60a3      	str	r3, [r4, #8]
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	6022      	str	r2, [r4, #0]
 800435a:	701e      	strb	r6, [r3, #0]
 800435c:	6963      	ldr	r3, [r4, #20]
 800435e:	3001      	adds	r0, #1
 8004360:	4283      	cmp	r3, r0
 8004362:	d004      	beq.n	800436e <__swbuf_r+0x62>
 8004364:	89a3      	ldrh	r3, [r4, #12]
 8004366:	07db      	lsls	r3, r3, #31
 8004368:	d506      	bpl.n	8004378 <__swbuf_r+0x6c>
 800436a:	2e0a      	cmp	r6, #10
 800436c:	d104      	bne.n	8004378 <__swbuf_r+0x6c>
 800436e:	4621      	mov	r1, r4
 8004370:	4628      	mov	r0, r5
 8004372:	f000 f933 	bl	80045dc <_fflush_r>
 8004376:	b988      	cbnz	r0, 800439c <__swbuf_r+0x90>
 8004378:	4638      	mov	r0, r7
 800437a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800437c:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <__swbuf_r+0x9c>)
 800437e:	429c      	cmp	r4, r3
 8004380:	d101      	bne.n	8004386 <__swbuf_r+0x7a>
 8004382:	68ac      	ldr	r4, [r5, #8]
 8004384:	e7cf      	b.n	8004326 <__swbuf_r+0x1a>
 8004386:	4b09      	ldr	r3, [pc, #36]	; (80043ac <__swbuf_r+0xa0>)
 8004388:	429c      	cmp	r4, r3
 800438a:	bf08      	it	eq
 800438c:	68ec      	ldreq	r4, [r5, #12]
 800438e:	e7ca      	b.n	8004326 <__swbuf_r+0x1a>
 8004390:	4621      	mov	r1, r4
 8004392:	4628      	mov	r0, r5
 8004394:	f000 f81e 	bl	80043d4 <__swsetup_r>
 8004398:	2800      	cmp	r0, #0
 800439a:	d0cb      	beq.n	8004334 <__swbuf_r+0x28>
 800439c:	f04f 37ff 	mov.w	r7, #4294967295
 80043a0:	e7ea      	b.n	8004378 <__swbuf_r+0x6c>
 80043a2:	bf00      	nop
 80043a4:	0800491c 	.word	0x0800491c
 80043a8:	0800493c 	.word	0x0800493c
 80043ac:	080048fc 	.word	0x080048fc

080043b0 <_write_r>:
 80043b0:	b538      	push	{r3, r4, r5, lr}
 80043b2:	4d07      	ldr	r5, [pc, #28]	; (80043d0 <_write_r+0x20>)
 80043b4:	4604      	mov	r4, r0
 80043b6:	4608      	mov	r0, r1
 80043b8:	4611      	mov	r1, r2
 80043ba:	2200      	movs	r2, #0
 80043bc:	602a      	str	r2, [r5, #0]
 80043be:	461a      	mov	r2, r3
 80043c0:	f7fc fdaa 	bl	8000f18 <_write>
 80043c4:	1c43      	adds	r3, r0, #1
 80043c6:	d102      	bne.n	80043ce <_write_r+0x1e>
 80043c8:	682b      	ldr	r3, [r5, #0]
 80043ca:	b103      	cbz	r3, 80043ce <_write_r+0x1e>
 80043cc:	6023      	str	r3, [r4, #0]
 80043ce:	bd38      	pop	{r3, r4, r5, pc}
 80043d0:	2000012c 	.word	0x2000012c

080043d4 <__swsetup_r>:
 80043d4:	4b32      	ldr	r3, [pc, #200]	; (80044a0 <__swsetup_r+0xcc>)
 80043d6:	b570      	push	{r4, r5, r6, lr}
 80043d8:	681d      	ldr	r5, [r3, #0]
 80043da:	4606      	mov	r6, r0
 80043dc:	460c      	mov	r4, r1
 80043de:	b125      	cbz	r5, 80043ea <__swsetup_r+0x16>
 80043e0:	69ab      	ldr	r3, [r5, #24]
 80043e2:	b913      	cbnz	r3, 80043ea <__swsetup_r+0x16>
 80043e4:	4628      	mov	r0, r5
 80043e6:	f7ff fb1b 	bl	8003a20 <__sinit>
 80043ea:	4b2e      	ldr	r3, [pc, #184]	; (80044a4 <__swsetup_r+0xd0>)
 80043ec:	429c      	cmp	r4, r3
 80043ee:	d10f      	bne.n	8004410 <__swsetup_r+0x3c>
 80043f0:	686c      	ldr	r4, [r5, #4]
 80043f2:	89a3      	ldrh	r3, [r4, #12]
 80043f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043f8:	0719      	lsls	r1, r3, #28
 80043fa:	d42c      	bmi.n	8004456 <__swsetup_r+0x82>
 80043fc:	06dd      	lsls	r5, r3, #27
 80043fe:	d411      	bmi.n	8004424 <__swsetup_r+0x50>
 8004400:	2309      	movs	r3, #9
 8004402:	6033      	str	r3, [r6, #0]
 8004404:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004408:	81a3      	strh	r3, [r4, #12]
 800440a:	f04f 30ff 	mov.w	r0, #4294967295
 800440e:	e03e      	b.n	800448e <__swsetup_r+0xba>
 8004410:	4b25      	ldr	r3, [pc, #148]	; (80044a8 <__swsetup_r+0xd4>)
 8004412:	429c      	cmp	r4, r3
 8004414:	d101      	bne.n	800441a <__swsetup_r+0x46>
 8004416:	68ac      	ldr	r4, [r5, #8]
 8004418:	e7eb      	b.n	80043f2 <__swsetup_r+0x1e>
 800441a:	4b24      	ldr	r3, [pc, #144]	; (80044ac <__swsetup_r+0xd8>)
 800441c:	429c      	cmp	r4, r3
 800441e:	bf08      	it	eq
 8004420:	68ec      	ldreq	r4, [r5, #12]
 8004422:	e7e6      	b.n	80043f2 <__swsetup_r+0x1e>
 8004424:	0758      	lsls	r0, r3, #29
 8004426:	d512      	bpl.n	800444e <__swsetup_r+0x7a>
 8004428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800442a:	b141      	cbz	r1, 800443e <__swsetup_r+0x6a>
 800442c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004430:	4299      	cmp	r1, r3
 8004432:	d002      	beq.n	800443a <__swsetup_r+0x66>
 8004434:	4630      	mov	r0, r6
 8004436:	f000 f991 	bl	800475c <_free_r>
 800443a:	2300      	movs	r3, #0
 800443c:	6363      	str	r3, [r4, #52]	; 0x34
 800443e:	89a3      	ldrh	r3, [r4, #12]
 8004440:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004444:	81a3      	strh	r3, [r4, #12]
 8004446:	2300      	movs	r3, #0
 8004448:	6063      	str	r3, [r4, #4]
 800444a:	6923      	ldr	r3, [r4, #16]
 800444c:	6023      	str	r3, [r4, #0]
 800444e:	89a3      	ldrh	r3, [r4, #12]
 8004450:	f043 0308 	orr.w	r3, r3, #8
 8004454:	81a3      	strh	r3, [r4, #12]
 8004456:	6923      	ldr	r3, [r4, #16]
 8004458:	b94b      	cbnz	r3, 800446e <__swsetup_r+0x9a>
 800445a:	89a3      	ldrh	r3, [r4, #12]
 800445c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004464:	d003      	beq.n	800446e <__swsetup_r+0x9a>
 8004466:	4621      	mov	r1, r4
 8004468:	4630      	mov	r0, r6
 800446a:	f000 f92b 	bl	80046c4 <__smakebuf_r>
 800446e:	89a0      	ldrh	r0, [r4, #12]
 8004470:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004474:	f010 0301 	ands.w	r3, r0, #1
 8004478:	d00a      	beq.n	8004490 <__swsetup_r+0xbc>
 800447a:	2300      	movs	r3, #0
 800447c:	60a3      	str	r3, [r4, #8]
 800447e:	6963      	ldr	r3, [r4, #20]
 8004480:	425b      	negs	r3, r3
 8004482:	61a3      	str	r3, [r4, #24]
 8004484:	6923      	ldr	r3, [r4, #16]
 8004486:	b943      	cbnz	r3, 800449a <__swsetup_r+0xc6>
 8004488:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800448c:	d1ba      	bne.n	8004404 <__swsetup_r+0x30>
 800448e:	bd70      	pop	{r4, r5, r6, pc}
 8004490:	0781      	lsls	r1, r0, #30
 8004492:	bf58      	it	pl
 8004494:	6963      	ldrpl	r3, [r4, #20]
 8004496:	60a3      	str	r3, [r4, #8]
 8004498:	e7f4      	b.n	8004484 <__swsetup_r+0xb0>
 800449a:	2000      	movs	r0, #0
 800449c:	e7f7      	b.n	800448e <__swsetup_r+0xba>
 800449e:	bf00      	nop
 80044a0:	20000010 	.word	0x20000010
 80044a4:	0800491c 	.word	0x0800491c
 80044a8:	0800493c 	.word	0x0800493c
 80044ac:	080048fc 	.word	0x080048fc

080044b0 <_close_r>:
 80044b0:	b538      	push	{r3, r4, r5, lr}
 80044b2:	4d06      	ldr	r5, [pc, #24]	; (80044cc <_close_r+0x1c>)
 80044b4:	2300      	movs	r3, #0
 80044b6:	4604      	mov	r4, r0
 80044b8:	4608      	mov	r0, r1
 80044ba:	602b      	str	r3, [r5, #0]
 80044bc:	f7fc fd48 	bl	8000f50 <_close>
 80044c0:	1c43      	adds	r3, r0, #1
 80044c2:	d102      	bne.n	80044ca <_close_r+0x1a>
 80044c4:	682b      	ldr	r3, [r5, #0]
 80044c6:	b103      	cbz	r3, 80044ca <_close_r+0x1a>
 80044c8:	6023      	str	r3, [r4, #0]
 80044ca:	bd38      	pop	{r3, r4, r5, pc}
 80044cc:	2000012c 	.word	0x2000012c

080044d0 <__sflush_r>:
 80044d0:	898a      	ldrh	r2, [r1, #12]
 80044d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044d6:	4605      	mov	r5, r0
 80044d8:	0710      	lsls	r0, r2, #28
 80044da:	460c      	mov	r4, r1
 80044dc:	d458      	bmi.n	8004590 <__sflush_r+0xc0>
 80044de:	684b      	ldr	r3, [r1, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	dc05      	bgt.n	80044f0 <__sflush_r+0x20>
 80044e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	dc02      	bgt.n	80044f0 <__sflush_r+0x20>
 80044ea:	2000      	movs	r0, #0
 80044ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044f2:	2e00      	cmp	r6, #0
 80044f4:	d0f9      	beq.n	80044ea <__sflush_r+0x1a>
 80044f6:	2300      	movs	r3, #0
 80044f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044fc:	682f      	ldr	r7, [r5, #0]
 80044fe:	602b      	str	r3, [r5, #0]
 8004500:	d032      	beq.n	8004568 <__sflush_r+0x98>
 8004502:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004504:	89a3      	ldrh	r3, [r4, #12]
 8004506:	075a      	lsls	r2, r3, #29
 8004508:	d505      	bpl.n	8004516 <__sflush_r+0x46>
 800450a:	6863      	ldr	r3, [r4, #4]
 800450c:	1ac0      	subs	r0, r0, r3
 800450e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004510:	b10b      	cbz	r3, 8004516 <__sflush_r+0x46>
 8004512:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004514:	1ac0      	subs	r0, r0, r3
 8004516:	2300      	movs	r3, #0
 8004518:	4602      	mov	r2, r0
 800451a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800451c:	6a21      	ldr	r1, [r4, #32]
 800451e:	4628      	mov	r0, r5
 8004520:	47b0      	blx	r6
 8004522:	1c43      	adds	r3, r0, #1
 8004524:	89a3      	ldrh	r3, [r4, #12]
 8004526:	d106      	bne.n	8004536 <__sflush_r+0x66>
 8004528:	6829      	ldr	r1, [r5, #0]
 800452a:	291d      	cmp	r1, #29
 800452c:	d82c      	bhi.n	8004588 <__sflush_r+0xb8>
 800452e:	4a2a      	ldr	r2, [pc, #168]	; (80045d8 <__sflush_r+0x108>)
 8004530:	40ca      	lsrs	r2, r1
 8004532:	07d6      	lsls	r6, r2, #31
 8004534:	d528      	bpl.n	8004588 <__sflush_r+0xb8>
 8004536:	2200      	movs	r2, #0
 8004538:	6062      	str	r2, [r4, #4]
 800453a:	04d9      	lsls	r1, r3, #19
 800453c:	6922      	ldr	r2, [r4, #16]
 800453e:	6022      	str	r2, [r4, #0]
 8004540:	d504      	bpl.n	800454c <__sflush_r+0x7c>
 8004542:	1c42      	adds	r2, r0, #1
 8004544:	d101      	bne.n	800454a <__sflush_r+0x7a>
 8004546:	682b      	ldr	r3, [r5, #0]
 8004548:	b903      	cbnz	r3, 800454c <__sflush_r+0x7c>
 800454a:	6560      	str	r0, [r4, #84]	; 0x54
 800454c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800454e:	602f      	str	r7, [r5, #0]
 8004550:	2900      	cmp	r1, #0
 8004552:	d0ca      	beq.n	80044ea <__sflush_r+0x1a>
 8004554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004558:	4299      	cmp	r1, r3
 800455a:	d002      	beq.n	8004562 <__sflush_r+0x92>
 800455c:	4628      	mov	r0, r5
 800455e:	f000 f8fd 	bl	800475c <_free_r>
 8004562:	2000      	movs	r0, #0
 8004564:	6360      	str	r0, [r4, #52]	; 0x34
 8004566:	e7c1      	b.n	80044ec <__sflush_r+0x1c>
 8004568:	6a21      	ldr	r1, [r4, #32]
 800456a:	2301      	movs	r3, #1
 800456c:	4628      	mov	r0, r5
 800456e:	47b0      	blx	r6
 8004570:	1c41      	adds	r1, r0, #1
 8004572:	d1c7      	bne.n	8004504 <__sflush_r+0x34>
 8004574:	682b      	ldr	r3, [r5, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0c4      	beq.n	8004504 <__sflush_r+0x34>
 800457a:	2b1d      	cmp	r3, #29
 800457c:	d001      	beq.n	8004582 <__sflush_r+0xb2>
 800457e:	2b16      	cmp	r3, #22
 8004580:	d101      	bne.n	8004586 <__sflush_r+0xb6>
 8004582:	602f      	str	r7, [r5, #0]
 8004584:	e7b1      	b.n	80044ea <__sflush_r+0x1a>
 8004586:	89a3      	ldrh	r3, [r4, #12]
 8004588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800458c:	81a3      	strh	r3, [r4, #12]
 800458e:	e7ad      	b.n	80044ec <__sflush_r+0x1c>
 8004590:	690f      	ldr	r7, [r1, #16]
 8004592:	2f00      	cmp	r7, #0
 8004594:	d0a9      	beq.n	80044ea <__sflush_r+0x1a>
 8004596:	0793      	lsls	r3, r2, #30
 8004598:	680e      	ldr	r6, [r1, #0]
 800459a:	bf08      	it	eq
 800459c:	694b      	ldreq	r3, [r1, #20]
 800459e:	600f      	str	r7, [r1, #0]
 80045a0:	bf18      	it	ne
 80045a2:	2300      	movne	r3, #0
 80045a4:	eba6 0807 	sub.w	r8, r6, r7
 80045a8:	608b      	str	r3, [r1, #8]
 80045aa:	f1b8 0f00 	cmp.w	r8, #0
 80045ae:	dd9c      	ble.n	80044ea <__sflush_r+0x1a>
 80045b0:	6a21      	ldr	r1, [r4, #32]
 80045b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80045b4:	4643      	mov	r3, r8
 80045b6:	463a      	mov	r2, r7
 80045b8:	4628      	mov	r0, r5
 80045ba:	47b0      	blx	r6
 80045bc:	2800      	cmp	r0, #0
 80045be:	dc06      	bgt.n	80045ce <__sflush_r+0xfe>
 80045c0:	89a3      	ldrh	r3, [r4, #12]
 80045c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045c6:	81a3      	strh	r3, [r4, #12]
 80045c8:	f04f 30ff 	mov.w	r0, #4294967295
 80045cc:	e78e      	b.n	80044ec <__sflush_r+0x1c>
 80045ce:	4407      	add	r7, r0
 80045d0:	eba8 0800 	sub.w	r8, r8, r0
 80045d4:	e7e9      	b.n	80045aa <__sflush_r+0xda>
 80045d6:	bf00      	nop
 80045d8:	20400001 	.word	0x20400001

080045dc <_fflush_r>:
 80045dc:	b538      	push	{r3, r4, r5, lr}
 80045de:	690b      	ldr	r3, [r1, #16]
 80045e0:	4605      	mov	r5, r0
 80045e2:	460c      	mov	r4, r1
 80045e4:	b913      	cbnz	r3, 80045ec <_fflush_r+0x10>
 80045e6:	2500      	movs	r5, #0
 80045e8:	4628      	mov	r0, r5
 80045ea:	bd38      	pop	{r3, r4, r5, pc}
 80045ec:	b118      	cbz	r0, 80045f6 <_fflush_r+0x1a>
 80045ee:	6983      	ldr	r3, [r0, #24]
 80045f0:	b90b      	cbnz	r3, 80045f6 <_fflush_r+0x1a>
 80045f2:	f7ff fa15 	bl	8003a20 <__sinit>
 80045f6:	4b14      	ldr	r3, [pc, #80]	; (8004648 <_fflush_r+0x6c>)
 80045f8:	429c      	cmp	r4, r3
 80045fa:	d11b      	bne.n	8004634 <_fflush_r+0x58>
 80045fc:	686c      	ldr	r4, [r5, #4]
 80045fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0ef      	beq.n	80045e6 <_fflush_r+0xa>
 8004606:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004608:	07d0      	lsls	r0, r2, #31
 800460a:	d404      	bmi.n	8004616 <_fflush_r+0x3a>
 800460c:	0599      	lsls	r1, r3, #22
 800460e:	d402      	bmi.n	8004616 <_fflush_r+0x3a>
 8004610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004612:	f7ff faa3 	bl	8003b5c <__retarget_lock_acquire_recursive>
 8004616:	4628      	mov	r0, r5
 8004618:	4621      	mov	r1, r4
 800461a:	f7ff ff59 	bl	80044d0 <__sflush_r>
 800461e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004620:	07da      	lsls	r2, r3, #31
 8004622:	4605      	mov	r5, r0
 8004624:	d4e0      	bmi.n	80045e8 <_fflush_r+0xc>
 8004626:	89a3      	ldrh	r3, [r4, #12]
 8004628:	059b      	lsls	r3, r3, #22
 800462a:	d4dd      	bmi.n	80045e8 <_fflush_r+0xc>
 800462c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800462e:	f7ff fa96 	bl	8003b5e <__retarget_lock_release_recursive>
 8004632:	e7d9      	b.n	80045e8 <_fflush_r+0xc>
 8004634:	4b05      	ldr	r3, [pc, #20]	; (800464c <_fflush_r+0x70>)
 8004636:	429c      	cmp	r4, r3
 8004638:	d101      	bne.n	800463e <_fflush_r+0x62>
 800463a:	68ac      	ldr	r4, [r5, #8]
 800463c:	e7df      	b.n	80045fe <_fflush_r+0x22>
 800463e:	4b04      	ldr	r3, [pc, #16]	; (8004650 <_fflush_r+0x74>)
 8004640:	429c      	cmp	r4, r3
 8004642:	bf08      	it	eq
 8004644:	68ec      	ldreq	r4, [r5, #12]
 8004646:	e7da      	b.n	80045fe <_fflush_r+0x22>
 8004648:	0800491c 	.word	0x0800491c
 800464c:	0800493c 	.word	0x0800493c
 8004650:	080048fc 	.word	0x080048fc

08004654 <_lseek_r>:
 8004654:	b538      	push	{r3, r4, r5, lr}
 8004656:	4d07      	ldr	r5, [pc, #28]	; (8004674 <_lseek_r+0x20>)
 8004658:	4604      	mov	r4, r0
 800465a:	4608      	mov	r0, r1
 800465c:	4611      	mov	r1, r2
 800465e:	2200      	movs	r2, #0
 8004660:	602a      	str	r2, [r5, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	f7fc fc9b 	bl	8000f9e <_lseek>
 8004668:	1c43      	adds	r3, r0, #1
 800466a:	d102      	bne.n	8004672 <_lseek_r+0x1e>
 800466c:	682b      	ldr	r3, [r5, #0]
 800466e:	b103      	cbz	r3, 8004672 <_lseek_r+0x1e>
 8004670:	6023      	str	r3, [r4, #0]
 8004672:	bd38      	pop	{r3, r4, r5, pc}
 8004674:	2000012c 	.word	0x2000012c

08004678 <__swhatbuf_r>:
 8004678:	b570      	push	{r4, r5, r6, lr}
 800467a:	460e      	mov	r6, r1
 800467c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004680:	2900      	cmp	r1, #0
 8004682:	b096      	sub	sp, #88	; 0x58
 8004684:	4614      	mov	r4, r2
 8004686:	461d      	mov	r5, r3
 8004688:	da08      	bge.n	800469c <__swhatbuf_r+0x24>
 800468a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	602a      	str	r2, [r5, #0]
 8004692:	061a      	lsls	r2, r3, #24
 8004694:	d410      	bmi.n	80046b8 <__swhatbuf_r+0x40>
 8004696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800469a:	e00e      	b.n	80046ba <__swhatbuf_r+0x42>
 800469c:	466a      	mov	r2, sp
 800469e:	f000 f8bb 	bl	8004818 <_fstat_r>
 80046a2:	2800      	cmp	r0, #0
 80046a4:	dbf1      	blt.n	800468a <__swhatbuf_r+0x12>
 80046a6:	9a01      	ldr	r2, [sp, #4]
 80046a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80046ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80046b0:	425a      	negs	r2, r3
 80046b2:	415a      	adcs	r2, r3
 80046b4:	602a      	str	r2, [r5, #0]
 80046b6:	e7ee      	b.n	8004696 <__swhatbuf_r+0x1e>
 80046b8:	2340      	movs	r3, #64	; 0x40
 80046ba:	2000      	movs	r0, #0
 80046bc:	6023      	str	r3, [r4, #0]
 80046be:	b016      	add	sp, #88	; 0x58
 80046c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080046c4 <__smakebuf_r>:
 80046c4:	898b      	ldrh	r3, [r1, #12]
 80046c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80046c8:	079d      	lsls	r5, r3, #30
 80046ca:	4606      	mov	r6, r0
 80046cc:	460c      	mov	r4, r1
 80046ce:	d507      	bpl.n	80046e0 <__smakebuf_r+0x1c>
 80046d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046d4:	6023      	str	r3, [r4, #0]
 80046d6:	6123      	str	r3, [r4, #16]
 80046d8:	2301      	movs	r3, #1
 80046da:	6163      	str	r3, [r4, #20]
 80046dc:	b002      	add	sp, #8
 80046de:	bd70      	pop	{r4, r5, r6, pc}
 80046e0:	ab01      	add	r3, sp, #4
 80046e2:	466a      	mov	r2, sp
 80046e4:	f7ff ffc8 	bl	8004678 <__swhatbuf_r>
 80046e8:	9900      	ldr	r1, [sp, #0]
 80046ea:	4605      	mov	r5, r0
 80046ec:	4630      	mov	r0, r6
 80046ee:	f7ff fa57 	bl	8003ba0 <_malloc_r>
 80046f2:	b948      	cbnz	r0, 8004708 <__smakebuf_r+0x44>
 80046f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046f8:	059a      	lsls	r2, r3, #22
 80046fa:	d4ef      	bmi.n	80046dc <__smakebuf_r+0x18>
 80046fc:	f023 0303 	bic.w	r3, r3, #3
 8004700:	f043 0302 	orr.w	r3, r3, #2
 8004704:	81a3      	strh	r3, [r4, #12]
 8004706:	e7e3      	b.n	80046d0 <__smakebuf_r+0xc>
 8004708:	4b0d      	ldr	r3, [pc, #52]	; (8004740 <__smakebuf_r+0x7c>)
 800470a:	62b3      	str	r3, [r6, #40]	; 0x28
 800470c:	89a3      	ldrh	r3, [r4, #12]
 800470e:	6020      	str	r0, [r4, #0]
 8004710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004714:	81a3      	strh	r3, [r4, #12]
 8004716:	9b00      	ldr	r3, [sp, #0]
 8004718:	6163      	str	r3, [r4, #20]
 800471a:	9b01      	ldr	r3, [sp, #4]
 800471c:	6120      	str	r0, [r4, #16]
 800471e:	b15b      	cbz	r3, 8004738 <__smakebuf_r+0x74>
 8004720:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004724:	4630      	mov	r0, r6
 8004726:	f000 f889 	bl	800483c <_isatty_r>
 800472a:	b128      	cbz	r0, 8004738 <__smakebuf_r+0x74>
 800472c:	89a3      	ldrh	r3, [r4, #12]
 800472e:	f023 0303 	bic.w	r3, r3, #3
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	81a3      	strh	r3, [r4, #12]
 8004738:	89a0      	ldrh	r0, [r4, #12]
 800473a:	4305      	orrs	r5, r0
 800473c:	81a5      	strh	r5, [r4, #12]
 800473e:	e7cd      	b.n	80046dc <__smakebuf_r+0x18>
 8004740:	080039b9 	.word	0x080039b9

08004744 <__malloc_lock>:
 8004744:	4801      	ldr	r0, [pc, #4]	; (800474c <__malloc_lock+0x8>)
 8004746:	f7ff ba09 	b.w	8003b5c <__retarget_lock_acquire_recursive>
 800474a:	bf00      	nop
 800474c:	20000120 	.word	0x20000120

08004750 <__malloc_unlock>:
 8004750:	4801      	ldr	r0, [pc, #4]	; (8004758 <__malloc_unlock+0x8>)
 8004752:	f7ff ba04 	b.w	8003b5e <__retarget_lock_release_recursive>
 8004756:	bf00      	nop
 8004758:	20000120 	.word	0x20000120

0800475c <_free_r>:
 800475c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800475e:	2900      	cmp	r1, #0
 8004760:	d044      	beq.n	80047ec <_free_r+0x90>
 8004762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004766:	9001      	str	r0, [sp, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	f1a1 0404 	sub.w	r4, r1, #4
 800476e:	bfb8      	it	lt
 8004770:	18e4      	addlt	r4, r4, r3
 8004772:	f7ff ffe7 	bl	8004744 <__malloc_lock>
 8004776:	4a1e      	ldr	r2, [pc, #120]	; (80047f0 <_free_r+0x94>)
 8004778:	9801      	ldr	r0, [sp, #4]
 800477a:	6813      	ldr	r3, [r2, #0]
 800477c:	b933      	cbnz	r3, 800478c <_free_r+0x30>
 800477e:	6063      	str	r3, [r4, #4]
 8004780:	6014      	str	r4, [r2, #0]
 8004782:	b003      	add	sp, #12
 8004784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004788:	f7ff bfe2 	b.w	8004750 <__malloc_unlock>
 800478c:	42a3      	cmp	r3, r4
 800478e:	d908      	bls.n	80047a2 <_free_r+0x46>
 8004790:	6825      	ldr	r5, [r4, #0]
 8004792:	1961      	adds	r1, r4, r5
 8004794:	428b      	cmp	r3, r1
 8004796:	bf01      	itttt	eq
 8004798:	6819      	ldreq	r1, [r3, #0]
 800479a:	685b      	ldreq	r3, [r3, #4]
 800479c:	1949      	addeq	r1, r1, r5
 800479e:	6021      	streq	r1, [r4, #0]
 80047a0:	e7ed      	b.n	800477e <_free_r+0x22>
 80047a2:	461a      	mov	r2, r3
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	b10b      	cbz	r3, 80047ac <_free_r+0x50>
 80047a8:	42a3      	cmp	r3, r4
 80047aa:	d9fa      	bls.n	80047a2 <_free_r+0x46>
 80047ac:	6811      	ldr	r1, [r2, #0]
 80047ae:	1855      	adds	r5, r2, r1
 80047b0:	42a5      	cmp	r5, r4
 80047b2:	d10b      	bne.n	80047cc <_free_r+0x70>
 80047b4:	6824      	ldr	r4, [r4, #0]
 80047b6:	4421      	add	r1, r4
 80047b8:	1854      	adds	r4, r2, r1
 80047ba:	42a3      	cmp	r3, r4
 80047bc:	6011      	str	r1, [r2, #0]
 80047be:	d1e0      	bne.n	8004782 <_free_r+0x26>
 80047c0:	681c      	ldr	r4, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	6053      	str	r3, [r2, #4]
 80047c6:	4421      	add	r1, r4
 80047c8:	6011      	str	r1, [r2, #0]
 80047ca:	e7da      	b.n	8004782 <_free_r+0x26>
 80047cc:	d902      	bls.n	80047d4 <_free_r+0x78>
 80047ce:	230c      	movs	r3, #12
 80047d0:	6003      	str	r3, [r0, #0]
 80047d2:	e7d6      	b.n	8004782 <_free_r+0x26>
 80047d4:	6825      	ldr	r5, [r4, #0]
 80047d6:	1961      	adds	r1, r4, r5
 80047d8:	428b      	cmp	r3, r1
 80047da:	bf04      	itt	eq
 80047dc:	6819      	ldreq	r1, [r3, #0]
 80047de:	685b      	ldreq	r3, [r3, #4]
 80047e0:	6063      	str	r3, [r4, #4]
 80047e2:	bf04      	itt	eq
 80047e4:	1949      	addeq	r1, r1, r5
 80047e6:	6021      	streq	r1, [r4, #0]
 80047e8:	6054      	str	r4, [r2, #4]
 80047ea:	e7ca      	b.n	8004782 <_free_r+0x26>
 80047ec:	b003      	add	sp, #12
 80047ee:	bd30      	pop	{r4, r5, pc}
 80047f0:	20000124 	.word	0x20000124

080047f4 <_read_r>:
 80047f4:	b538      	push	{r3, r4, r5, lr}
 80047f6:	4d07      	ldr	r5, [pc, #28]	; (8004814 <_read_r+0x20>)
 80047f8:	4604      	mov	r4, r0
 80047fa:	4608      	mov	r0, r1
 80047fc:	4611      	mov	r1, r2
 80047fe:	2200      	movs	r2, #0
 8004800:	602a      	str	r2, [r5, #0]
 8004802:	461a      	mov	r2, r3
 8004804:	f7fc fb6b 	bl	8000ede <_read>
 8004808:	1c43      	adds	r3, r0, #1
 800480a:	d102      	bne.n	8004812 <_read_r+0x1e>
 800480c:	682b      	ldr	r3, [r5, #0]
 800480e:	b103      	cbz	r3, 8004812 <_read_r+0x1e>
 8004810:	6023      	str	r3, [r4, #0]
 8004812:	bd38      	pop	{r3, r4, r5, pc}
 8004814:	2000012c 	.word	0x2000012c

08004818 <_fstat_r>:
 8004818:	b538      	push	{r3, r4, r5, lr}
 800481a:	4d07      	ldr	r5, [pc, #28]	; (8004838 <_fstat_r+0x20>)
 800481c:	2300      	movs	r3, #0
 800481e:	4604      	mov	r4, r0
 8004820:	4608      	mov	r0, r1
 8004822:	4611      	mov	r1, r2
 8004824:	602b      	str	r3, [r5, #0]
 8004826:	f7fc fb9f 	bl	8000f68 <_fstat>
 800482a:	1c43      	adds	r3, r0, #1
 800482c:	d102      	bne.n	8004834 <_fstat_r+0x1c>
 800482e:	682b      	ldr	r3, [r5, #0]
 8004830:	b103      	cbz	r3, 8004834 <_fstat_r+0x1c>
 8004832:	6023      	str	r3, [r4, #0]
 8004834:	bd38      	pop	{r3, r4, r5, pc}
 8004836:	bf00      	nop
 8004838:	2000012c 	.word	0x2000012c

0800483c <_isatty_r>:
 800483c:	b538      	push	{r3, r4, r5, lr}
 800483e:	4d06      	ldr	r5, [pc, #24]	; (8004858 <_isatty_r+0x1c>)
 8004840:	2300      	movs	r3, #0
 8004842:	4604      	mov	r4, r0
 8004844:	4608      	mov	r0, r1
 8004846:	602b      	str	r3, [r5, #0]
 8004848:	f7fc fb9e 	bl	8000f88 <_isatty>
 800484c:	1c43      	adds	r3, r0, #1
 800484e:	d102      	bne.n	8004856 <_isatty_r+0x1a>
 8004850:	682b      	ldr	r3, [r5, #0]
 8004852:	b103      	cbz	r3, 8004856 <_isatty_r+0x1a>
 8004854:	6023      	str	r3, [r4, #0]
 8004856:	bd38      	pop	{r3, r4, r5, pc}
 8004858:	2000012c 	.word	0x2000012c

0800485c <_init>:
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	bf00      	nop
 8004860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004862:	bc08      	pop	{r3}
 8004864:	469e      	mov	lr, r3
 8004866:	4770      	bx	lr

08004868 <_fini>:
 8004868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486a:	bf00      	nop
 800486c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486e:	bc08      	pop	{r3}
 8004870:	469e      	mov	lr, r3
 8004872:	4770      	bx	lr
